<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 24249 -->
<!-- Reviewed: 22432 -->
<sect1 id="zend.json.basics">
    <title>Grundlegende Verwendung</title>

    <para>
        Bei der  Verwendung von <classname>Zend_Json</classname> geht es auch um die beiden
        öffentlich verfügbaren, statischen Methoden <methodname>Zend_Json::encode()</methodname> und
        <methodname>Zend_Json::decode()</methodname>.
    </para>

    <programlisting language="php"><![CDATA[
// Empfange einen Wert
$phpNative = Zend_Json::decode($encodedValue);

// Kodiere ihn für die Rückgabe an den Client:
$json = Zend_Json::encode($phpNative);
]]></programlisting>

    <sect2 id="zend.json.basics.prettyprint">
        <title>Pretty-Print von JSON</title>

        <para>
            Manchmal ist es schwer <acronym>JSON</acronym> Daten zu durchsuchen, welche von
            <methodname>Zend_Json::encode()</methodname> erzeugt wurden, da sie keine Leerzeichen
            oder Einrückungen enthalten. Um das einfacher zu machen, erlaubt es
            <classname>Zend_Json</classname> <acronym>JSON</acronym> formatiert und strukturiert
            in einem menschen-lesbaren Format zu erhalten, indem man
            <methodname>Zend_Json::prettyPrint()</methodname> verwendet.
        </para>

        <programlisting language="php"><![CDATA[
// Kodieren und an den Client zurückzugeben:
$json = Zend_Json::encode($phpNative);
if($debug) {
    echo Zend_Json::prettyPrint($json, array("indent" => " "));
}
]]></programlisting>

        <para>
            Das zweite optionale Argument von <methodname>Zend_Json::prettyPrint()</methodname> ist
            ein Optionen Array. Die Option <property>indent</property> erlaubt es, einen String für
            die Einrückung zu definieren - standardmäßig ist das ein einzelnes Tabulatorzeichen.
        </para>
    </sect2>
</sect1>
