<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 24249 -->
<!-- Reviewed: no -->
<sect1 id="zend.json.xml2json">
    <title>Conversão de XML para JSON</title>

    <para>
        <classname>Zend_Json</classname> fornece um conveniente método para transformar dados
        formatados em <acronym>XML</acronym> para o formato <acronym>JSON</acronym>. Este recurso
        foi inspirado em um <ulink
            url="http://www.ibm.com/developerworks/xml/library/x-xml2jsonphp/">artigo do
            IBM developerWorks</ulink>.
    </para>

    <para>
        <classname>Zend_Json</classname> inclui uma função estática chamada
        <methodname>Zend_Json::fromXml()</methodname>. Esta função irá gerar um
        <acronym>JSON</acronym> a partir de uma entrada em <acronym>XML</acronym>. Esta função
        recebe qualquer string arbitrária em <acronym>XML</acronym> como um parâmetro de entrada.
        Tem também um parâmetro de entrada opcional do tipo booleano que instrui a lógica de
        conversão para ignorar ou não os atributos <acronym>XML</acronym> durante o processo de
        conversão. Se esse parâmetro de entrada opcional não é dado, então o comportamento padrão
        é ignorar os atributos <acronym>XML</acronym>. Esta chamada de função é feita como mostrado
        abaixo:
    </para>

    <programlisting language="php"><![CDATA[
// a função fromXml simplesmente recebe uma String contendo conteúdo
// em XML como entrada.
$jsonContents = Zend_Json::fromXml($xmlStringContents, true);
]]></programlisting>

    <para>
        A função <methodname>Zend_Json::fromXml()</methodname> faz a conversão da string formata
        em <acronym>XML</acronym> do parâmetro de entrada e retorna o equivalente como uma string
        formatada em <acronym>JSON</acronym>. No caso de qualquer erro de formatação do
        <acronym>XML</acronym> ou erro na lógica de conversão, esta função irá lançar uma exceção.
        A lógica de conversão também utiliza técnicas recursivas para percorrer a árvore
        <acronym>XML</acronym>. Ele suporta até 25 níveis de profundidade de recursão. Se passar
        dessa profundidade, será lançado um <classname>Zend_Json_Exception</classname>. Existem
        vários arquivos <acronym>XML</acronym> com vários graus de complexidade fornecidos no
        diretório de testes de Zend Framework. Eles podem ser usados para testar a
        funcionalidade do recurso xml2json.
    </para>

    <para>
        O simples exemplo a seguir mostra uma string <acronym>XML</acronym> passada como entrada e
        uma string <acronym>JSON</acronym> de saída retornada como resultado da função
        <methodname>Zend_Json::fromXml()</methodname>. Este exemplo usa o parâmetro opcional da
        função para não ignorar os atributos <acronym>XML</acronym> durante a conversão.
        Consequentemente, você pode notar que a string <acronym>JSON</acronym> resultante inclui
        uma representação dos atributos <acronym>XML</acronym> presentes na string
        <acronym>XML</acronym> de entrada.
    </para>

    <para>
        String <acronym>XML</acronym> passada como entrada para a função
        <methodname>Zend_Json::fromXml()</methodname>:
    </para>

    <programlisting language="php"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<books>
    <book id="1">
        <title>Code Generation in Action</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>Manning</publisher>
    </book>

    <book id="2">
        <title>PHP Hacks</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>O'Reilly</publisher>
    </book>

    <book id="3">
        <title>Podcasting Hacks</title>
        <author><first>Jack</first><last>Herrington</last></author>
        <publisher>O'Reilly</publisher>
    </book>
</books>
]]></programlisting>

    <para>
        String <acronym>JSON</acronym> de saída retornada da função
        <methodname>Zend_Json::fromXml()</methodname>:
    </para>

    <programlisting language="php"><![CDATA[
{
   "books" : {
      "book" : [ {
         "@attributes" : {
            "id" : "1"
         },
         "title" : "Code Generation in Action",
         "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "Manning"
      }, {
         "@attributes" : {
            "id" : "2"
         },
         "title" : "PHP Hacks", "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "O'Reilly"
      }, {
         "@attributes" : {
            "id" : "3"
         },
         "title" : "Podcasting Hacks", "author" : {
            "first" : "Jack", "last" : "Herrington"
         },
         "publisher" : "O'Reilly"
      }
   ]}
}
]]></programlisting>

<sect2 id="zend.json.xml2json.changes">
    <title>Changes</title>

    <sect3 id="zend.json.xml2json.changes.1-11-6">
        <title>Changes in 1.11.6</title>

        <para>
            Starting from the release 1.11.6 the <methodname>Zend_Json::fromXml()</methodname> function
            has been rewritten from scratch in order to manage XML element with attributes, text value
            and sub-elements (see the <ulink url="http://framework.zend.com/issues/browse/ZF-3257">ZF-3257</ulink>).
        </para>

        <para>
            For instance, if you have an XML document like this:
        </para>

        <programlisting language="php"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<a>
    <b id="foo"/>
    bar
</a>
]]></programlisting>

            <para>
                The <acronym>JSON</acronym> output string returned from
                <methodname>Zend_Json::fromXml()</methodname> is:
            </para>

            <programlisting language="php"><![CDATA[
{
   "a" : {
      "b" : {
         "@attributes" : {
            "id" : "foo"
         }
      },
      "@text" : "bar"
   }
}
]]></programlisting>

            <para>
                The idea is to use a special key value (@text) to store the text value of an XML element,
                only if this element contains attributes or sub-elements (as in the previous examples).
                If you have a simple XML element with only a text value, like this:
            </para>

            <programlisting language="php"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<a>foo</a>
]]></programlisting>

            <para>
                the JSON will be {"a":"foo"} that is quite intuitive, instead of {"a":{"@text":"foo"}}.
            </para>
    </sect3>
</sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
