<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 19457 -->
<sect1 id="migration.110">
    <title>Zend Framework 1.10</title>

    <para>
        以前のバージョンから Zend Framework 1.10 またはそれ以降に更新する際は、
        下記の移行上の注意点に注意すべきです。
    </para>

    <sect2 id="migration.110.zend.file.transfer">
        <title>Zend_File_Transfer</title>
        <sect3 id="migration.110.zend.file.transfer.count">
            <title>Count 検証</title>

            <para>
                リリース 1.10 より前は <classname>MimeType</classname> バリデータが誤った命名を使っていました。
                一貫性のために、下記の定数が変更されました。
            </para>

            <table id="migration.110.zend.file.transfer.count.table">
                <title>変更された検証メッセージ</title>
                <tgroup cols="4">
                    <thead>
                        <row>
                            <entry>旧</entry>
                            <entry>新</entry>
                            <entry>値</entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry><constant>TOO_MUCH</constant></entry>
                            <entry><constant>TOO_MANY</constant></entry>
                            <entry>
                                Too many files, maximum '%max%' are allowed but '%count%' are given
                            </entry>
                        </row>

                        <row>
                            <entry><constant>TOO_LESS</constant></entry>
                            <entry><constant>TOO_FEW</constant></entry>
                            <entry>
                                Too few files, minimum '%min%' are expected but '%count%' are given
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>
                コード内でこれらのメッセージを翻訳している場合、新しい定数を使います。
                利点として、正しいつづりを得るために、本来の文字列を翻訳する必要はもうありません。
            </para>
        </sect3>
    </sect2>

    <sect2 id="migration.110.zend.translate">
        <title>Zend_Translate</title>

        <sect3 id="migration.110.zend.translate.xliff">
            <title>Xliff アダプタ</title>

            <para>
                過去には Xliff アダプタはソースの文字列をメッセージ Id として使いました。
                Xliff 標準に沿って、翻訳単位 Id が使われるべきです。
                この振る舞いは Zend Framework 1.10 で修正されました。
                今では既定では翻訳単位 Id はメッセージId として使われます。
            </para>

            <para>
                しかし、 <property>useId</property> オプションを <constant>FALSE</constant> に設定することにより、
                正しくなくて古い振る舞いをまだ得られます。
                
            </para>

            <programlisting language="php"><![CDATA[
$trans = new Zend_Translate('xliff', '/path/to/source', $locale, array('useId' => false));
]]></programlisting>
        </sect3>
    </sect2>

    <sect2 id="migration.110.zend.validate">
        <title>Zend_Validate</title>

        <sect3 id="migration.110.zend.validate.selfwritten">
            <title>書かれたバリデータ自身</title>

            <para>
                かかれたバリデータ自身の内部からエラーを返すよう設定するときは、
                <methodname>_error()</methodname>メソッドを呼ばなくてはいけません。
                Zend Framework 1.10 以前では、パラメータを与えなくてもこのメソッドを呼び出せました。
                そこで、最初に見つかったメッセージテンプレートを使いました。
            </para>

            <para>
                この振る舞いには、一つ以上の異なるメッセージを返すバリデータを使うときに問題があります。
                また、既存のバリデータを拡張すると、予期しない結果を得ることもあります。
                このせいで、あなたが期待した通りではないメッセージにユーザーが遭遇することにもなりました。
            </para>

            <programlisting language="php"><![CDATA[
My_Validator extends Zend_Validate_Abstract
{
    public isValid($value)
    {
        ...
        $this->_error(); // 異なるOS間での予期されない結果
        ...
    }
}
]]></programlisting>

            <para>
                この問題を防ぐために、<methodname>_error()</methodname>メソッドにパラメータを与えないで呼び出すことは、
                もはやできなくなります。
            </para>

            <programlisting language="php"><![CDATA[
My_Validator extends Zend_Validate_Abstract
{
    public isValid($value)
    {
        ...
        $this->_error(self::MY_ERROR); // 定義されたエラー、予期されない結果ではありません
        ...
    }
}
]]></programlisting>
        </sect3>

        <sect3 id="migration.110.zend.validate.datevalidator">
            <title>日付バリデータの簡略化</title>

            <para>
                Zend Framework 1.10 以前では、同一の２つのメッセージが、
                日付バリデータ内でスローされていました。
                これらは、<constant>NOT_YYYY_MM_DD</constant>と<constant>FALSEFORMAT</constant>でした。
                Zend Framework 1.10 現在では、
                与えられた日付が設定されたフォーマットに一致しない場合、
                <constant>FALSEFORMAT</constant>メッセージだけが返されます。
            </para>
        </sect3>

        <sect3 id="migration.110.zend.validate.barcodevalidator">
            <title>Alpha、Alnum及びBarcodeバリデータの修正</title>

            <para>
                Zend Framework 1.10 以前では、バーコード・アダプタ２種類と、
                Alpha 及び Alnum バリデータ内のメッセージが同一でした。
                このため、カスタムのメッセージ、翻訳、
                またはこれらのバリデータの複数のインスタンスを使うときに問題がありました。
            </para>

            <para>
                Zend Framework 1.10 では、定数値は、一意であるように変更されました。
                マニュアルで提案されたように定数を使ったときには、変更がありません。
                しかし、コードで定数の内容を使ったときには、
                それらを変更しなければなりません。
                下記の表では変更された値を示します。
            </para>

            <table id="migration.110.zend.validate.barcodevalidator.table">
                <title>利用可能なバリデータのメッセージ</title>
                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>バリデータ</entry>
                            <entry>定数</entry>
                            <entry>値</entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry><classname>Alnum</classname></entry>
                            <entry><constant>STRING_EMPTY</constant></entry>
                            <entry>alnumStringEmpty</entry>
                        </row>

                        <row>
                            <entry><classname>Alpha</classname></entry>
                            <entry><constant>STRING_EMPTY</constant></entry>
                            <entry>alphaStringEmpty</entry>
                        </row>

                        <row>
                            <entry><classname>Barcode_Ean13</classname></entry>
                            <entry><constant>INVALID</constant></entry>
                            <entry>ean13Invalid</entry>
                        </row>

                        <row>
                            <entry><classname>Barcode_Ean13</classname></entry>
                            <entry><constant>INVALID_LENGTH</constant></entry>
                            <entry>ean13InvalidLength</entry>
                        </row>

                        <row>
                            <entry><classname>Barcode_UpcA</classname></entry>
                            <entry><constant>INVALID</constant></entry>
                            <entry>upcaInvalid</entry>
                        </row>

                        <row>
                            <entry><classname>Barcode_UpcA</classname></entry>
                            <entry><constant>INVALID_LENGTH</constant></entry>
                            <entry>upcaInvalidLength</entry>
                        </row>

                        <row>
                            <entry><classname>Digits</classname></entry>
                            <entry><constant>STRING_EMPTY</constant></entry>
                            <entry>digitsStringEmpty</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

        </sect3>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->