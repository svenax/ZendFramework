<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 18804 -->
<sect1 id="migration.19">
    <title>Zend Framework 1.9</title>

    <para>
        以前のバージョンから Zend Framework 1.9 またはそれ以降に更新する際は、
        下記の移行上の注意点に注意すべきです。
    </para>

    <sect2 id="migration.19.zend.file.transfer">
        <title>Zend_File_Transfer</title>

        <sect3 id="migration.19.zend.file.transfer.mimetype">
            <title>MimeType の検証</title>

            <para>
                セキュリティ上の理由から、
                <classname>MimeType</classname>、<classname>ExcludeMimeType</classname>、
                <classname>IsCompressed</classname> および <classname>IsImage</classname>
                バリデータにおけるデフォルトのフォールバック機能を無効にしました。
                つまり、<emphasis>fileInfo</emphasis> 拡張モジュールあるいは
                <emphasis>magicMime</emphasis> 拡張モジュールがなければ、
                検証が常に失敗するようになるということです。
            </para>

            <para>
                ユーザ側から渡された <acronym>HTTP</acronym> フィールドを使用して入力を検証する必要がある場合は、
                <methodname>enableHeaderCheck()</methodname> メソッドを使用すればこの機能を有効にできます。
            </para>

            <note>
                <title>セキュリティに関するヒント</title>

                <para>
                    ユーザ側から渡された <acronym>HTTP</acronym>
                    フィールドに依存するのはセキュリティ上のリスクとなることに注意しましょう。
                    これは簡単に改ざんすることができ、悪意のあるファイルを受け取る可能性があります。
                </para>
            </note>

            <example id="migration.19.zend.file.transfer.example">
                <title>HTTP フィールドの使用を許可する</title>

                <programlisting language="php"><![CDATA[
// 初期化時に
$valid = new Zend_File_Transfer_Adapter_Http(array('headerCheck' => true);

// あるいは後から
$valid->enableHeaderCheck();
]]></programlisting>
            </example>
        </sect3>
    </sect2>

    <sect2 id="migration.19.zend.filter">
        <title>Zend_Filter</title>

        <para>
            1.9のリリース以前は、<classname>Zend_Filter</classname>では、
            static <methodname>get()</methodname>メソッドを使うことができました。
            リリース1.9と同時に、このメソッドは、より描写的な
            <methodname>filterStatic()</methodname>に名前を変更されました。
            古い <methodname>get()</methodname> メソッドは非推奨に区分されます。
        </para>
    </sect2>

    <sect2 id="migration.19.zend.http.client">
        <title>Zend_Http_Client</title>

        <sect3 id="migration.19.zend.http.client.fileuploadsarray">
            <title>内部のアップロードされたファイル情報ストレージに変更</title>

            <para>
                Zend Framework のバージョン 1.9 では、
                アップロードされるファイルに関する情報を
                <classname>Zend_Http_Client</classname>が内部的に格納し、
                <methodname>Zend_Http_Client::setFileUpload()</methodname>メソッドを用いてセットする
                方法で変化がありました。
            </para>

            <para>
                複数のファイルを同じフォーム名で
                ファイルの配列としてアップロードできるように
                この変化が取り入れられました。
                この問題に関するより多くの情報は、
                <ulink url="http://framework.zend.com/issues/browse/ZF-5744">このバグ・レポート</ulink>
                で見つけることができます。
            </para>

            <example id="migration.19.zend.http.client.fileuploadsarray.example">
                <title>アップロードされたファイル情報の内部ストレージ</title>

                <programlisting language="php"><![CDATA[
// ファイル２つを同じフォーム要素名でファイルの配列としてアップロード
$client = new Zend_Http_Client();
$client->setFileUpload('file1.txt',
                       'userfile[]',
                       'some raw data',
                       'text/plain');
$client->setFileUpload('file2.txt',
                       'userfile[]',
                       'some other data',
                       'application/octet-stream');

// Zend Framework の 1.8 以前では、
// protected メンバー $client->files の値はこうです:
// $client->files = array(
//     'userfile[]' => array('file2.txt',
                             'application/octet-stream',
                             'some other data')
// );

// Zend Framework の 1.9 以降では、$client->files の値はこうです:
// $client->files = array(
//     array(
//         'formname' => 'userfile[]',
//         'filename' => 'file1.txt,
//         'ctype'    => 'text/plain',
//         'data'     => 'some raw data'
//     ),
//     array(
//         'formname' => 'userfile[]',
//         'filename' => 'file2.txt',
//         'formname' => 'application/octet-stream',
//         'formname' => 'some other data'
//     )
// );
]]></programlisting>
            </example>

            <para>
                ご覧の通り、この変化は1つ以上のファイルで同じフォーム要素名を使えるようにします。
                しかし、それは微妙な下位互換性変化を取り入れるので、そのように注意するべきです。
            </para>
        </sect3>

        <sect3 id="migration.19.zend.http.client.getparamsrecursize">
            <title>Zend_Http_Client::_getParametersRecursive() の廃止</title>

            <para>
                バージョン1.9から始まりますが、
                protected メソッド <methodname>_getParametersRecursive()</methodname> はもはや
                <classname>Zend_Http_Client</classname> に使われず、廃止されます。
                それを使うと、E_NOTICE メッセージが<acronym>PHP</acronym>によって発生する原因になります。
            </para>

            <para>
                <classname>Zend_Http_Client</classname>をサブクラスとして、このメソッドを呼ぶなら、
                その代わりに <methodname>Zend_Http_Client::_flattenParametersArray()</methodname>
                static メソッドを使用することに目を向けるべきです。
            </para>

            <para>
                また、この<classname>_getParametersRecursive</classname>は protected メソッドなので、
                この変化は<classname>Zend_Http_Client</classname>をサブクラスとするユーザーに
                影響を及ぼすだけです。
            </para>
        </sect3>
    </sect2>

    <sect2 id="migration.19.zend.locale">
        <title>Zend_Locale</title>

        <sect3 id="migration.19.zend.locale.depreciated">
            <title>非推奨となるメソッド</title>

            <para>
                特別に用意されていたメソッドのいくつかが非推奨となります。
                既存の挙動と重複しているからです。
                古いメソッドも動作するにはしますが、
                新しいメソッドについて説明する user notice が発生することに注意しましょう。
                これらのメソッドは 2.0 で削除されます。
                次の一覧で、新旧のメソッドコールを参照ください。
            </para>

            <table id="migration.19.zend.locale.depreciated.table-1">
                <title>新旧のメソッドコールの一覧</title>

                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>古い方法</entry>
                            <entry>新しい方法</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>getLanguageTranslationList($locale)</entry>
                            <entry>getTranslationList('language', $locale)</entry>
                        </row>
                        <row>
                            <entry>getScriptTranslationList($locale)</entry>
                            <entry>getTranslationList('script', $locale)</entry>
                        </row>
                        <row>
                            <entry>getCountryTranslationList($locale)</entry>
                            <entry>getTranslationList('territory', $locale, 2)</entry>
                        </row>
                        <row>
                            <entry>getTerritoryTranslationList($locale)</entry>
                            <entry>getTranslationList('territory', $locale, 1)</entry>
                        </row>
                        <row>
                            <entry>getLanguageTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'language', $locale)</entry>
                        </row>
                        <row>
                            <entry>getScriptTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'script', $locale)</entry>
                        </row>
                        <row>
                            <entry>getCountryTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'country', $locale)</entry>
                        </row>
                        <row>
                            <entry>getTerritoryTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'territory', $locale)</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect3>
    </sect2>

    <sect2 id="migration.19.zend.view.helper.navigation">
        <title>Zend_View_Helper_Navigation</title>

        <para>
            <!-- TODO : to be translated -->
            Prior to the 1.9 release, the menu helper
            (<classname>Zend_View_Helper_Navigation_Menu</classname>) did not
            render sub menus correctly. When the <code>onlyActiveBranch</code>
            was <constant>TRUE</constant> and the option <code>renderParents</code>
            <constant>FALSE</constant>, nothing would be rendered if the deepest active
            page was at a depth lower than the <code>minDepth</code> option.
        </para>

        <para>
            In simpler words; if <code>minDepth</code> was set to <code>1</code>
            and the active page was at one of the first level pages, nothing
            would be rendered, as the following example shows.
        </para>

        <para>
            Consider the following container setup:
        </para>

        <programlisting language="php"><![CDATA[
<?php
$container = new Zend_Navigation(array(
    array(
        'label' => 'Home',
        'uri'   => '#'
    ),
    array(
        'label'  => 'Products',
        'uri'    => '#',
        'active' => true,
        'pages'  => array(
            array(
                'label' => 'Server',
                'uri'   => '#'
            ),
            array(
                'label' => 'Studio',
                'uri'   => '#'
            )
        )
    ),
    array(
        'label' => 'Solutions',
        'uri'   => '#'
    )
));
]]></programlisting>

        <para>
            The following code is used in a view script:
        </para>

        <programlisting language="php"><![CDATA[
<?php echo $this->navigation()->menu()->renderMenu($container, array(
    'minDepth'         => 1,
    'onlyActiveBranch' => true,
    'renderParents'    => false
)); ?>
]]></programlisting>

        <para>
            Before release 1.9, the code snippet above would output nothing.
        </para>

        <para>
            Since release 1.9, the <methodname>_renderDeepestMenu()</methodname> method in
            <classname>Zend_View_Helper_Navigation_Menu</classname> will accept
            active pages at one level below <code>minDepth</code>, as long as
            the page has children.
        </para>

        <para>
            The same code snippet will now output the following:
        </para>

        <programlisting language="html"><![CDATA[
<ul class="navigation">
    <li>
        <a href="#">Server</a>
    </li>
    <li>
        <a href="#">Studio</a>
    </li>
</ul>
]]></programlisting>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->