<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 15103 -->
<sect3 id="zend.controller.plugins.standard.actionstack">
    <title>ActionStack</title>

    <para>
        <code>ActionStack</code> プラグインは、リクエストをスタックで管理します。
        <code>postDispatch</code> プラグインとして動作します。
        現在のリクエストオブジェクトで既に転送先が指定されている
        (別のアクションがコールされている) 場合は、何も行いません。
        転送されていない場合はスタックの最上位の要素を取り出し、
        そのリクエストが指すアクションに転送します。
        スタックの処理は LIFO (後入れ先出し) 方式で行います。
    </para>

    <para>
        このプラグインをフロントコントローラから取得するには、
        <classname>Zend_Controller_Front::getPlugin('Zend_Controller_Plugin_ActionStack')</classname>
        とします。プラグインオブジェクトを取得したら、
        さまざまな仕組みを利用できるようになります。
    </para>

    <itemizedlist>
        <listitem><para>
                <code>getRegistry()</code> および <code>setRegistry()</code>。
                <code>ActionStack</code> は、内部的に
                <classname>Zend_Registry</classname> のインスタンスを使ってスタックを管理しています。
                別のレジストリインスタンスでこれを置き換えたり、
                インスタンスを取得したりする際にこれらのアクセサを使用します。
        </para></listitem>

        <listitem><para>
                <code>getRegistryKey()</code> および <code>setRegistryKey()</code>。
                これらは、スタックに格納する際にレジストリのどのキーを使用するかを指定します。
                デフォルト値は 'Zend_Controller_Plugin_ActionStack' です。
        </para></listitem>

        <listitem><para>
                <code>getStack()</code> は、
                そのアクションのスタック全体を取得します。
        </para></listitem>

        <listitem><para>
                <code>pushStack()</code> および <code>popStack()</code>
                は、それぞれスタックへの追加とスタックからの取り出しを行います。
                <code>pushStack()</code> にはリクエストオブジェクトを渡します。
        </para></listitem>
    </itemizedlist>

    <para>
        さらに <code>forward()</code> メソッドが存在します。
        このメソッドにはリクエストオブジェクトを渡し、
        フロントコントローラにおける現在のリクエストオブジェクトの状態を
        ここで渡したオブジェクトの状態に設定します。
        そして、リクエストを未ディスパッチ状態に戻します
        (ディスパッチループの次の処理に強制的に進ませます)。
    </para>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->
