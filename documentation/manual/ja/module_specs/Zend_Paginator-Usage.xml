<!-- EN-Revision: 11123 -->
<sect1 id="zend.paginator.usage">
    <title>使用法</title>

    <sect2 id="zend.paginator.usage.paginating">
        <title>データコレクションのページ処理</title>

        <para>
            ページ処理を行うには、<code>Zend_Paginator</code>
            がデータにアクセスするための汎用的な方法が必要です。
            そのため、データへのアクセスはすべてデータソースアダプタを用いて行います。
            Zend Framework には、いくつかのアダプタが標準で同梱されています。
        </para>
            
        <table id="zend.paginator.usage.paginating.adapters">
            <title><code>Zend_Paginator</code> 用のアダプタ</title>

            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>アダプタ</entry>
                        <entry>説明</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Array</entry>
                        <entry>PHP の配列を使用します。</entry>
                    </row>
                    <row>
                        <entry>DbSelect</entry>
                        <entry>
                            <link linkend="zend.db.select"><code>Zend_Db_Select</code></link> 
                            のインスタンスを使用します。
                        </entry>
                    </row>
                    <row>
                        <entry>Iterator</entry>
                        <entry>
                            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIterator.html"><code>Iterator</code></ulink> 
                            のインスタンスを使用します。
                        </entry>
                    </row>
                    <row>
                        <entry>Null</entry>
                        <entry>
                            データのページ処理を管理する際に <code>Zend_Paginator</code>
                            を使用しません。その場合でもページ処理コントロールの機能を使うことはできます。
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            <code>Zend_Paginator</code> のインスタンスを作成するには、
            コンストラクタでアダプタを指定しなければなりません。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
$paginator = new Zend_Paginator(new Zend_Paginator_Adapter_Array($array));
]]>
            </programlisting>
        </para>

        <para>
            利便性を確保するために、Zend Framework に同梱されているアダプタ用の静的メソッド
            <code>factory()</code> も用意されています。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
$paginator = Zend_Paginator::factory($array);
]]>
            </programlisting>
        </para>

        <note>
            <para>Null アダプタの場合は、
            データコレクションのかわりに要素数をコンストラクタで指定します。</para>
        </note>
        
        <para>
            この状態でも技術的には既に使用可能ですが、
            データを読み進めていくためにはさらにページ番号を教えてやる必要があります。
        </para>

        <para>
            <programlisting role="php"><![CDATA[
$paginator->setCurrentPageNumber($pageNumber);
]]>
            </programlisting>
        </para>
        
        <para>
            ページ番号は URL で指定するのがもっともシンプルな方法でしょう。
            <code>Zend_Controller_Router_Interface</code>
            互換のルータを使うことを推奨しますが、
            それが必須というわけではありません。
        </para>
        
        <para>
            INI ファイルで定義するルートの例を次に示します。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
routes.example.route = articles/:articleName/:pageNumber
routes.example.defaults.controller = articles
routes.example.defaults.action = view
routes.example.defaults.pageNumber = 1
routes.example.reqs.articleName = \w+
routes.example.reqs.pageNumber = \d+
]]>
            </programlisting>
        </para>
        
        <para>
            この設定を使った (そして Zend Framework の MVC コンポーネントを使った)
            場合、現在のページ番号を設定するコードはこのようになります。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
$paginator->setCurrentPageNumber($this->_getParam('pageNumber'));
]]>
            </programlisting>
        </para>
        
        <para>
            それ以外にもオプションがあります。詳細は
            <link linkend="zend.paginator.configuration">設定</link> 
            を参照ください。
        </para>
        
        <para>
            最後に、paginator のインスタンスをビューに割り当てます。
            <code>Zend_View</code> と ViewRenderer アクションヘルパーを使っている場合は、
            次のようになります。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
$this->view->paginator = $paginator;
]]>
            </programlisting>
        </para>
    </sect2>
    
    <sect2 id="zend.paginator.rendering">
        <title>ビュースクリプトによるページのレンダリング</title>
        
        <para>
            ビュースクリプトを使用してページ項目のレンダリング
            (<code>Zend_Paginator</code> を使うよう設定している場合)
            とページ処理コントロールの表示を行います。
        </para>
        
        <para>
            <code>Zend_Paginator</code> は SPL の
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html"><code>IteratorAggregate</code></ulink>
            インターフェイスを実装しているので、
            項目を順次処理したり表示したりするのは簡単です。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
<html>
<body>
<h1>Example</h1>
<?php if (count($this->paginator)): ?>
<ul>
<?php foreach ($this->paginator as $item): ?>
  <li><?= $item; ?></li>
<?php endforeach; ?>
</ul>
<?php endif; ?>

<?= $this->paginationControl($this->paginator, 'Sliding', 'my_pagination_control.phtml'); ?>
</body>
</html>
]]>
            </programlisting>
        </para>
        
        <para>
            最後のほうでビューヘルパーをコールしているところに注目しましょう。
            PaginationControl は paginator のインスタンスを受け取り、
            オプションでスクロール形式とビュー用の partial を受け取ります。
        </para>
        
        <para>
            オプションではありますが、この 2 つのパラメータは重要です。
            ビュー partial はページ処理コントロールの
            <emphasis>見た目</emphasis>を決めるために用いられ、
            一方スクロール形式はその <emphasis>振る舞い</emphasis>
            を決めるために用いられます。ビュー partial
            が、次のようなページ処理コントロール形式だっととしましょう。
        </para>
        
        <para>
            <inlinegraphic align="center" valign="middle"
                fileref="figures/zend.paginator.usage.rendering.control.png"
                format="PNG"/>
        </para>
        
        <para>
            ここで "next" リンクを数回クリックしたときに、いったい何が起こるでしょう?
            そう、いろんなことが起こりえます。
            クリックし続けても現在のページがずっと中央に表示される (Yahoo!
            形式) かもしれませんし、
            表示される範囲はそのままで現在のページの位置がどんどん右にずれていき、
            表示範囲の最後をページでさらに "next" をクリックしたときに一番左に戻るかもしれません。
            ページを進めるたびにページ数そのものが増加 ("scroll")
            していく (Google 形式) も考えられます。
        </para>
        
        <para>
            4 種類のスクロール形式が Zend Framework に組み込まれています。
        </para>
        
        <table id="zend.paginator.usage.rendering.scrolling-styles">
            <title><code>Zend_Paginator</code> のスクロール形式</title>

            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>スクロール形式</entry>
                        <entry>説明</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>All</entry>
                        <entry>
                            すべてのページを返します。
                            総ページ数が比較的少なめのときなど、
                            ドロップダウンメニュー形式でページ選択をさせる際に便利です。
                            そのような場合は、利用できるすべてのページを
                            一度にユーザに見せることになるでしょう。
                        </entry>
                    </row>
                    <row>
                        <entry>Elastic</entry>
                        <entry>
                            Google 風のスクロール形式で、
                            ユーザがページを移動するのにあわせて拡大・縮小します。
                        </entry>
                    </row>
                    <row>
                        <entry>Jumping</entry>
                        <entry>
                            ユーザがページを進めるにつれて、
                            ページ番号が表示範囲の最後に向けて進んでいきます。
                            表示範囲を超えると、新しい範囲の最初の位置に移動します。
                        </entry>
                    </row>
                    <row>
                        <entry>Sliding</entry>
                        <entry>
                            Yahoo! 風のスクロール形式で、
                            現在表示されているページが常にページ範囲の中央
                            (あるいは可能な限りそれに近い場所)
                            にあるようにします。これがデフォルトの形式です。
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        
        <para>
            デフォルトのビュー partial とスクロール形式、
            そしてビューのインスタンスを設定してしまえば、
            PaginationControl のコールを完全に除去することができます。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
Zend_Paginator::setDefaultScrollingStyle('Sliding');
Zend_View_Helper_PaginationControl::setDefaultViewPartial('my_pagination_control.phtml');
$paginator->setView($view);
]]>
            </programlisting>
        </para>
        
        <para>
            これらの値をすべて設定すると、
            ビュースクリプト内で単純な echo
            文を使用するだけでページ処理コントロールをレンダリングできるようになります。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[
<?= $this->paginator; ?>
]]>
            </programlisting>
        </para>
        
        <sect3 id="zend.paginator.usage.rendering.example-controls">
            <title>ページ処理コントロールの例</title>
            
            <para>
                次のページ処理コントロールの例が、
                とりあえず使い始めるにあたっての参考となることでしょう。
            </para>
            
            <para>
                検索のページ処理
                
                <programlisting role="php"><![CDATA[
<!-- 
See http://developer.yahoo.com/ypatterns/pattern.php?pattern=searchpagination
-->

<?php if ($this->pageCount): ?> 
<div id="paginationControl">
<!-- 前のページへのリンク --> 
<?php if (isset($this->previous)): ?> 
  <a href="<?= $this->url(array('page' => $this->previous)); ?>">&lt; Previous</a> | 
<?php else: ?> 
  <span class="disabled">&lt; Previous</span> | 
<?php endif; ?> 

<!-- ページ番号へのリンク -->
<?php foreach ($this->pagesInRange as $page): ?> 
  <?php if ($page != $this->current): ?>
    <a href="<?= $this->url(array('page' => $page)); ?>"><?= $page; ?></a> | 
  <?php else: ?>
    <?= $page; ?> | 
  <?php endif; ?>
<?php endforeach; ?>

<!-- 次のページへのリンク --> 
<?php if (isset($this->next)): ?> 
  <a href="<?= $this->url(array('page' => $this->next)); ?>">Next &gt;</a>
<?php else: ?> 
  <span class="disabled">Next &gt;</span>
<?php endif; ?> 
</div> 
<?php endif; ?>
]]>
                </programlisting>
            </para>
            
            <para>
                項目のページ処理

                <programlisting role="php"><![CDATA[
<!-- 
See http://developer.yahoo.com/ypatterns/pattern.php?pattern=itempagination
-->

<?php if ($this->pageCount): ?> 
<div id="paginationControl">
<?= $this->firstItemNumber; ?> - <?= $this->lastItemNumber; ?> 
of <?= $this->totalItemCount; ?>

<!-- 最初のページへのリンク -->
<?php if (isset($this->previous)): ?>
  <a href="<?= $this->url(array('page' => $this->first)); ?>">First</a> | 
<?php else: ?>
  <span class="disabled">First</span> |
<?php endif; ?> 

<!-- 前のページへのリンク --> 
<?php if (isset($this->previous)): ?> 
  <a href="<?= $this->url(array('page' => $this->previous)); ?>">&lt; Previous</a> | 
<?php else: ?> 
  <span class="disabled">&lt; Previous</span> | 
<?php endif; ?> 

<!-- 次のページへのリンク --> 
<?php if (isset($this->next)): ?> 
  <a href="<?= $this->url(array('page' => $this->next)); ?>">Next &gt;</a> |
<?php else: ?> 
  <span class="disabled">Next &gt;</span> |
<?php endif; ?>

<!-- 最後のページへのリンク -->
<?php if (isset($this->next)): ?>
  <a href="<?= $this->url(array('page' => $this->last)); ?>">Last</a>
<?php else: ?>
  <span class="disabled">Last</span>
<?php endif; ?> 

</div> 
<?php endif; ?>
]]>
                </programlisting>
            </para>

            <para>
                ドロップダウンのページ処理

                <programlisting role="php"><![CDATA[
<?php if ($this->pageCount): ?> 
<select id="paginationControl" size="1"> 
<?php foreach ($this->pagesInRange as $page): ?>
  <?php $selected = ($page == $this->current) ? ' selected="selected"' : ''; ?>
  <option value="<?= $this->url(array('page' => $page)); ?>"<?= $selected ?>><?= $page; ?></option> 
<?php endforeach; ?>
</select>
<?php endif; ?>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js"></script>
<script type="text/javascript">
$('paginationControl').observe('change', function() {
    window.location = this.options[this.selectedIndex].value;
})
</script>
]]>
                </programlisting>
            </para>
        </sect3>
        
        <sect3 id="zend.paginator.usage.rendering.properties">
            <title>プロパティの一覧</title>
            
            <para>
                次のオプションが、ページ処理コントロールのビュー
                partial で使用可能です。
            </para>
            
            <table id="zend.paginator.usage.rendering.properties.table">
                <title>ビュー partial のプロパティ</title>

                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>プロパティ</entry>
                            <entry>型</entry>
                            <entry>説明</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>first</entry>
                            <entry>integer</entry>
                            <entry>最初のページ番号 (つまり 1)</entry>
                        </row>
                        <row>
                            <entry>firstItemNumber</entry>
                            <entry>integer</entry>
                            <entry>
                                このページの最初の項目の番号
                            </entry>
                        </row>
                        <row>
                            <entry>firstPageInRange</entry>
                            <entry>integer</entry>
                            <entry>
                                スクロール形式で返された範囲内の最初のページ
                            </entry>
                        </row>
                        <row>
                            <entry>current</entry>
                            <entry>integer</entry>
                            <entry>現在のページ番号</entry>
                        </row>
                        <row>
                            <entry>currentItemCount</entry>
                            <entry>integer</entry>
                            <entry>このページの項目の数</entry>
                        </row>
                        <row>
                            <entry>last</entry>
                            <entry>integer</entry>
                            <entry>最後のページ番号</entry>
                        </row>
                        <row>
                            <entry>lastItemNumber</entry>
                            <entry>integer</entry>
                            <entry>
                                このページの最後の項目の番号
                            </entry>
                        </row>
                        <row>
                            <entry>lastPageInRange</entry>
                            <entry>integer</entry>
                            <entry>
                                スクロール形式で返された範囲内の最後のページ
                            </entry>
                        </row>
                        <row>
                            <entry>next</entry>
                            <entry>integer</entry>
                            <entry>次のページ番号</entry>
                        </row>
                        <row>
                            <entry>pageCount</entry>
                            <entry>integer</entry>
                            <entry>ページ数</entry>
                        </row>
                        <row>
                            <entry>pagesInRange</entry>
                            <entry>array</entry>
                            <entry>
                                スクロール形式で返されたページの配列
                            </entry>
                        </row>
                        <row>
                            <entry>previous</entry>
                            <entry>integer</entry>
                            <entry>前のページ番号</entry>
                        </row>
                        <row>
                            <entry>totalItemCount</entry>
                            <entry>integer</entry>
                            <entry>項目の総数</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect3>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
