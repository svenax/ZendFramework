<sect3 id="zend.controller.router.routes.standard">
    <title>Zend_Controller_Router_Route</title>

    <para>
        <code>Zend_Controller_Router_Route</code> はフレームワークの標準のルートです。
        簡単に利用でき、柔軟なルート定義が可能です。各ルートには、まず
        (静的および動的な) URL のマッピングが含まれ、
        そしてデフォルト値および変数についての制限を指定して初期化します。
    </para>

    <para>
        とある架空のアプリケーションで、コンテンツの作者情報のページが必要になったとしましょう。
        ブラウザで <code>http://domain.com/author/martel</code>
        にアクセスした際に、"martel" とかいう人についての情報を見たいわけです。
        この機能を実現するためのルートは、次のようになります。
    </para>

    <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'author/:username',
    array(
        'controller' => 'profile',
        'action'     => 'userinfo'
    )
);

$router->addRoute('user', $route);]]>
    </programlisting>

    <para>
        <code>Zend_Controller_Router_Route</code>
        のコンストラクタの最初のパラメータは、ルートの定義です。
        これを URL にマッチさせます。ルート定義は静的な部分と動的な部分で構成され、
        それをスラッシュ ('/') で連結します。
        静的な部分は単なるテキスト (例. <code>author</code>) です。
        動的な部分を変数と呼び、変数名の前にコロンをつけて
        (例. <code>:username</code>) 表します。
    </para>

    <note>
        <title>文字の使用法</title>
        <para>
            現在の実装では、(スラッシュ以外の)
            任意の文字を変数名として使用できます。しかし、
            PHP の変数名として使用できる文字だけを用いることを強く推奨します。
            このようにしておくことで、
            将来実装が変更されたときにバグを引き起こす可能性を抑えられます。
        </para>
    </note>

    <para>
        この例のルートは、ブラウザで
        <code>'http://domain.com/author/martel'</code> を指した際にマッチします。
        この場合、すべての変数の値が <code>Zend_Controller_Request</code>
        オブジェクトに注入され、ProfileController からアクセスできるようになります。
        この例が返す変数は、以下のようなキーと値のペアを持つ配列となります。
    </para>

    <programlisting role="php"><![CDATA[<?php
$values = array(
    'username'   => 'martel',
    'controller' => 'profile',
    'action'     => 'userinfo'
);]]>
    </programlisting>

    <para>
        その後、<code>Zend_Controller_Dispatcher</code> は
        (デフォルトモジュールの) <code>ProfileController</code> クラスにある
        <code>userinfoAction()</code> メソッドを実行します。変数にアクセスするには、
        <code>Zend_Controller_Action::_getParam()</code> あるいは
        <code>Zend_Controller_Request::getParam()</code> メソッドを使用します。
    </para>

    <programlisting role="php"><![CDATA[<?php
public function userinfoAction()
{
    $request = $this->getRequest();
    $username = $request->getParam('username');

    $username = $this->_getParam('username');
}]]>
    </programlisting>

    <para>
        ルート定義には、特殊文字 (ワイルドカード)
        を含めることができます。これは '*' 記号で表します。
        これを使用して、Module ルートと同様にパラメータを扱う
        (変数名 => 値 のペアを URI で定義する) ことができます。
        次のルートは、Module ルートの挙動をまねたものです。
    </para>

    <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    ':module/:controller/:action/*',
    array('module' => 'default')
);
$router->addRoute('default', $route);]]>
    </programlisting>

    <sect4 id="zend.controller.router.routes.standard.variable-defaults">
        <title>変数のデフォルト</title>

        <para>
            ルートで使用するすべての変数についてデフォルト値を指定することができます。
            これは、 <code>Zend_Controller_Router_Route</code>
            のコンストラクタの 2 番目のパラメータで指定します。
            このパラメータは、変数名をキーとする配列で、
            対応する値にそのデフォルト値を指定します。
        </para>

        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array('year' => 2006)
);
$router->addRoute('archive', $route);]]>
        </programlisting>

        <para>
            上のルートは <code>'http://domain.com/archive/2005'</code> および
            <code>'http://example.com/archive'</code>
            のような URL にマッチします。後者の場合、変数 year にはデフォルト値である
            2006 が設定されます。
        </para>

        <para>
            この例は、year 変数をリクエストオブジェクトに注入することになります。
            そしてルーティング情報が存在しない
            (コントローラやアクションのパラメータが定義されていない) ので、
            アプリケーションはデフォルトのコントローラのデフォルトアクションメソッド
            (ともに <code>Zend_Controller_Dispatcher_Abstract</code> で定義されています)
            にディスパッチします。より使いやすくするには、
            ルートのデフォルトとしてコントローラとアクションを定義しておく必要があります。
        </para>

        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    )
);
$router->addRoute('archive', $route);]]>
        </programlisting>

        <para>
            このルートは、<code>ArchiveController</code> の
            <code>showAction()</code> を実行します。
        </para>

    </sect4>

    <sect4 id="zend.controller.router.routes.standard.variable-requirements">
        <title>変数の制約</title>

        <para>
            <code>Zend_Controller_Router_Route</code> のコンストラクタの
            三番目のパラメータで、変数の制約を指定することができます。
            これは、正規表現で指定します。
        </para>

        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    ),
    array('year' => '\d+')
);
$router->addRoute('archive', $route);]]>
        </programlisting>

        <para>
            上の例のルートでは、year 変数の値が数値データである場合にのみ
            Rewrite ルータにマッチします。つまり
            <code>http://domain.com/archive/2345</code> はマッチしますが
            <code>http://example.com/archive/test</code> はマッチしません。
            この場合はチェイン内の次のルートに処理を移します。
        </para>
    </sect4>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->
