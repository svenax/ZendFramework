<sect1 id="zend.search.lucene.advanced">
    <title>応用</title>

    <sect2 id="zend.search.lucene.advanced.static">
        <title>静的プロパティとしてのインデックスの使用</title>

        <para>
            <code>Zend_Search_Lucene</code> オブジェクトは、
            デストラクタメソッド内で変更のコミットやリソースの後始末を行います。
        </para>

        <para>
            パラメータ <code>MaxBufferedDocs</code>
            の内容に応じて、メモリ内に追加されたドキュメントを保存したり
            新しいインデックスセグメントをディスクに書き出したりします。
        </para>

        <para>
            もし <code>MaxBufferedDocs</code> の制限に達していない場合は "保存されていない"
            ドキュメントが残ってしまい、
            これがオブジェクトのデストラクタで新しいセグメントとして保存されます。
            インデックスの自動最適化は、
            <code>MaxBufferedDocs</code>、<code>MaxMergeDocs</code> および
            <code>MergeFactor</code> の設定内容により、必要に応じて行われます。
        </para>

        <para>
            静的オブジェクトプロパティ (以下を参照ください) は、
            "スクリプトが最後まで実行された" <emphasis>後で</emphasis> 破棄されます。

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }
}

Searcher::initIndex();]]>
            </programlisting>
        </para>


        <para>
            にもかかわらず、静的プロパティのオブジェクトのデストラクタは正常に起動し、
            やるべきことをすべて行う可能性があります。
        </para>

        <para>
            問題が起こる可能性があるとすれば、例外処理です。
            静的オブジェクトのデストラクタでスローされた例外は、コンテキストを保持していません。
            というのも、"スクリプトが最後まで実行された後" に実行されるものだからです。
        </para>

        <para>
            おそらく、そのような場合は例外ではなく
            "Fatal error: Exception thrown without a stack frame in Unknown on line 0"
            のようなエラーメッセージが表示されるでしょう。
        </para>

        <para>
            Zend_Search_Lucene は、この問題を <code>commit()</code>
            メソッドで処理できるようにしています。これは、未保存の変更内容をすべて保存し、
            新しいセグメントを保存するために使用しているメモリを解放します。
            コミット操作は、スクリプトの実行中にいつでも何度でも行うことができます。
            <code>Zend_Search_Lucene</code> オブジェクトを使用して、
            コミット操作の後にもドキュメントの検索や追加、削除ができます。
            しかし <code>commit()</code> をコールすることで、
            もしそれ以降ドキュメントの追加や削除が行われていないのなら
            <code>Zend_Search_Lucene</code> のデストラクタは何もせず、
            例外もスローしないことが保証されます。

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }

    ...

    public static function commit() {
        self::$_index->commit();
    }
}

Searcher::initIndex();

...

// スクリプトの終了処理
...
Searcher::commit();
...]]>
            </programlisting>
        </para>
    </sect2>

</sect1>
