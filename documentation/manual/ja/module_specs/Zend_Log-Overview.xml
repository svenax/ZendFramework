<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 24604 -->
<sect1 id="zend.log.overview">
    <title>概要</title>

    <para>
      <classname>Zend_Log</classname> は、ログ出力用の汎用コンポーネントです。
      複数のバックエンドに対応しており、ログに出力するメッセージをフォーマットしたり
      記録するメッセージをフィルタリングしたりできます。
      これらの関数は、以下のオブジェクトに分けられています。

      <itemizedlist>
        <listitem>
          <para>
            ログ (<classname>Zend_Log</classname> のインスタンス) は、
            アプリケーション内でもっともよく使用するオブジェクトです。
            いくつでも望みの数だけのログオブジェクトを保持できます。
            それらが互いに影響しあうことはありません。
            ログオブジェクトには最低ひとつのライターが含まれる必要があり、
            オプションでひとつあるいは複数のフィルタを含むことができます。
          </para>
        </listitem><listitem>
          <para>
            ライター (<classname>Zend_Log_Writer_Abstract</classname> を継承したもの)
            は、データを保存する役割を受け持ちます。
          </para>
        </listitem><listitem>
          <para>
            フィルタ (<classname>Zend_Log_Filter_Interface</classname> を実装したもの)
            は、保存するログデータをブロックします。
            フィルタは個々のライターに適用することもできますし、
            ログに適用することもできます。ログに適用した場合は、
            すべてのライターの前に適用されます。どちらの場合についても、
            複数のフィルタを連結することが可能です。
          </para>
        </listitem><listitem>
          <para>
            フォーマッタ (<classname>Zend_Log_Formatter_Interface</classname> を実装したもの)
            は、ログのデータをライターに書き出す前に書式設定できます。
            個々のライターは、それぞれひとつのフォーマッタを保持しています。
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <sect2 id="zend.log.overview.creating-a-logger">
      <title>ログの作成</title>
      <para>
        ログの記録を開始するには、ライターのインスタンスを作成し、
        それをログのインスタンスに渡します。
      </para>

      <programlisting language="php"><![CDATA[
$logger = new Zend_Log();
$writer = new Zend_Log_Writer_Stream('php://output');

$logger->addWriter($writer);
]]></programlisting>

      <para>
        注意すべき点は、ログには最低ひとつのライターが必要であるということです。
        ライターはお好みの数だけ追加できます。追加するには
        ログの <methodname>addWriter()</methodname> メソッドを使用します。
      </para>

      <para>
        一方、ログのコンストラクタで直接ライターを指定することも可能です。
      </para>

        <programlisting language="php"><![CDATA[
$writer = new Zend_Log_Writer_Stream('php://output');
$logger = new Zend_Log($writer);
]]></programlisting>

      <para>
        これで、ログが使用できるようになりました。
      </para>
    </sect2>

    <sect2 id="zend.log.overview.logging-messages">
      <title>メッセージの記録</title>

      <para>
        メッセージをログに記録するには、ログのインスタンスの <methodname>log()</methodname>
        メソッドを実行し、メッセージと優先度を渡します。
      </para>

      <programlisting language="php"><![CDATA[
$logger->log('Informational message', Zend_Log::INFO);
]]></programlisting>

      <para>
      <methodname>log()</methodname> メソッドの最初のパラメータは文字列の <property>message</property> で、
      二番目のパラメータは整数の <property>priority</property> です。
      優先度は、ログのインスタンスが理解できる形式の値のいずれかでなければなりません。
      これについては次の節で説明します。
      </para>

      <para>
      こちらも別の方法が使用できます。<methodname>log()</methodname> メソッドをコールするかわりに、
      優先度と同じ名前のメソッドをコールできます。
      </para>

      <programlisting language="php"><![CDATA[
$logger->log('Informational message', Zend_Log::INFO);
$logger->info('Informational message');

$logger->log('Emergency message', Zend_Log::EMERG);
$logger->emerg('Emergency message');
]]></programlisting>
  </sect2>

  <sect2 id="zend.log.overview.destroying-a-logger">
    <title>ログの破棄</title>
    <para>
      ログオブジェクトが不要になったら、ログオブジェクトを指す変数に
      <constant>NULL</constant> を代入してそれを破棄しましょう。これは、
      アタッチされている各ライターのインスタンスメソッド
      <methodname>shutdown()</methodname> をコールしてからログオブジェクトを破棄します。
    </para>

    <programlisting language="php"><![CDATA[
$logger = null;
]]></programlisting>

    <para>
      このように明示的にログを破棄することは必須ではありません。
      <acronym>PHP</acronym> の終了時に、この処理が自動的に行われます。
    </para>
  </sect2>

  <sect2 id="zend.log.overview.builtin-priorities">
    <title>組み込みの優先度の使用</title>
    <para>
      <classname>Zend_Log</classname> クラスでは以下の優先度を定義しています。
    </para>

    <programlisting language="php"><![CDATA[
EMERG   = 0;  // 緊急事態 (Emergency): システムが使用不可能です
ALERT   = 1;  // 警報 (Alert): 至急対応が必要です
CRIT    = 2;  // 危機 (Critical): 危機的な状況です
ERR     = 3;  // エラー (Error): エラーが発生しました
WARN    = 4;  // 警告 (Warning): 警告が発生しました
NOTICE  = 5;  // 注意 (Notice): 通常動作ですが、注意すべき状況です
INFO    = 6;  // 情報 (Informational): 情報メッセージ
DEBUG   = 7;  // デバッグ (Debug): デバッグメッセージ
]]></programlisting>

    <para>
      これらの優先度は常に使用可能で、それぞれについて
      同じ名前のメソッドが用意されています。
    </para>

    <para>
      これらの優先度は適当に指定しているわけではありません。
      もとは BSD の syslog プロトコルに由来するもので、
      <ulink url="http://tools.ietf.org/html/rfc3164">RFC-3164</ulink>
      で示されています。それぞれの名前と優先度番号は、<acronym>PHP</acronym> におけるもうひとつのログ記録システムである
      <ulink url="http://pear.php.net/package/log">PEAR Log</ulink>
      とも互換性があります。おそらく、これと <classname>Zend_Log</classname>
      は相互運用できるでしょう。
    </para>

    <para>
      優先度の数値が小さいほど優先度が高くなります。<code>EMERG</code> (0)
      が最重要な優先度で、<constant>DEBUG</constant> (7) は
      組み込みの優先度の中ではもっとも優先度が低いものです。
      <constant>DEBUG</constant> より低い優先度を定義することもできます。
      メッセージをログに記録する際には、この優先度の階層に注意し、適切なものを選択するようにしましょう。
    </para>
  </sect2>

  <sect2 id="zend.log.overview.user-defined-priorities">
    <title>ユーザ定義の優先度の追加</title>

    <para>
      ユーザ定義の優先度を実行時に追加するには、ログの
      <methodname>addPriority()</methodname> メソッドを使用します。
    </para>

      <programlisting language="php"><![CDATA[
$logger->addPriority('FOO', 8);
]]></programlisting>

    <para>
      上の例では、新しい優先度 <constant>FOO</constant> を
      '8' という値で定義しています。これで、次のようにして新しい優先度でログ出力できるようになります。
    </para>

      <programlisting language="php"><![CDATA[
$logger->log('Foo message', 8);
$logger->foo('Foo Message');
]]></programlisting>

    <para>
      新しい優先度は、既存のものを上書きすることはできません。
    </para>
  </sect2>

  <sect2 id="zend.log.overview.understanding-fields">
    <title>ログのイベントについて理解する</title>

    <para>
      <methodname>log()</methodname> メソッドやその仲間をコールした際に、
      ログのイベントが作成されます。これは単純な連想配列で、
      ライターに渡されるイベントの内容を表します。この配列には、
      <property>timestamp</property>、<property>message</property>、<property>priority</property> および
      <property>priorityName</property> のキーが常に存在します。
    </para>

    <para>
      <property>event</property> 配列の作成は完全に透過的です。
      しかし、<property>event</property> 配列について知っておかないと、
      上で示した既存のセットに含まれない項目を追加できません。
    </para>

    <para>
      将来のイベントにたいして常に特定の項目を追加するようにするには、
      <methodname>setEventItem()</methodname> メソッドをコールしてキーと値を指定します。
    </para>

    <programlisting language="php"><![CDATA[
$logger->setEventItem('pid', getmypid());
]]></programlisting>

    <para>
      上の例は、<property>pid</property> という名前の新しい項目を作成して現在のプロセスの
      PID を格納します。新しい値が設定されると、他のすべてのイベントデータと同様に
      すべてのライターから自動的にアクセス可能となります。項目を上書きするには、
      もう一度好きなときに <methodname>setEventItem()</methodname> メソッドをコールします。
    </para>

    <para>
      新しいイベント項目を <methodname>setEventItem()</methodname> で設定すると、
      ロガーのすべてのライターに新しい項目を送信します。しかし、
      これはそれらのライターが実際にその項目を書き出すことを保証するものではありません。
      フォーマッタオブジェクトがその新しい項目のことを教えない限り、
      ライターはそれをどう扱っていいのかわからないからです。
      さらに詳しく学ぶには、フォーマッタの節を参照ください。
    </para>
  </sect2>

    <sect2 id="zend.log.overview.as-errorHandler">
        <title>PHP のエラーを記録</title>

        <para>
            <classname>Zend_Log</classname> は、<acronym>PHP</acronym> のエラーを記録するためにも使えます。
            <methodname>registerErrorHandler()</methodname> を呼び出すと、現行のエラーハンドラの前に
            <classname>Zend_Log</classname> を追加して、同様に一緒にエラーを渡します。
        </para>

        <para>
            PHP エラー由来の Zend_Log イベントには、
            <ulink url="http://php.net/manual/ja/function.set-error-handler.php">set_error_handler</ulink> 由来の
            <methodname>handler  ( int $errno  , string $errstr  [, string $errfile  [, int $errline  [, array $errcontext  ]]] )</methodname>
            に一致する追加の項目があります
        </para>

        <table id="zend.log.overview.as-errorHandler.properties.table-1">
            <title>PHP エラー由来の Zend_Log イベント用の追加項目</title>

            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>名前</entry>
                        <entry>エラーハンドラ・パラメータ</entry>
                        <entry>説明</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>message</entry>
                        <entry>errstr</entry>
                        <entry>エラーメッセージ(文字列)</entry>
                    </row>

                    <row>
                        <entry>errno</entry>
                        <entry>errno</entry>
                        <entry>エラーの発生レベル(整数)</entry>
                    </row>

                    <row>
                        <entry>file</entry>
                        <entry>errfile</entry>
                        <entry>エラーが発生したファイル名(文字列)</entry>
                    </row>

                    <row>
                        <entry>line</entry>
                        <entry>errline</entry>
                        <entry>エラーが発生した行番号(整数)</entry>
                    </row>

                    <row>
                        <entry>context</entry>
                        <entry>errcontext</entry>
                        <entry>
                            (任意) エラーが発生した場所のアクティブシンボルテーブルを指す配列。
                            つまり、エラーが発生したスコープ内に存在するすべての変数の配列です。
                            ユーザエラーハンドラは、決してエラーコンテキストを書き換えてはいけません。
                        </entry>
                    </row>

                </tbody>
            </tgroup>
        </table>
    </sect2>
</sect1>
