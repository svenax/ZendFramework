<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 17175 -->
<sect1 id="zend.locale.migration">

    <title>以前のバージョンからの移行</title>

    <para>
        <classname>Zend_Locale</classname> の <acronym>API</acronym> は日々変わっています。
        <classname>Zend_Locale</classname> やそのサブコンポーネントを
        初期のバージョンから使っている方は、以下のガイドラインに従ってスクリプトを変更し、
        新しい <acronym>API</acronym> にあわせましょう。
    </para>

    <sect2 id="zend.locale.migration.fromoneeighttoonenine">
        <title>1.8 から 1.9 以降への移行</title>
        <sect3 id="zend.locale.migration.fromoneeighttoonenine.depreciated">
            <title>非推奨となるメソッド</title>

            <para>
                特別に用意されていたメソッドのいくつかが非推奨となります。
                既存の挙動と重複しているからです。
                古いメソッドも動作するにはしますが、
                新しいメソッドについて説明する user notice が発生することに注意しましょう。
                これらのメソッドは 2.0 で削除されます。
                次の一覧で、新旧のメソッドコールを参照ください。
            </para>

            <table id="zend.locale.migration.fromoneeighttoonenine.depreciated.table-1">

                <title>新旧のメソッドコールの一覧</title>

                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>古い方法</entry>
                            <entry>新しい方法</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>getLanguageTranslationList($locale)</entry>
                            <entry>getTranslationList('language', $locale)</entry>
                        </row>
                        <row>
                            <entry>getScriptTranslationList($locale)</entry>
                            <entry>getTranslationList('script', $locale)</entry>
                        </row>
                        <row>
                            <entry>getCountryTranslationList($locale)</entry>
                            <entry>getTranslationList('territory', $locale, 2)</entry>
                        </row>
                        <row>
                            <entry>getTerritoryTranslationList($locale)</entry>
                            <entry>getTranslationList('territory', $locale, 1)</entry>
                        </row>
                        <row>
                            <entry>getLanguageTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'language', $locale)</entry>
                        </row>
                        <row>
                            <entry>getScriptTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'script', $locale)</entry>
                        </row>
                        <row>
                            <entry>getCountryTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'country', $locale)</entry>
                        </row>
                        <row>
                            <entry>getTerritoryTranslation($value, $locale)</entry>
                            <entry>getTranslation($value, 'territory', $locale)</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect3>
    </sect2>

    <sect2 id="zend.locale.migration.fromoneseventooneeight">
        <title>1.7 から 1.8 以降への移行</title>
        <sect3 id="zend.locale.migration.fromoneseventooneeight.defaultcaching">
            <title>デフォルトのキャッシュ処理</title>

            <para>
                Zend Framework 1.8 以降、デフォルトのキャッシュ処理が追加されました。
                このように変更された理由は、大半のユーザが、
                パフォーマンスに問題を抱えていたにもかかわらずキャッシュを有効にしていなかったからです。
                キャッシュを使用しない場合に I18n コアがボトルネックになることから、
                <classname>Zend_Locale</classname> にキャッシュが設定されていない場合に
                デフォルトのキャッシュ機能を追加することにしたのです。
            </para>

            <para>
                パフォーマンスを落とすことがわかっていたとしても、
                あえてキャッシュを無効にしたい場合もあるでしょう。
                そのような場合にキャッシュを無効にするには
                <methodname>disableCache()</methodname> メソッドを使用します。
            </para>

            <example id="zend.locale.migration.fromoneseventooneeight.example">
                <title>デフォルトのキャッシュ処理の無効化</title>

                <programlisting language="php"><![CDATA[
Zend_Locale::disableCache(true);
]]></programlisting>
            </example>
        </sect3>
    </sect2>

    <sect2 id="zend.locale.migration.fromonesixtooneseven">
        <title>1.6 から 1.7 以降への移行</title>
        <sect3 id="zend.locale.migration.fromonesixtooneseven.islocale">
            <title>isLocale() を使う際の変更点</title>

            <para>
                コーディング規約に従うと、 isLocale() は boolean
                値を返さなければなりませんでした。
                以前のバージョンでは、成功したばあいに文字列を返していました。
                リリース 1.7 では、互換性モードが追加されて文字列を返す古い挙動も使えます。
                しかし、このばあいは新しい挙動に変更するようにというユーザ警告が発生します。
                古い挙動の isLocale() が行っていた再ルーティングはもはや不要で、
                すべての I18N は自分自身で再ルーティングを行います。
            </para>

            <para>
                あなたのスクリプトを新しい <acronym>API</acronym> 用に変更するには、次のようにメソッドを使用します。
            </para>

            <example id="zend.locale.migration.fromonesixtooneseven.example">
                <title>isLocale() を 1.6 用から 1.7 用に変更する方法</title>

                <programlisting language="php"><![CDATA[
// 1.6 の例
if ($locale = Zend_Locale::isLocale($locale)) {
    // ここで何かします
}

// 1.7 の例

// 互換性モードを変更して警告の発生を防ぐ必要があります
// これは起動ファイルで行うことができます
Zend_Locale::$compatibilityMode = false;

if (Zend_Locale::isLocale($locale)) {
}
]]></programlisting>

                <para>
                    2 番目のパラメータを使えば、
                    そのロケールが正しくて再ルーティングが発生しなかったかどうかがわかることに注意しましょう。
                </para>

                <programlisting language="php"><![CDATA[
// 1.6 の例
if ($locale = Zend_Locale::isLocale($locale, false)) {
    // ここで何かします
}

// 1.7 の例

// 互換性モードを変更して警告の発生を防ぐ必要があります
// これは起動ファイルで行うことができます
Zend_Locale::$compatibilityMode = false;

if (Zend_Locale::isLocale($locale, false)) {
    if (Zend_Locale::isLocale($locale, true)) {
        // ロケールはありません
    }

    // もとの文字列はロケールを持ちませんが再ルーティングすることができます
}
]]></programlisting>

            </example>

        </sect3>

        <sect3 id="zend.locale.migration.fromonesixtooneseven.getdefault">
            <title>getDefault() を使用する際の変更</title>

            <para>
                getDefault() メソッドの意味が変わりました。
                フレームワークにロケールが統合され、それを setDefault()
                で設定できるようになったからです。
                このメソッドはもはやロケールチェインを返すことはなく、
                フレームワークのロケールに設定されたものだけを返します。
            </para>

            <para>
                あなたのスクリプトを新しい <acronym>API</acronym> 用に変更するには、次のようにメソッドを使用します。
            </para>

            <example id="zend.locale.migration.fromonesixtooneseven.getdefault.example">
                <title>getDefault() を 1.6 用から 1.7 用に変更する方法</title>

                <programlisting language="php"><![CDATA[
// 1.6 の例
$locales = $locale->getDefault(Zend_Locale::BROWSER);

// 1.7 の例

// 互換性モードを変更して警告の発生を防ぐ必要があります
// これは起動ファイルで行うことができます
Zend_Locale::$compatibilityMode = false;

$locale = Zend_Locale::getOrder(Zend_Locale::BROWSER);
]]></programlisting>

                <para>
                    古い実装における getDefault()
                    の 2 番目のパラメータはもはや使えないことに注意しましょう。
                    返り値がそれと同じ値となります。
                </para>
            </example>

            <note>
                <para>
                    デフォルトでは古い挙動も有効ですが、ユーザ警告が発生します。
                    新しい挙動にあわせてコードを変更し終えたら、
                    互換性モードを false に変更して警告が発生しないようにしなければなりません。
                </para>
            </note>

        </sect3>

    </sect2>
</sect1>
