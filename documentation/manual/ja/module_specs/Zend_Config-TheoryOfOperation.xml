<!-- EN-Revision: 11090 -->
<sect1 id="zend.config.theory_of_operation">
    <title>動作原理</title>
    <para>
        <code>Zend_Config</code> のコンストラクタを通じて、
        設定データに連想配列形式でアクセスできるようになります。
        多次元の連想配列となる可能性もあり、
        これによって汎用的なデータから何かに固有のデータまで扱えるようになります。
        具象アダプタクラスの機能は、
        どこかに保存されているデータを読み込んでこの連想配列形式を作成し、
        し、<code>Zend_Config</code> のコンストラクタに渡すことです。
        スクリプト内で直接配列を作成し、それを
        <code>Zend_Config</code> のコンストラクタに渡すことも可能です。
        この場合はアダプタクラスは使用しません。
        場合によってはこのような方式のほうが適切なこともあるでしょう。
    </para>
    <para>
        設定データ配列の値が、それぞれ <code>Zend_Config</code>
        オブジェクトのプロパティとなります。配列のキーがプロパティ名となります。
        配列の値自身がまた配列であった場合、対応するプロパティの値は新しい
        <code>Zend_Config</code> オブジェクトとなります。この中に配列の内容が読み込まれます。
        この処理は再帰的に行われるので、
        階層構造になっている設定データは任意のレベルでこの構造が繰り返されることになります。
    </para>
    <para>
        <code>Zend_Config</code> は内部で <code>Countable</code>
        インターフェイスおよび <code>Iterator</code>
        インターフェイスを実装しており、
        これを使用して設定データに容易にアクセスできるようになっています。
        つまり、<code>Zend_Config</code> オブジェクトに対して
        <ulink url="http://php.net/count"><code>count()</code></ulink>
        関数や <ulink url="http://php.net/foreach"><code>foreach</code></ulink>
        などを使用できるということです。
    </para>
    <para>
        デフォルトでは、<code>Zend_Config</code>
        で利用できる設定データは読み込み専用です。代入
        (<code>$config->database->host = 'example.com'</code> など)
        を行おうとすると例外がスローされます。しかし、
        コンストラクタでこの振る舞いを変更し、データの変更を許可することも可能です。
        また、変更を許可した場合には、<code>Zend_Config</code>
        は値の設定の解除もサポートしています
        (<code>unset($config->database->host);</code> とします)。
        <note>
            <para>
                メモリ上で変更したデータを何らかのメディアに保存しようとする際に、
                ちょっと戸惑うかもしれません。
                作成したり変更したりした設定データをメディアに保存する機能は、今のところ
                Zend Framework の対象範囲外です。
                設定データを作成・編集してメディアに保存するには、
                サードパーティからオープンソースのソリューションが提供されています。
            </para>
        </note>
    </para>
    <para>
        <code>Zend_Config</code> クラスを継承したアダプタクラスが、
        それぞれの内容に応じて機能を拡張します。
    </para>
    <para>
        <code>Zend_Config</code> ファミリーのクラスを使用すると、
        設定データをセクション単位でまとめることができます。
        <code>Zend_Config</code> オブジェクトの特定のセクションだけを読み込んだり、
        複数のセクションを指定して読み込んだり、あるいは
        (何も指定しなければ) 全セクションを読み込んだりといったことが可能です。
    </para>
    <para>
        <code>Zend_Config</code> は単一継承モデルをサポートしており、
        設定データの特定のセクションを別のセクションに継承させることができます。
        この機能が提供されている理由は、
        さまざまな目的のために設定データを二重管理する必要をなくすためです。
        継承したセクションでは、親セクションから継承した値を上書きすることができます。
        PHP のクラス継承と同様に、あるセクションが親セクションを継承し、
        そのセクションがまた上位セクションを継承し、といったことが可能です。
        しかし多重継承 (例えば、セクション C がセクション A およびセクション B
        のふたつを直接継承するなど) はサポートされていません。
    </para>
    <para>
        ふたつの <code>Zend_Config</code> オブジェクトがある場合に、
        <code>merge()</code> 関数でそれをひとつにまとめることができます。
        たとえば、<code>$config</code> と <code>$localConfig</code>
        がある場合に <code>$localConfig</code> のデータを <code>$config</code>
        に統合するには <code>$config->merge($localConfig);</code> とします。
        <code>$localConfig</code> の中に <code>$config</code>
        と同名の項目がある場合は、もとの値は上書きされます。
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
