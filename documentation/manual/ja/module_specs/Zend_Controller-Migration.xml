<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 15719 -->
<sect1 id="zend.controller.migration">
    <title>以前のバージョンからの移行</title>

    <para>
        MVC コンポーネントの API は以前とは変更されました。
        初期のバージョンから Zend Framework を使用しておられるかたは、
        以下のガイドラインにしたがってスクリプトを変更し、
        新しい仕組みに対応させてください。
    </para>

    <sect2 id="zend.controller.migration.fromoneseventooneeight">
        <title>1.7.x から 1.8.0 以降への移行</title>

        <sect3 id="zend.controller.migration.fromoneseventooneeight.router">
            <title>標準のルートの変更</title>

            <para>
                新しい標準ルートでは翻訳セグメントが使用できるようになったため、
                ルートのセグメントの先頭にある <code>@</code> は特殊文字と解釈されるようになりました。
                この文字を静的セグメント内で使用するには、前にもうひとつ
                <code>@</code> をつけてエスケープする必要があります。
                また、<code>:</code> も同様です。
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.migration.fromonesixtooneseven">
        <title>1.6.x から 1.7.0 以降への移行</title>

        <sect3 id="zend.controller.migration.fromonesixtooneseven.dispatcher">
            <title>ディスパッチャインターフェイスの変更</title>

            <para>
                ユーザからの指摘により、
                <classname>Zend_Controller_Action_Helper_ViewRenderer</classname>
                が使っているディスパッチャ抽象クラスのメソッドの中で
                ディスパッチャインターフェイスに存在しないものがあることに気づきました。
                次のメソッドを追加し、
                自作のディスパッチャが同梱の実装と共存できるようにしています。
            </para>

            <itemizedlist>
                <listitem><para>
                    <code>formatModuleName()</code>:
                リクエストオブジェクト内に格納されたりしている生のコントローラ名を受け取り、
                それを再フォーマットして
                <classname>Zend_Controller_Action</classname> を継承した適切なクラス名にします。
                </para></listitem>
            </itemizedlist>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.migration.fromoneohtoonesix">
        <title>1.5.x から 1.6.0 以降への移行</title>

        <sect3 id="zend.controller.migration.fromoneohtoonesix.dispatcher">
            <title>ディスパッチャインターフェイスの変更</title>

            <para>
                <classname>Zend_Controller_Front</classname> と
                <classname>Zend_Controller_Router_Route_Module</classname>
                は、ディスパッチャインターフェイスにないメソッドを使用していました。
                次の 3 つのメソッドを追加し、
                自作のディスパッチャが同梱の実装と共存できるようにしています。
            </para>

            <itemizedlist>
                <listitem><para>
                    <code>getDefaultModule()</code>:
                    デフォルトモジュールの名前を返します。
                </para></listitem>

                <listitem><para>
                    <code>getDefaultControllerName()</code>:
                    デフォルトコントローラの名前を返します。
                </para></listitem>

                <listitem><para>
                    <code>getDefaultAction()</code>:
                    デフォルトアクションの名前を返します。
                </para></listitem>
            </itemizedlist>
        </sect3>
    </sect2>

    <sect2 id="zend.controller.migration.fromoneohtoonefive">
        <title>1.0.x から 1.5.0 以降への移行</title>

        <para>
            基本的な機能は同じでドキュメント化されている機能も変わりませんが、
            ひとつだけ、<emphasis>ドキュメント化されていない</emphasis>
            "機能" が変更されました。
        </para>

        <para>
            URL の書き方としてドキュメント化されている方法は、
            camelCased 形式の名前のアクションを使用するために
            単語の区切り文字を使用するというものです。デフォルトの区切り文字は
            '.' あるいは '-' ですが、ディスパッチャの設定で変更することができます。
            ディスパッチャは内部でアクション名を小文字に変換し、
            単語の区切り文字をもとに camelCasing 形式のアクションメソッド名を作成します。
            しかし、PHP の関数名は大文字小文字を区別しないので、URL 自体を
            camelCasing 形式で書くこともできます。
            この場合でも、ディスパッチャは URL を同じアクションメソッドに解決します。
            たとえば 'camel-cased' はディスパッチャによって
            'camelCasedAction' になります。一方 'camelCased' は
            'camelcasedAction' となります。PHP では大文字小文字を細かく区別しないため、
            これらはどちらも同じメソッドを実行することになります。
        </para>

        <para>
            これは、ViewRenderer がビュースクリプトを解決する際に問題を引き起こします。
            ドキュメントに記載されている正式な方法は、
            単語の区切りをすべてダッシュに変換して単語は小文字にするというものです。
            こうすればアクションとビュースクリプトの関連が明確になり、
            小文字への正規化でスクリプトが見つかることが確実となります。
            しかし、アクション 'camelCased' がコールされて解決された場合は、
            単語の区切りはもう存在しません。そして ViewRenderer は
            'camel-cased.phtml' ではない別のファイル -- 'camelcased.phtml'
            を探してしまうのです。
        </para>

        <para>
            中にはこの "機能" を使用している開発者もいるようますが、
            これは決して意図した機能ではありません。
            1.5.0 のツリーでは、ViewRenderer はこの方式の解決を行わなくなりました。
            これでアクションとビュースクリプトの結びつきが確実になったわけです。
            まず、ディスパッチャはアクション名の大文字小文字をきちんと区別するようになります。
            つまり、camelCasing 形式を使用したアクションの解決先は、
            単語の区切りを使用した ('camel-casing') 場合とは違うものになるということです。
            これで、ViewRenderer がビュースクリプトを解決する際には
            区切り文字を使用したアクションのみを使用することになります。
        </para>

        <para>
            今までこの "機能" に頼っていた人たちは、
            以下のいずれかの方法で対応します。
        </para>

        <itemizedlist>
            <listitem><para>
                    一番いい方法: ビュースクリプトの名前を変更する。
                    利点: 前方互換性。欠点: もし対象となるビュースクリプトが多い場合は、
                    多くのファイルの名前を変更しなければならなくなります。
            </para></listitem>

            <listitem>
                <para>
                    その次にいい方法: ViewRenderer はビュースクリプトの解決を
                    <classname>Zend_Filter_Inflector</classname> に委譲しています。
                    インフレクタのルールを変更し、
                    アクションの単語間をダッシュで区切らないようにします。
                </para>

                <programlisting language="php"><![CDATA[
$viewRenderer =
    Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer');
$inflector = $viewRenderer->getInflector();
$inflector->setFilterRule(':action', array(
    new Zend_Filter_PregReplace(
        '#[^a-z0-9' . preg_quote(DIRECTORY_SEPARATOR, '#') . ']+#i',
        ''
    ),
    'StringToLower'
));
]]></programlisting>

                <para>
                    上のコードは、インフレクタを変更して単語をダッシュで区切らないようにしています。
                    もし実際のビュースクリプト名を camelCased にしたいのなら、さらに
                    'StringToLower' フィルタも削除することになるでしょう。
                </para>

                <para>
                    ビュースクリプトの名前を変えるのが面倒だったり
                    時間がかかったりする場合は、
                    もしあまり時間を割けないのならこの方法が最適です。
                </para>
            </listitem>

            <listitem>
                <para>
                    あまりお勧めしない方法: ディスパッチャに camelCased
                    形式のアクションをディスパッチさせるよう、フロントコントローラのフラグ
                    'useCaseSensitiveActions' を設定します。
                </para>

                <programlisting language="php"><![CDATA[
$front->setParam('useCaseSensitiveActions', true);
]]></programlisting>

                <para>
                    これで camelCasing 形式の URL を使えるようになり、
                    単語の区切り文字を使用した場合と同じアクションに解決されるようになります。
                    しかし、もともと抱えていた問題も残ったままとなってしまいます。
                    できれば先ほどのふたつのうちのいずれかを使用したほうがいいでしょう。
                </para>

                <para>
                    このフラグを使用していると、
                    将来このフラグが廃止予定になったときに notice が発生することになります。
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.migration.fromzeroninethree">
        <title>0.9.3 から 1.0.0RC1 以降への移行</title>

        <para>
            1.0.0RC1 での最大の変更点は、
            <link linkend="zend.controller.plugins.standard.errorhandler">ErrorHandler</link>
            プラグインと
            <link linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer</link>
            アクションヘルパーが追加され、デフォルトで有効となったことです。
            それぞれのドキュメントを熟読し、どのように動作するのかや
            既存のアプリケーションに与える影響について確認しておきましょう。
        </para>

        <para>
            <code>ErrorHandler</code> プラグインは
            <code>postDispatch()</code> で動作するもので、
            例外をチェックして指定したエラーハンドラコントローラに転送します。
            そのため、アプリケーション内にエラー処理用コントローラを含める必要があります。
            このプラグインを無効にするには、フロントコントローラのパラメータ
            <code>noErrorHandler</code> を設定します。
        </para>

        <programlisting language="php"><![CDATA[
$front->setParam('noErrorHandler', true);
]]></programlisting>

        <para>
            <code>ViewRenderer</code> アクションヘルパーは、
            アクションコントローラへのビューの注入を自動的に行います。
            また、現在のアクションにもとづいたビュースクリプトを自動的にレンダリングします。
            ビュースクリプトをレンダリングせず、かつ転送やリダイレクトも行わないアクションがあった場合、
            これは問題になるでしょう。というのも、
            <code>ViewRenderer</code> はそんなアクションであっても
            アクション名をもとに自動的にビュースクリプトをレンダリングしようとするからです。
        </para>

        <para>
            もし既存のコードにそのようなものがあった場合の対応方法はいくつか考えられます。
            一番手っ取り早いのは、フロントコントローラの起動時に
            <code>ViewRenderer</code> を無効にしてからディスパッチを行うことです。
        </para>

        <programlisting language="php"><![CDATA[
// $front は Zend_Controller_Front のインスタンスであるとします
$front->setParam('noViewRenderer', true);
]]></programlisting>

        <para>
            しかし、長い目で見ればこれはあまりよい作戦ではありません。
            今後も新しいコードを書き続けるならなおさらです。
        </para>

        <para>
            <code>ViewRenderer</code> の機能を把握したら、コントローラのコードを見てみましょう。
            まず、アクションメソッド (名前が 'Action' で終わっているメソッド)
            を探し、その中でどんな処理をしているかを確認しましょう。
            もし次に挙げるいずれの内容も行っていない場合は、コードに手を加える必要があります。
        </para>

        <itemizedlist>
            <listitem><para><code>$this-&gt;render()</code> のコール</para></listitem>
            <listitem><para><code>$this-&gt;_forward()</code> のコール</para></listitem>
            <listitem><para><code>$this-&gt;_redirect()</code> のコール</para></listitem>
            <listitem><para><code>Redirector</code> アクションヘルパーのコール</para></listitem>
        </itemizedlist>

        <para>
            一番簡単なのは、そのメソッド内で自動レンダリングを無効にすることです。
        </para>

        <programlisting language="php"><![CDATA[
$this->_helper->viewRenderer->setNoRender();
]]></programlisting>

        <para>
            レンダリング、転送あるいはリダイレクトを行っているアクションメソッドがひとつもない場合は、
            上で示したコードを <code>preDispatch()</code>
            メソッドあるいは <code>init()</code> メソッド内に書くといいでしょう。
        </para>

        <programlisting language="php"><![CDATA[
public function preDispatch()
{
    // ビュースクリプトの自動レンダリングを無効にします
    $this->_helper->viewRenderer->setNoRender()
    // .. 何かほかのことをします...
}
]]></programlisting>

        <para>
            もしメソッド内で <code>render()</code> をコールしていて、
            <link linkend="zend.controller.modular">規約どおりのディレクトリ構造</link>
            を使用しているのなら、自動レンダリングを使用するようにコードを書き換えましょう。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    ひとつのアクションで複数のビュースクリプトをレンダリングしている場合は、
                    なにも変更する必要はありません。
                </para>
            </listitem>
            <listitem>
                <para>
                    何も引数を指定せずに <code>render()</code> をコールしている場合は、
                    その行を削除します。
                </para>
            </listitem>
            <listitem>
                <para>
                    引数つきで <code>render()</code> をコールしていて、
                    その後に何か処理をしたり複数のビュースクリプトを実行したりしていない場合は、
                    その行を
                    <code>$this-&gt;_helper-&gt;viewRenderer()</code>
                    のように変更します。
                </para>
            </listitem>
        </itemizedlist>

        <para>
            独自のディレクトリ構造を使用している場合は、
            ビューの基底パスやスクリプトのパスをメソッドで設定してから
            <code>ViewRenderer</code> を使用します。これらのメソッドについての詳細は
            <link linkend="zend.controller.actionhelpers.viewrenderer">ViewRenderer
            のドキュメント</link> を参照ください。
        </para>

        <para>
            ビューオブジェクトをレジストリから取得していたり
            ビューオブジェクトをカスタマイズしていたり、
            あるいはデフォルトとは異なるビューを使用している場合は、
            そのオブジェクトを <code>ViewRenderer</code>
            に注入するために次のようにします。
            これはいつでも好きなときに行えます。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    フロントコントローラのインスタンスをディスパッチする前なら
                </para>

                <programlisting language="php"><![CDATA[
// $view はすでに定義されているものとします
$viewRenderer = new Zend_Controller_Action_Helper_ViewRenderer($view);
Zend_Controller_Action_HelperBroker::addHelper($viewRenderer);
]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    起動処理の中ならどこでも
                </para>

                <programlisting language="php"><![CDATA[
$viewRenderer =
    Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer');
$viewRenderer->setView($view);]]></programlisting>
            </listitem>
        </itemizedlist>

        <para>
            <code>ViewRenderer</code> を変更するにはさまざまな方法があります。
            たとえばレンダリングするビュースクリプトを別のものに変更したり
            ビュースクリプトパスの置換可能な要素（サフィックスを含む）
            を置換する内容を指定したり、使用するレスポンスセグメントを選択したりなどのことができます。
            規約どおりのディレクトリ構造以外を使用する場合は、
            <code>ViewRenderer</code> でのパスの決定方法を変更することもできます。
        </para>

        <para>
            <code>ErrorHandler</code> および <code>ViewRenderer</code>
            は今やコア機能として組み込まれているので、
            既存のコードについてもできるだけこれに適合するようにすることをお勧めします。
        </para>
    </sect2>

    <sect2 id="zend.controller.migration.fromzeroninetwo">
        <title>0.9.2 から 0.9.3 以降への移行</title>

        <para>
            0.9.3 では <link
                linkend="zend.controller.actionhelpers">アクションヘルパー</link>
            が利用できるようになりました。この変更にともない、以下のメソッドが削除され、
            <link linkend="zend.controller.actionhelpers.redirector">リダイレクタ
            アクションヘルパー</link> に組み込まれました。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setRedirectCode()</code> の代わりに
                    <classname>Zend_Controller_Action_Helper_Redirector::setCode()</classname>
                    を使用します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>setRedirectPrependBase()</code> の代わりに
                    <classname>Zend_Controller_Action_Helper_Redirector::setPrependBase()</classname>
                    を使用します。
                </para>
            </listitem>
            <listitem>
                <para>
                    <code>setRedirectExit()</code> の代わりに
                    <classname>Zend_Controller_Action_Helper_Redirector::setExit()</classname>
                    を使用します。
                </para>
            </listitem>
        </itemizedlist>

        <para>
            ヘルパーオブジェクトの取得方法や操作方法についての詳細は
            <link linkend="zend.controller.actionhelpers">アクションヘルパーのドキュメント</link> を、
            そしてリダイレクトの設定方法（新しいメソッドなど）についての詳細は
            <link linkend="zend.controller.actionhelpers.redirector">リダイレクタ
            アクションヘルパーのドキュメント</link> を参照ください。
        </para>
    </sect2>

    <sect2 id="zend.controller.migration.fromzerosix">
        <title>0.6.0 から 0.8.0 以降への移行</title>

        <para>
            前回変更された、もっとも基本的な MVC コンポーネントの使用法は、そのまま同じです。
        </para>

        <programlisting language="php"><![CDATA[
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <para>
            しかし、ディレクトリ構造を見直し、いくつかのコンポーネントが削除されました。
            また、名前が変更されたり新たに追加されたものもあります。以下にそれらをまとめます。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <classname>Zend_Controller_Router</classname> は削除されました。
                    かわりに rewrite ルータを使用してください。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_RewriteRouter</classname> は
                    <classname>Zend_Controller_Router_Rewrite</classname> という名前に変わり、
                    このフレームワークの標準ルータに格上げされました。
                    <classname>Zend_Controller_Front</classname> は、
                    特に別のルータを指定しない限りこのルータをデフォルトで使用します。
                </para>
            </listitem>

            <listitem>
                <para>
                    rewrite ルータで使用する、新しいルートクラスが追加されました。名前は
                    <classname>Zend_Controller_Router_Route_Module</classname> です。
                    これは MVC で使用するデフォルトのルートのほかに、<link
                        linkend="zend.controller.modular">コントローラモジュール
                        </link> をサポートしています。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Router_StaticRoute</classname> は
                    <classname>Zend_Controller_Router_Route_Static</classname> という名前に変わりました。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Dispatcher</classname> は
                    <classname>Zend_Controller_Dispatcher_Standard</classname> という名前に変わりました。
                </para>
            </listitem>

            <listitem>
                <para>
                    <classname>Zend_Controller_Action::_forward()</classname> の引数が変わりました。
                    新しいシグネチャは次のとおりです。
                </para>

                <programlisting language="php"><![CDATA[
final protected function _forward($action,
                                  $controller = null,
                                  $module = null,
                                  array $params = null);
]]></programlisting>

                <para>
                    <varname>$action</varname> は常に必須です。
                    コントローラを指定しなかった場合は、
                    現在のコントローラ内のアクションであるとみなされます。
                    <varname>$controller</varname> を指定しなかった場合は、
                    <varname>$module</varname> は常に無視されます。
                    最後に、<varname>$params</varname> で指定した任意の値が
                    リクエストオブジェクトに追加されます。
                    コントローラやモジュールは不要だがパラメータは渡したいという場合は、
                    コントローラやモジュールに null を指定します。
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.controller.migration.fromzerotwo">
        <title>0.2.0 以前のバージョンから 0.6.0 への移行</title>

        <para>
            MVC コンポーネントの基本的な部分は変わっていません。
            次のいずれの方法も使用可能です。
        </para>

        <programlisting language="php"><![CDATA[
Zend_Controller_Front::run('/path/to/controllers');
]]></programlisting>

        <programlisting language="php"><![CDATA[
/* -- ルータを作成します -- */
$router = new Zend_Controller_RewriteRouter();
$router->addRoute('user',
                  'user/:username',
                  array('controller' => 'user', 'action' => 'info')
);

/* -- ルータをコントローラに設定します -- */
$ctrl = Zend_Controller_Front::getInstance();
$ctrl->setRouter($router);

/* -- コントローラのディレクトリを設定し、ディスパッチします -- */
$ctrl->setControllerDirectory('/path/to/controllers');
$ctrl->dispatch();
]]></programlisting>

        <para>
            レスポンスオブジェクトを使用して、コンテンツとヘッダを取得することを推奨します。
            これにより、アプリケーション内で
            より柔軟な出力書式の切り替え (たとえば XHTML ではなく
            JSON や XML を使用するなど) ができるようになります。
            デフォルトでは、<code>dispatch()</code> はレスポンスのレンダリングを行い、
            ヘッダとレンダリングされた内容の両方を送信します。
            フロントコントローラから <code>returnResponse()</code>
            を使用してレスポンスを返し、レスポンスのレンダリングを独自に行うこともできます。
            将来のバージョンのフロントコントローラでは、
            レスポンスオブジェクトに出力バッファリングを使用する予定です。
        </para>

        <para>
            これまでの API に加え、多くの機能が追加されています。
            追加された機能についてはドキュメントを参照ください。
        </para>

        <para>
            最大の変更点は、多くのコンポーネントで
            サブクラス化による拡張が可能になったことです。以下にポイントを整理します。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <classname>Zend_Controller_Front::dispatch()</classname>
                    は、デフォルトでレスポンスオブジェクトの例外をトラップします。
                    例外の内容はレンダリングしません。これにより、
                    システムについての機密情報がレンダリングされてしまうことを防ぎます。
                    この挙動を変更するにはいくつかの方法があります。
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            フロントコントローラで <code>throwExceptions()</code>
                            を設定します。
                        </para>
                        <programlisting language="php"><![CDATA[
$front->throwExceptions(true);
]]></programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            レスポンスオブジェクトで <code>renderExceptions()</code>
                            を設定します。
                        </para>
                        <programlisting language="php"><![CDATA[
$response->renderExceptions(true);
$front->setResponse($response);
$front->dispatch();

// あるいは
$front->returnResponse(true);
$response = $front->dispatch();
$response->renderExceptions(true);
echo $response;
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <classname>Zend_Controller_Dispatcher_Interface::dispatch()</classname>
                は、ディスパッチャトークンではなく
                <xref linkend="zend.controller.request" />
                オブジェクトを使用するようになりました。
            </para></listitem>

            <listitem><para>
                <classname>Zend_Controller_Router_Interface::route()</classname>
                は、ディスパッチャトークンではなく
                <xref linkend="zend.controller.request" />
                オブジェクトを使用するようになりました。
            </para></listitem>

            <listitem>
                <para><classname>Zend_Controller_Action</classname> の変更点は以下のようになります。</para>

                <itemizedlist>
                    <listitem><para>
                        コンストラクタが受け付ける引数は
                        <classname>Zend_Controller_Request_Abstract $request</classname>、
                        <classname>Zend_Controller_Response_Abstract $response</classname>
                        および <code>array $params (optional)</code> の三つになりました。
                        <classname>Zend_Controller_Action::__construct()</classname>
                        は、これらを使用してリクエストやレスポンス、
                        そしてオブジェクトの invokeArgs プロパティを指定します。
                        コンストラクタをオーバーライドすることで、
                        この挙動をお望みのように変更することができます。
                        さらによいことに、<code>init()</code>
                        メソッドを使用してインスタンスの設定を自由に行うことができます。
                        このメソッドは、コンストラクタでの処理の最後にコールされます。
                    </para></listitem>

                    <listitem><para>
                        <code>run()</code> は final メソッドではなくなりました。
                        しかし、このメソッドはもはやフロントコントローラでは使用されません。
                        これは、クラスをページコントローラとして使用する場合にのみ使用します。
                        オプションの引数
                        <classname>Zend_Controller_Request_Abstract $request</classname>
                        および <classname>Zend_Controller_Response_Abstract $response</classname>
                        を受け取ります。
                    </para></listitem>

                    <listitem><para>
                        <code>indexAction()</code> を定義する必要はなくなりました。
                        しかし、デフォルトのアクションとして定義しておくことを推奨します。
                        これにより、RewriteRouter とアクションコントローラで
                        デフォルトのアクションメソッドを別々に指定できるようになります。
                    </para></listitem>

                    <listitem><para>
                        <code>__call()</code> をオーバーライドして、
                        未定義のアクションが自動的に処理されるようにする必要があります。
                    </para></listitem>

                    <listitem><para>
                        <code>_redirect()</code> にはオプションで二番目、三番目の引数が追加されました。
                        二番目の引数はリダイレクト時に返す HTTP コードです。
                        三番目の引数 <varname>$prependBase</varname>
                        を使用すると、リクエストオブジェクトに登録したベース URL
                        を URL の前に連結することを指示できます。
                    </para></listitem>

                    <listitem>
                        <para>
                            プロパティ <code>_action</code> は設定されなくなりました。
                            このプロパティの内容は <classname>Zend_Controller_Dispatcher_Token</classname>
                            でしたが、これは現在のバージョンにはもう存在しません。
                            トークンの唯一の目的は、要求されたコントローラやアクション、
                            URL パラメータについての情報を提供することでした。
                            これらは現在はリクエストオブジェクトから次のようにして取得できるようになっています。
                        </para>

                        <programlisting language="php"><![CDATA[
// 要求されたコントローラ名を取得します。
// その際には $this->_action->getControllerName() を使用します。
// 以下の例では getRequest() を使用していますが、直接 $_request プロパティに
// アクセスしてもかまいません。ただ getRequest() を使用することを推奨します。
// とういのは、親クラスがこのメソッドをオーバーライドして挙動を変更しているかもしれないからです。
$controller = $this->getRequest()->getControllerName();

// 要求されたアクション名を取得します。
// その際には $this->_action->getActionName() を使用します。
$action = $this->getRequest()->getActionName();

// リクエストパラメータを取得します。
// これは変わっていません。_getParams() メソッドおよび _getParam() メソッドは
// 現在は単なるリクエストオブジェクトへのプロキシです。
$params = $this->_getParams();
// パラメータ 'foo' を取得します。見つからなかった場合はデフォルト値 'default' を設定します
$foo = $this->_getParam('foo', 'default');
]]></programlisting>
                    </listitem>

                    <listitem>
                        <para>
                            <code>noRouteAction()</code> は削除されました。
                            存在しないアクションメソッドを扱うには、
                            <code>__call()</code> を使用してデフォルトのアクションに誘導します。
                        </para>

                        <programlisting language="php"><![CDATA[
public function __call($method, $args)
{
    // 存在しない 'Action' メソッドが要求された場合に、
    // それをデフォルトのアクションに渡します。
    if ('Action' == substr($method, -6)) {
        return $this->defaultAction();
    }

    throw new Zend_Controller_Exception('無効なメソッド呼び出しです');
}
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>
                <classname>Zend_Controller_RewriteRouter::setRewriteBase()</classname>
                は削除されました。かわりに
                <classname>Zend_Controller_Front::setBaseUrl()</classname> を使用してください
                (あるいは、リクエストクラスを使用している場合は
                <classname>Zend_Controller_Request_Http::setBaseUrl()</classname> を使用します)。
            </para></listitem>

            <listitem><para>
                <classname>Zend_Controller_Plugin_Interface</classname> は
                <classname>Zend_Controller_Plugin_Abstract</classname> に置き換えられました。
                すべてのメソッドは、ディスパッチャトークンではなく
                <xref linkend="zend.controller.request" />
                をやり取りするようになりました。
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
