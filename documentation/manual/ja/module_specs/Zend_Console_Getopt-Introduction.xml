<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<!-- EN-Revision: 15103 -->
<sect1 id="zend.console.getopt.introduction">
    <title>導入</title>
    <para>
        <classname>Zend_Console_Getopt</classname> クラスは、
        コマンドラインアプリケーションでのオプションや引数の処理を助けるものです。
    </para>
    <para>
        ユーザは、アプリケーションを実行する際にコマンドライン引数を指定することができます。
        これらの引数はアプリケーションにとって何らかの意味を持つものであり、
        何らかの振る舞いを変更したりリソースを選択したり、パラメータを設定したりします。
        多くのオプションには、慣例となっている意味があります。
        たとえば "<code>--verbose</code>" は、多くのアプリケーションで
        出力内容をさらに追加します。
        その他のオプションには、アプリケーションによって意味が異なるものもあります。
        たとえば "<code>-c</code>" は、
        <command>grep</command>、<command>ls</command> および
        <command>tar</command> でそれぞれ違う機能を表します。
    </para>
    <para>
        以下で用語の定義をします。これらの用語はいろいろな意味で用いられますが、
        このドキュメントでは、ここで定義した意味で使用します。
    </para>
    <itemizedlist>
        <listitem>
            <para>
                "引数 (argument)":
                コマンドラインで、コマンド名の後にあらわれる文字列。
                引数には、オプションが付くこともありますし
                付かないこともあります。引数により、
                コマンドの操作対象となるリソースを指定します。
            </para>
        </listitem>
        <listitem>
            <para>
                "オプション (option)":
                引数のうち、そのコマンドのデフォルトの振る舞いを
                何らかの方法で変更するもの。
            </para>
        </listitem>
        <listitem>
            <para>
                "フラグ (flag)": オプションの最初の部分で、
                そのオプションの目的を表すもの。フラグの前には、
                慣習的にひとつあるいはふたつのダッシュ
                ("<code>-</code>" あるいは "<code>--</code>")
                をつけることになっています。
                ひとつのダッシュをつけるのは、
                一文字のフラグかあるいは一文字フラグのクラスタの場合です。
                ふたつのダッシュをつけるのは複数文字からなるフラグの場合です。
                長い形式のフラグはクラスタ化できません。
            </para>
        </listitem>
        <listitem>
            <para>
                "パラメータ (parameter)": オプションの二番目の部分で、
                フラグとともに使用するデータの値を指定します。
                これは、オプションがそれを受け付ける場合に限ります。
                たとえば、多くのコマンドは
                "<code>--verbose</code>" オプションを受け付けますが、
                このオプションには一般的にパラメータを指定しません。
                しかし、"<code>--user</code>" のようなオプションは、
                たいていの場合はその後にパラメータが必要です。
            </para>
            <para>
                パラメータはフラグ引数の後で別の引数として指定することもできますし、
                あるいは同一の引数文字列の一部として指定することもできます。
                この場合は、フラグとパラメータを等号 ("<code>=</code>") で連結します。
                後者の形式は、長いフラグでのみサポートしています。
                たとえば、
                <code>-u username</code>、<code>--user username</code>
                あるいは <code>--user=username</code> といった形式を
                <classname>Zend_Console_Getopt</classname> でサポートしています。
            </para>
        </listitem>
        <listitem>
            <para>
                "クラスタ (cluster)": 複数の一文字のフラグを組み合わせ、
                ひとつのダッシュの後に文字列としてつなげたもの。
                たとえば "<command>ls -1str</command>"
                は四つのフラグのクラスタを使用しています。
                このコマンドは "<command>ls -1 -s -t -r</command>"
                と同等です。クラスタ化できるのは一文字のフラグだけで、
                長い形式のフラグはクラスタ化できません。
            </para>
        </listitem>
    </itemizedlist>
    <para>
        たとえば "<code>mysql --user=root mydatabase</code>" において、
        "<code>mysql</code>" は <emphasis>コマンド</emphasis>、
        "<code>--user=root</code>" は <emphasis>オプション</emphasis>、
        "<code>--user</code>" は <emphasis>フラグ</emphasis>、
        "<code>root</code>" はオプションに対する <emphasis>パラメータ</emphasis>
        となります。また "<code>mydatabase</code>" は、
        この定義によると引数ですがオプションではありません。
    </para>
    <para>
        <classname>Zend_Console_Getopt</classname> が提供するインターフェイスには、
        「アプリケーションで使用可能なフラグの宣言」
        「無効なフラグが指定された場合のエラー表示および使用法の表示」
        「ユーザが指定したフラグのアプリケーションへの通知」
        などがあります。
    </para>
    <note>
        <title>Getopt はアプリケーションフレームワークではありません</title>
        <para>
            <classname>Zend_Console_Getopt</classname> はdoes
            フラグやパラメータの意味を解釈するわけ <emphasis>ではなく</emphasis>、
            またアプリケーションのワークフローを実装したりコードを起動したりするものでもありません。
            それらの処理については、アプリケーション内で自分で実装しなければなりません。
            <classname>Zend_Console_Getopt</classname> クラスを使用すると、
            コマンドラインをパースし、ユーザが指定したオプションを
            オブジェクト指向のメソッドで取得できるようになります。
            しかし、その情報をもとにアプリケーションで何らかの処理を行うのは別の
            PHP クラスの仕事です。
        </para>
    </note>
    <para>
        これ以降の節で、<classname>Zend_Console_Getopt</classname> の使用法を説明します。
    </para>
</sect1>
