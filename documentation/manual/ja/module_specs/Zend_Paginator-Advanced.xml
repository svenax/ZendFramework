<!-- EN-Revision: 10200 -->
<sect1 id="zend.paginator.advanced">
    <title>高度な使用法</title>

    <sect2 id="zend.paginator.advanced.adapters">
        <title>独自のデータソースアダプタ</title>
        
        <para>
            同梱のアダプタでは対応していないようなデータ形式を処理したくなることもあるでしょう。
            そんな場合は自分でアダプタを書く必要があります。
        </para>
        
        <para>
            そのためには
            <code>Zend_Paginator_Adapter_Interface</code>
            を実装しなければなりません。このインターフェイスでは
            2 つのメソッドが必須となっています。
        </para>
        
        <itemizedlist>
            <listitem>
                <para>count()</para>
            </listitem>
            <listitem>
                <para>getItems($offset, $itemCountPerPage)</para>
            </listitem>
        </itemizedlist>
        
        <para>
            さらに、コンストラクタを実装してそのパラメータでデータソースを受け取り、
            protected あるいは private なプロパティにそれを保存する処理も作りたくなることでしょう。
            これをどのように実装するかはあなた次第です。
        </para>
        
        <para>
            これまでに SPL の
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceCountable.html"><code>Countable</code></ulink>
            インターフェイスを使ったことがある方なら
            <code>count()</code> はおなじみでしょう。
            <code>Zend_Paginator</code> と組み合わせて使う場合、
            これはデータコレクション内の項目総数を返します。
        </para>
        
        <para>
            <code>getItems()</code> メソッドは、ほんの少しだけ複雑です。
            これは、オフセットおよび 1 ページあたりの項目数を受け取ります。
            それにあわせて適切なデータを返す必要があります。
            配列の場合はこのようになるでしょう。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[return array_slice($this->_array, $offset, $itemCountPerPage);]]>
            </programlisting>
        </para>
        
        <para>
            同梱のアダプタ (すべて <code>Zend_Paginator_Adapter_Interface</code>
            を実装しています) を見れば、
            自分のアダプタでこれをどのように実装すればいいのか参考になるでしょう。
        </para>
    </sect2>

    <sect2 id="zend.paginator.advanced.scrolling-styles">
        <title>独自のスクロール形式</title>
        
        <para>
            独自のスクロール形式を作成するには
            <code>Zend_Paginator_ScrollingStyle_Interface</code>
            を実装しなければなりません。このインターフェイスには
            <code>getPages()</code> メソッドが定義されています。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[public function getPages(Zend_Paginator $paginator, $pageRange = null);]]>
            </programlisting>
        </para>
        
        <para>
            このメソッドは、いわゆる "ローカル" ページ
            (現在のページの周辺のページたち) の範囲のページの最小値・
            最大値を計算しなければなりません。
        </para>
        
        <para>
            他のスクロール形式を継承している (たとえば
            <code>Zend_Paginator_ScrollingStyle_Elastic</code>)
            のでない限り、自作のスクロール形式は必ずといっていいほど
            次のようなコードで終わることになるでしょう。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[return $paginator->getPagesInRange($lowerBound, $upperBound);]]>
            </programlisting>
        </para>
        
        <para>
            このコールには特別な意味はありません。
            単に最小値と最大値の妥当性をチェックして、
            その範囲の配列を返しているだけです。
        </para>
        
        <para>
            新しいスクロール形式が用意できたら、どのディレクトリからそれを探すのかを
            <code>Zend_Paginator</code> に通知する必要があります。
            そのためには、次のようにします。
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[$prefix = 'My_Paginator_ScrollingStyle';
$path   = 'My/Paginator/ScrollingStyle/';
Zend_Paginator::addScrollingStylePrefixPath($prefix, $path);]]>
            </programlisting>
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->