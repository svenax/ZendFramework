<sect1 id="zend.debug.dumping">

    <title>Дамп переменных<!--Dumping Variables--></title>

    <para>
        Статический метод <code>Zend_Debug::dump()</code> выводит или возвращает
        информацию о выражении. Это простая техника отладки довольно
        распространена, поскольку ее легко применять эпизодически, применительно
        к случаю, и она не требует какой-либо предварительной инициализации,
        специальных инструментов или отладочной среды.
<!--
        The static method <code>Zend_Debug::dump()</code> prints or returns
        information about an expression.  This simple technique of debugging is
        common, because it is easy to use in an ad hoc fashion, and requires no
        initialization, special tools, or debugging environment.
-->
    </para>

    <example id="zend.debug.dumping.example">
        <title>Пример использования метода dump()<!--Example of dump() method--></title>
        <programlisting role="php"><![CDATA[<?php

Zend_Debug::dump($var, $label=null, $echo=true)

?>]]></programlisting>
    </example>

    <para>
        Аргумент <code>$var</code> соответствует выражению или переменной,
        информацию о которой должен вывести метод
        <code>Zend_Debug::dump()</code>.
<!--
        The <code>$var</code> argument specifies the expression or variable
        about which the <code>Zend_Debug::dump()</code> method outputs
        information.
-->
    </para>

    <para>
        Аргумент <code>$label</code> (заголовок) является строкой, которая
        должна предшествовать выводу метода <code>Zend_Debug::dump()</code>.
        Использование заголовков может быть полезным в некоторых случаях -
        например, при выводе информации о нескольких переменных на одном экране.
<!--
        The <code>$label</code> argument is a string to be prepended to the
        output of <code>Zend_Debug::dump()</code>.  It may be useful, for
        example, to use labels if you are dumping information about multiple
        variables on a given screen.
-->
    </para>

    <para>
        Булев аргумент <code>$echo</code> определяет, должен ли быть отображен
        вывод метода <code>Zend_Debug::dump()</code> или нет. Если
        он равен <code>true</code>, то вывод будет отображен. Независимо от
        значения этого аргумента, возвращаемое методом значение будет содержать
        его вывод.
<!--
        The boolean <code>$echo</code> argument specifies whether the output
        of <code>Zend_Debug::dump()</code> is echoed or not.
        If <code>true</code>, the output is echoed.
        Regardless of the value of the <code>$echo</code> argument, the
        return value of this method contains the output.
-->
    </para>

    <para>
        Может быть небесполезным знать, что метод
        <code>Zend_Debug::dump()</code> является оберткой ко встроенной функции
        PHP
        <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>.
        Если поток вывода определен как веб-представление, то вывод
        <code>var_dump()</code> будет экранирован с помощью функции
        <ulink url="http://php.net/htmlspecialchars"><code>htmlspecialchars()</code></ulink>
        и окружен (X)HTML тегами <code>&lt;pre&gt;</code>.
<!--
        It may be helpful to understand that internally,
        <code>Zend_Debug::dump()</code> method wraps the PHP function
        <ulink url="http://php.net/var_dump"><code>var_dump()</code></ulink>.
        If the output stream is detected as a web presentation,
        the output of <code>var_dump()</code> is escaped using
        <ulink url="http://php.net/htmlspecialchars"><code>htmlspecialchars()</code></ulink>
        and wrapped with (X)HTML <code>&lt;pre&gt;</code> tags.
-->
    </para>

    <tip>
        <title>Отладка с Zend_Log<!--Debugging with Zend_Log--></title>
        <para>
            <code>Zend_Debug::dump()</code> хорошо применять
            во время разработки приложения для отладки. Вы можете очень быстро
            добавлять код для дампа переменной и удалять его.
<!--
            Using <code>Zend_Debug::dump()</code> is best for ad hoc
            debugging during software development.  You can add code to dump
            a variable and then remove the code very quickly.
-->
        </para>
        <para>
            Также рассмотрите возможность использования компоненты
            <link linkend="zend.log.overview">Zend_Log</link> при написании
            более долговременного отладочного кода. Например, вы можете
            использовать уровень журналирования <code>DEBUG</code> и
            регистратор Zend_Log_Writer_Stream для вывода строки, возвращенной
            <code>Zend_Debug::dump()</code>.
<!--
            Also consider the <link linkend="zend.log.overview">Zend_Log</link>
            component when writing more permanent debugging code.
            For example, you can use the <code>DEBUG</code> log level and the
            Stream log writer, to output the string returned by
            <code>Zend_Debug::dump()</code>.
-->
        </para>
    </tip>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
