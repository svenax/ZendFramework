<sect1 id="zend.view.controllers">
    <title>Скрипты контроллеров</title>

    <para>
        В контроллере вы создаете и конфигурируете экземпляр
        <code>Zend_View</code>. Затем вы объявляете переменные для этого
        экземпляра и приказываете ему сгенерировать выходные данные, используя
        указанный скрипт.
    </para>

    <sect2 id="zend.view.controllers.assign">

        <title>Объявление переменных</title>

        <para>
            Ваш скрипт контроллера должен объявить
            необходимые переменные до того, как будет передано
            управление скрипту вида. Обычно вы можете делать объявления по одному через объявление свойств экземпляра вида.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";]]>
        </programlisting>

        <para>
            Однако это может оказаться утомительным, если вы уже имеете
            набор значений для присвоения в массиве или объекте.
        </para>

        <para>
            Методы <code>assign()</code> дают возможность присваивать значения
            из массива или объекта "партиями". Следующий пример делает
            то же самое, что и предыдущий с последовательным объявлением
            свойств.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();

// определение массива из пар ключ-значение, где
// ключ является именем переменной,
// а значение - значением объявляемой переменной
$array = array(
    'a' => "Hay",
    'b' => "Bee",
    'c' => "Sea",
);
$view->assign($array);

// делаем то же самое с открытыми свойствами объекта;
// обратите внимание, что при объявлении мы приводим объект к массиву
$obj = new StdClass;
$obj->a = "Hay";
$obj->b = "Bee";
$obj->c = "Sea";
$view->assign((array) $obj);]]>
        </programlisting>

        <para>
            Вы можете также использовать методы для
            последовательного объявления c передачей имени переменной
            и ее значения.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->assign('a', "Hay");
$view->assign('b', "Bee");
$view->assign('c', "Sea");]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.view.controllers.render">

        <title>Выполнение скрипта вида</title>

        <para>
            После того, как вы определили все необходимые переменные, контроллер
            должен дать <code>Zend_View</code> команду выполнить указанный
            скрипт вида. Делайте это посредством вызова метода
            <code>render()</code>. Обратите внимание, что этот метод будет
            возвращать результат рендеринга, но не выводить его,
            поэтому вам нужно самостоятельно вывести его посредством
            <code>echo</code> или <code>print</code>, когда нужно.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->a = "Hay";
$view->b = "Bee";
$view->c = "Sea";
echo $view->render('someView.php');]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.view.controllers.script-paths">

        <title>Пути к скриптам видов</title>

        <para>
            По умолчанию <code>Zend_View</code> ищет скрипты
            вида относительно вызывающего скрипта.
            Например, если скрипт контроллера находится в
            <code>/path/to/app/controllers</code> и он вызывает
            <code>$view->render('someView.php')</code>, то
            <code>Zend_View</code> будет искать
            <code>/path/to/app/controllers/someView.php</code>.
        </para>

        <para>
            Очевидно, ваши скрипты вида могут находиться в другом месте.
            Чтобы указать <code>Zend_View</code>, где искать скрипты вида,
            используйте метод <code>setScriptPath()</code>.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->setScriptPath('/path/to/app/views');]]>
        </programlisting>

        <para>
            Теперь, когда вы вызываете <code>$view->render('someView.php')</code>,
            он будет искать <code>/path/to/app/views/someView.php</code>.
        </para>

        <para>
            Фактически вы можете "складывать" в стек пути,
            используя метод <code>addScriptPath()</code>. Если вы добавили
            пути в стек, то <code>Zend_View</code> будет искать запрошенный
            скрипт вида в этих путях, начиная с пути, добавленного последним.
            Это дает возможность замещать скрипты видов, принятые по умолчанию,
            другими, это позволяет создавать специальные "темы" и "скины" для всех или только определенных видов.
        </para>

        <programlisting role="php"><![CDATA[<?php
$view = new Zend_View();
$view->addScriptPath('/path/to/app/views');
$view->addScriptPath('/path/to/custom/');

// теперь, когда вы вызываете $view->render('booklist.php'), Zend_View
// будет искать "/path/to/custom/booklist.php",
// затем "/path/to/app/views/booklist.php",
// и под конец "booklist.php" в текущем каталоге.]]>
        </programlisting>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
