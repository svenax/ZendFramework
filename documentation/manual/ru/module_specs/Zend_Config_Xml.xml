<sect1 id="zend.config.adapters.xml">
    <title>Zend_Config_Xml</title>
    <para>
        <code>Zend_Config_Xml</code> дает разработчикам возможность хранить
        конфигурационные данные в простом формате XML и читать их посредством синтаксиса
        вложенных свойств объектов. Корневой элемент файла XML не имеет значения
        и ему может быть дано любое имя. Первый уровень элементов XML
        соответствует разделам конфигурационных данных. Формат XML поддерживает
        иерархическую организацию данных через вложенность элементов
        ниже элементов уровня разделов. Содержимое конечного элемента соответствует
        значению элемента конфигурационных данных. Наследование разделов
        поддерживается через специальный атрибут <code>extends</code>, значение
        атрибута соответствует разделу, данные которого наследуются в
        раздел с этим атрибутом.
    </para>
    <note>
        <title>Тип возвращаемых данных</title>
        <para>
            Конфигурационные данные, прочитанные в <code>Zend_Config_Xml</code>,
            всегда возвращаются как строки. Приведение данных из строк к требуемым
            типам предоставляется разработчикам.
        </para>
    </note>
    <example id="zend.config.adapters.xml.example.using">
        <title>Использование Zend_Config_Xml</title>
        <para>
            Данный пример демонстрирует основы использования <code>Zend_Config_Xml</code>
            для загрузки конфигурационных данных из файла XML. В этом примере
            используются конфигурационные данные для производственной и
            промежуточной систем. Поскольку конфигурационные данные
            промежуточной системы очень похожи на конфигурационные данные для
            производственной системы, то "промежуточный" (staging) раздел наследует от
            "производственного" (production) раздела. В данном случае выбор
            произвольный, т.е. может быть и наоборот — "производственный"
            раздел наследует от "промежуточного", хотя это может не подходить в
            более сложных случаях. Допустим, конфигурационные данные
            находятся в файле <code>/path/to/config.xml</code>:
        </para>
        <programlisting role="xml"><![CDATA[<?xml version="1.0"?>
<configdata>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <adapter>pdo_mysql</adapter>
            <params>
                <host>db.example.com</host>
                <username>dbuser</username>
                <password>secret</password>
                <dbname>dbname</dbname>
            </params>
        </database>
    </production>
    <staging extends="production">
        <database>
            <params>
                <host>dev.example.com</host>
                <username>devuser</username>
                <password>devsecret</password>
            </params>
        </database>
    </staging>
</configdata>]]>
        </programlisting>
        <para>
            Далее предположим, что разработчику приложения нужны "промежуточные"
            конфигурационные данные из файла XML. Загрузить эти данные, указав
            файл XML и нужный раздел, довольно просто:
        </para>
        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Config/Xml.php';

$config = new Zend_Config_Xml('/path/to/config.xml', 'staging');

echo $config->database->params->host;   // выведет "dev.example.com"
echo $config->database->params->dbname; // выведет "dbname"]]>
        </programlisting>
    </example>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
