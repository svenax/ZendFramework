<sect1 id="zend.view.introduction">

    <title>Введение</title>

    <para>
        <code>Zend_View</code> является классом для работы с частью вид (view)
        паттерна модель-вид-контроллер (model-view-controller). То есть он
        предназначен для того, чтобы помочь отделить скрипты видов от
        скриптов моделей и контроллеров. Он предоставляет систему помощников,
        фильтрации вывода и экранирования переменных.
    </para>

    <para>
        <code>Zend_View</code> является независимым от выбранной системы
        шаблонов: вы можете использовать PHP в качестве языка шаблонов или
        создавать экземпляры других систем шаблонов и работать с ними
        в ваших скриптах вида.
    </para>

    <para>
        Использование <code>Zend_View</code> в основном состоит из двух шагов:

        1.  Ваш скрипт контроллера создает экземпляр <code>Zend_View</code> и
        объявляет переменные этого экземпляра.

        2. Контроллер приказывает <code>Zend_View</code> воспроизвести
        данный вид, посредством этого производится контроль за скриптом
        вида, который генерирует выходные данные вида.
    </para>

    <sect2 id="zend.view.introduction.controller">

        <title>Скрипт контроллера</title>

        <para>
            В качестве простого примера предположим, что ваш контроллер имеет
            список данных по книгам, который нужно воспроизвести через вид.
            Скрипт контроллера может выглядеть наподобие этого:
        </para>

        <programlisting role="php"><![CDATA[<?php
// использование модели для получения данных о заголовках и авторах книг
$data = array(
    array(
        'author' => 'Hernando de Soto',
        'title' => 'The Mystery of Capitalism'
    ),
    array(
        'author' => 'Henry Hazlitt',
        'title' => 'Economics in One Lesson'
    ),
    array(
        'author' => 'Milton Friedman',
        'title' => 'Free to Choose'
    )
);

// теперь присваиваем данные по книгам экземпляру Zend_View
Zend_Loader::loadClass('Zend_View');
$view = new Zend_View();
$view->books = $data;

// и выполняем скрипт вида "booklist.php"
echo $view->render('booklist.php');]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.view.introduction.view">

        <title>Скрипт вида</title>

        <para>
            Теперь нам нужен сопутствующий скрипт вида "booklist.php".
            Это такой же скрипт PHP, как и остальные, за одним исключением:
            он выполняется в области видимости экземпляра <code>Zend_View</code>,
            это означает, что <code>$this</code> ссылается на
            экземпляр <code>Zend_View</code>. Переменные, присваиваемые в
            контроллере для скрипта вида, являются открытыми свойствами
            экземпляра <code>Zend_View</code>. Таким образом, базовый скрипт
            вида может выглядеть следующим образом:
        </para>

        <programlisting role="php"><![CDATA[<?php if ($this->books): ?>

    <!-- Таблица нескольких книг. -->
    <table>
        <tr>
            <th>Author</th>
            <th>Title</th>
        </tr>

        <?php foreach ($this->books as $key => $val): ?>
        <tr>
            <td><?php echo $this->escape($val['author']) ?></td>
            <td><?php echo $this->escape($val['title']) ?></td>
        </tr>
        <?php endforeach; ?>

    </table>

<?php else: ?>

    <p>Нет книг для отображения.</p>

<?php endif;]]>
        </programlisting>

        <para>
            Обратите внимание, что мы используем метод <code>escape()</code>
            для экранирования переменных.
        </para>

    </sect2>

    <sect2 id="zend.view.introduction.options">
        <title>Опции</title>

        <para>
            <code>Zend_View</code> имеет несколько опций, которые могут
            использоваться для управления поведением ваших скриптов вида:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>basePath</code> - базовый путь, начиная от которого
                    устанавливаются пути скриптов, помощников и фильтров.
                    Предполагается, что используется следующая структура
                    директорий:
                </para>

                <programlisting role="php"><![CDATA[
base/path/
    helpers/
    filters/
    scripts/]]>
                </programlisting>

                <para>
                    Эта опция может быть установлена через методы
                    <code>setBasePath()</code>, <code>addBasePath()</code>, или
                    опцию <code>basePath</code> для конструктора.
                </para>
            </listitem>

            <listitem><para>
                <code>encoding</code> - кодировка, которую следует использовать
                при вызове функций <code>htmlentities()</code>,
                <code>htmlspecialchars()</code> и др. По умолчанию используется
                ISO-8859-1 (latin1). Может быть установлена через метод
                <code>setEncoding()</code> или опцию <code>encoding</code> для
                конструктора.
            </para></listitem>

            <listitem><para>
                <code>escape</code> - обратный вызов, который следует
                использовать для метода <code>escape()</code>. Может быть
                установлена через метод <code>setEscape()</code> или опцию
                <code>escape</code> для конструктора.
            </para></listitem>

            <listitem><para>
                <code>filter</code> - фильтр, который следует использовать после
                рендеринга скрипта вида. Может быть установлена через методы
                <code>setFilter()</code>, <code>addFilter()</code>, или опцию
                <code>filter</code> для конструктора.
            </para></listitem>

            <listitem><para>
                <code>strictVars</code> - если опция установлена, то
                <code>Zend_View</code> генерирует уведомления (notices) и
                предупреждения (warnings), когда производится обращение к
                неинициализированной переменной. Опция может быть
                установлена посредством вызова <code>strictVars(true)</code> или
                передачи опции <code>strictVars</code> конструктору.
            </para></listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.view.introduction.accessors">
        <title>Вспомогательные аксессоры</title>

        <para>
            Скорее всего, вам никогда не понадобится вызывать методы
            <code>assign()</code>, <code>render()</code> или перечисленные ниже
            для установки/добавления фильтров, помощников, и путей к скриптам
            вида. Тем не менее, если вы хотите самостоятельно расширить класс
            <code>Zend_View</code> или нуждаетесь в доступе к его внутренностям,
            то можно использовать следующие аксессоры:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>getVars()</code> возвращает все установленные
                    переменные.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearVars()</code> удаляет все присвоенные переменные,
                    полезен, если вы хотите повторно использовать объект вида,
                    но хотите контролировать доступность переменных.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getScriptPath($script)</code> возвращает вычисленный
                    путь к данному скрипту вида.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getScriptPaths()</code> возвращает все зарегистрированные пути к скриптам вида.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getHelperPath($helper)</code> возвращает вычисленный
                    путь к классу помощника, имя которого передается в
                    качестве параметра.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getHelperPaths()</code> возвращает все зарегистрированные пути к классам помощников.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilterPath($filter)</code> возвращает вычисленный
                    путь к классу фильтра, имя которого передается в
                    качестве параметра.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilterPaths()</code> возвращает все зарегистрированные пути к классам фильтров.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
