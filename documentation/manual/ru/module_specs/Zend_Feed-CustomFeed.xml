<sect1 id="zend.feed.custom-feed">
    <title>
        Специальные классы лент и записей
        <!-- Custom Feed and Entry Classes -->
    </title>

    <para>
        Наконец, вы можете наследовать классы <code>Zend_Feed</code>, если хотите обеспечить
        собственный формат или такие детали, как автоматическое управление элементами,
        которые должны находиться в специальном пространстве имен.
<!--
        Finally, you can extend the <code>Zend_Feed</code> classes if you'd like to provide your own format or
        niceties like automatic handling of elements that should go into a custom namespace.
-->
    </para>

    <para>
        Здесь приведен пример специального класса публикации Atom, который управляет
        публикациями в собственным пространстве имен <code>myns:</code>. Обратите
        внимание, что он автоматически делает вызов <code>registerNamespace()</code>,
        так что конечным пользователям не нужно беспокоиться о пространствах имен.
<!--
        Here is an example of a custom Atom entry class that handles its own <code>myns:</code> namespace
        entries. Note that it also makes the <code>registerNamespace()</code> call for you, so the end user
        doesn't need to worry about namespaces at all.
-->
    </para>

    <example>
        <title>
            Расширение класса публикации Atom с добавлением специальных пространств имен
            <!-- Extending the Atom Entry Class with Custom Namespaces -->
        </title>
        <programlisting role="php"><![CDATA[
<?php

/**
* Специальный класс публикации знает URI ленты и может автоматически
* добавлять дополнительные пространства имен
 */
class MyEntry extends Zend_Feed_Entry_Atom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // преобразование myUpdated в myns:updated.
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // преобразование myUpdated в myns:updated.
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

}

?>]]>   </programlisting>
        <para>
            Далее для использования этого класса просто создаете его экземпляр и устанавливаете
            свойство <code>myUpdated</code>:
<!--
            Then to use this class, you'd just instantiate it directly and set the <code>myUpdated</code>
            property:
-->
        </para>
        <programlisting role="php"><![CDATA[
<?php

$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

?>]]>   </programlisting>
    </example>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
