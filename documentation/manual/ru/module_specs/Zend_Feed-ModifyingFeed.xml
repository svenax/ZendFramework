<sect1 id="zend.feed.modifying-feed">
    <title>
        Изменение структуры лент и публикаций
        <!-- Modifying Feed and Entry structures -->
    </title>

    <para>
        Естетственный синтаксис <code>Zend_Feed</code> используется для создания
        и изменения лент и записей так же, как и для их чтения. Вы можете легко преобразовывать
        свои новые или измененные объекты обратно в валидный XML для сохранения в файл
        или отправки серверу.
<!--
        <code>Zend_Feed</code>'s natural syntax extends to constructing and modifying feeds and entries as well
        as reading them. You can easily turn your new or modified objects back into well-formed XML for saving
        to a file or sending to a server.
-->
    </para>

    <example>
        <title>
            Изменение существующей публикации в ленте
            <!-- Modifying an Existing Feed Entry -->
        </title>
        <programlisting role="php"><![CDATA[
<?php

$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed->current();

$entry->title = 'This is a new title';
$entry->author->email = 'my_email@example.com';

echo $entry->saveXML();

?>]]>   </programlisting>
        <para>
            Это выведет полное (включая вступление <code>&lt;?xml ... &gt;</code>) XML-представление
            новой публикации, включая необходимые пространства имен XML.
<!--
            This will output a full (includes <code>&lt;?xml ... &gt;</code> prologue) XML representation of the
            new entry, including any necessary XML namespaces.
-->
        </para>
        <para>
            Обратите внимание на то, что вышеприведенный код будет работать, даже если
            существующая запись не имеет тег <code>&lt;author&gt;</code>. Для присвоения вы
            можете использовать столько уровней доступа через <code>-&gt;</code>, сколько
            для получения; все промежуточные уровни будут созданы автоматически, если необходимо.
<!--
            Note that the above will work even if the existing entry does not already have an author tag. You can
            use as many levels of <code>-&gt;</code> access as you like before getting to an assignment; all of the
            intervening levels will be created for you automatically if necessary.
-->
        </para>
    </example>

    <para>
        Если вы хотите использовать в своих записях пространство имен, отличное от
        <code>atom:</code>, <code>rss:</code>, or <code>osrss:</code>, то вам нужно зарегистрировать
        его через <code>Zend_Feed</code>, используя <code>Zend_Feed::registerNamespace()</code>.
        Когда вы изменяете существующий элемент, он всегда будет сохранять
        свое исходное пространство имен. Когда добавляете новый элемент, он будет включен в
        пространство имен по умолчанию, если вы не укажете явно другое пространство имен.
<!--
        If you want to use a namespace other than <code>atom:</code>, <code>rss:</code>, or <code>osrss:</code>
        in your entry, you need to register the namespace with <code>Zend_Feed</code> using <code>
        Zend_Feed::registerNamespace()</code>. When you are modifying an existing element, it will always
        maintain its original namespace. When adding a new element, it will go into the default namespace if
        you do not explicitly specify another namespace.
-->
    </para>

    <example>
        <title>
            Создание публикации Atom с элементами в специальном пространстве имен
            <!-- Creating an Atom Entry with Elements of Custom Namespaces -->
        </title>
        <programlisting role="php"><![CDATA[
<?php

$entry = new Zend_Feed_Entry_Atom();
// id уже присвоен сервером
$entry->title = 'my custom entry';
$entry->author->name = 'Example Author';
$entry->author->email = 'me@example.com';

// теперь выполнение специальной части
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry->{'myns:myelement_one'} = 'my first custom value';
$entry->{'myns:container_elt'}->part1 = 'first nested custom part';
$entry->{'myns:container_elt'}->part2 = 'second nested custom part';

echo $entry->saveXML();

?>]]>   </programlisting>
    </example>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
