<sect1 id="zend.config.introduction">
    <title>Введение</title>
    <para>
        <code>Zend_Config</code> создан для того, чтобы сделать более
        простым доступ к конфигурационным данным и их использование внутри приложения.
        Он предоставляет основанный на вложенных свойствах объектов пользовательский
        интерфейс для доступа к конфигурационным данным внутри приложения.
        Конфигурационные данные могут храниться на различных носителях информации,
        поддерживающих хранение данных в виде иерархии. На данный момент
        <code>Zend_Config</code> предоставляет адаптеры для конфигурационных
        данных, хранящихся в текстовых файлах:
        <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
        и <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.
    </para>
    <example id="zend.config.introduction.example.using">
        <title>Использование <code>Zend_Config</code></title>
        <para>
            Обычно предполагается, что используется один из классов адаптеров, например,
            <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link>
            или <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.
            Но если конфигурационные данные доступны в виде массива PHP,
            то можно передавать эти данные конструктору <code>Zend_Config</code>,
            чтобы использовать преимущества простого объектно-ориентированного
            интерфейса.
        </para>
        <programlisting role="php"><![CDATA[
// Массив конфигурационных данных
$configArray = array(
    'webhost'  => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);

// Создание объектно-ориентированной обертки для конфигурационных данных
require_once 'Zend/Config.php';
$config = new Zend_Config($configArray);

// Вывод элемента конфигурационных данных (результатом будет 'www.example.com')
echo $config->webhost;

// Использование конфигурационных данных для соединения с базой данных
$db = Zend_Db::factory($config->database->adapter,
                       $config->database->params->toArray());

// Альтернативный способ - просто передавайте объект Zend_Config.
// Фабрика Zend_Db знает, как его интерпретировать.
$db = Zend_Db::factory($config->database);
]]>
        </programlisting>
    </example>
    <para>
        Как показано в предыдущем примере, в <code>Zend_Config</code> для
        доступа к конфигурационным данным, переданным его конструктору,
        используется синтаксис вложенных свойств объектов.
    </para>
    <para>
        Кроме объектно-ориентированного доступа к значениям данных,
        <code>Zend_Config</code> также предоставляет метод <code>get()</code>,
        который будет возвращать значение по умолчанию, если элемент
        данных не существует. Например:
    </para>
    <programlisting role="php"><![CDATA[
$host = $config->database->get('host', 'localhost');
]]>
    </programlisting>
    <example id="zend.config.introduction.example.file.php">
        <title>Использование <code>Zend_Config</code> с конфигурационным файлом PHP</title>
        <para>
            Часто требуется использовать конфигурационный файл,
            основанный на "чистом" PHP. Следующий код показывает, как просто
            этого достичь.
        </para>
        <programlisting role="php"><![CDATA[
// config.php
return array(
    'webhost'  => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);]]></programlisting>
        <programlisting role="php"><![CDATA[
// Использование конфигурации
require_once 'Zend/Config.php';
$config = new Zend_Config(require 'config.php');

// Вывод элемента конфигурационных данных (результатом будет 'www.example.com')
echo $config->webhost;
]]>
        </programlisting>
    </example>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
