<sect1 id="zend.filter.set">

    <title>Standard Filter Classes</title>

    <para>
        The Zend Framework comes with a standard set of filters, which are ready for you to use.
    </para>

    <sect2 id="zend.filter.set.alnum">
        <title>Alnum</title>
        <para>
            Returns the string <code>$value</code>, removing all but alphabetic and digit characters. This filter
            includes an option to also allow white space characters.
        </para>
        
        <note>
            <para>
                The alphabetic characters mean characters that makes up words in each language.
                However, the english alphabet is treated as the alphabetic characters in following languages: Chinese, Japanese, Korean.
                The language is specified by Zend_Locale.
            </para>
        </note>
        
    </sect2>

    <sect2 id="zend.filter.set.alpha">
        <title>Alpha</title>
        <para>
            Returns the string <code>$value</code>, removing all but alphabetic characters. This filter includes an
            option to also allow white space characters.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.basename">
        <title>BaseName</title>
        <para>
            Given a string containing a path to a file, this filter will return the base
            name of the file
        </para>
    </sect2>

    <sect2 id="zend.filter.set.digits">
        <title>Digits</title>
        <para>
            Returns the string <code>$value</code>, removing all but digit characters.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.dir">
        <title>Dir</title>
        <para>
            Returns directory name component of path.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.htmlentities">
        <title>HtmlEntities</title>
        <para>
            Returns the string <code>$value</code>, converting characters to their corresponding
            HTML entity equivalents where they exist.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.int">
        <title>Int</title>
        <para>
            Returns (int) <code>$value</code>
        </para>
    </sect2>

    <sect2 id="zend.filter.set.stripnewlines">
        <title>StripNewlines</title>
        <para>
            Returns the string <code>$value</code> without any newline control characters.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.realpath">
        <title>RealPath</title>
        <para>
            Expands all symbolic links and resolves references to '/./', '/../' and extra '/'
            characters in the input path and return the canonicalized absolute pathname. The resulting
            path will have no symbolic link, '/./' or '/../' components.
        </para>
        <para>
            <code>Zend_Filter_RealPath</code> will return <code>FALSE</code>
            on failure, e.g. if the file does not exist. On BSD systems <code>Zend_Filter_RealPath</code>
            doesn't fail if only the last path component doesn't exist, while other systems will return
            <code>FALSE</code>.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.stringtolower">
        <title>StringToLower</title>
        <para>
            Returns the string <code>$value</code>, converting alphabetic characters to lowercase as necessary.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.stringtoupper">
        <title>StringToUpper</title>
        <para>
            Returns the string <code>$value</code>, converting alphabetic characters to uppercase as necessary.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.stringtrim">
        <title>StringTrim</title>
        <para>
            Returns the string <code>$value</code> with characters stripped from the beginning and end.
        </para>
    </sect2>

    <sect2 id="zend.filter.set.striptags">
        <title>StripTags</title>
        <para>
            This filter returns the input string, with all HTML and PHP tags stripped from it, except those that have
            been explicitly allowed. In addition to the ability to specify which tags are allowed, developers can
            specify which attributes are allowed across all allowed tags and for specific tags only. Finally, this
            filter offers control over whether comments (e.g., <code>&lt;!-- ... --&gt;</code>) are removed or
            allowed.
        </para>
    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->