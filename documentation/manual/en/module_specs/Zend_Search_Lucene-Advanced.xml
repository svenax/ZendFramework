<sect1 id="zend.search.lucene.advanced">
    <title>Advanced</title>

    <sect2 id="zend.search.lucene.advanced.static">
        <title>Using the index as static property</title>

        <para>
            The <code>Zend_Search_Lucene</code> object uses the destructor method to commit changes and clean up resources.
        </para>

        <para>
            It stores added documents in memory and dumps new index segment to disk depending on <code>MaxBufferedDocs</code> parameter.
        </para>

        <para>
            If <code>MaxBufferedDocs</code> limit is not reached then there are some "unsaved" documents which are saved as a new segment in the object's destructor method.
            The index auto-optimization procedure is invoked if necessary depending on the values of the <code>MaxBufferedDocs</code>, <code>MaxMergeDocs</code> and
            <code>MergeFactor</code> parameters.
        </para>

        <para>
            Static object properties (see below) are destroyed <emphasis>after</emphasis> the last line of the executed script.

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }
}

Searcher::initIndex();]]>
            </programlisting>
        </para>


        <para>
            All the same, the destructor for static properties is correctly invoked at this point in the program's execution.
        </para>

        <para>
            One potential problem is exception handling. Exceptions thrown by destructors of static objects don't have context, because the destructor is executed after the script has already completed.
        </para>

        <para>
            You might see a "Fatal error: Exception thrown without a stack frame in Unknown on line 0" error message instead of exception description in such cases.
        </para>

        <para>
            Zend_Search_Lucene provides a workaround to this problem with the <code>commit()</code> method. It saves all unsaved changes and frees memory used for storing new segments.
            You are free to use the commit operation any time- or even several times- during script execution. You can still use the <code>Zend_Search_Lucene</code> object for searching,
            adding or deleting document after the commit operation. But the <code>commit()</code> call guarantees that if there are no document added or deleted after the call to <code>commit()</code>, then
            the <code>Zend_Search_Lucene</code> destructor has nothing to do and will not throw exception:

            <programlisting role="php"><![CDATA[<?php
class Searcher {
    private static $_index;

    public static function initIndex() {
        self::$_index = Zend_Search_Lucene::open('path/to/index');
    }

    ...

    public static function commit() {
        self::$_index->commit();
    }
}

Searcher::initIndex();

...

// Script shutdown routine
...
Searcher::commit();
...]]>
            </programlisting>
        </para>
    </sect2>

</sect1>
