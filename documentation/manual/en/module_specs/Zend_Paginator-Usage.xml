<sect1 id="zend.paginator.usage">
    <title>Usage</title>

    <sect2 id="zend.paginator.usage.paginating">
        <title>Paginating data collections</title>

        <para>
            In order to paginate items into pages, <code>Zend_Paginator</code>
            must have a generic way of accessing that data.  For that reason,
            all data access takes place through data source adapters.  Several
            adapters ship with Zend Framework by default:
        </para>
            
        <table id="zend.paginator.usage.paginating.adapters">
            <title>Adapters for <code>Zend_Paginator</code></title>

            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Adapter</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Array</entry>
                        <entry>Use a PHP array</entry>
                    </row>
                    <row>
                        <entry>DbSelect</entry>
                        <entry>
                            Use a <link linkend="zend.db.select.html"><code>Zend_Db_Select</code></link> 
                            instance
                        </entry>
                    </row>
                    <row>
                        <entry>Iterator</entry>
                        <entry>
                            Use an <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIterator.html"><code>Iterator</code></ulink> 
                            instance
                        </entry>
                    </row>
                    <row>
                        <entry>Null</entry>
                        <entry>
                            Do not use <code>Zend_Paginator</code> to manage 
                            data pagination. You can still take advantage of
                            the pagination control feature.
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            To create an instance of <code>Zend_Paginator</code>, you must 
            supply an adapter to the constructor:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[$paginator = new Zend_Paginator(new Zend_Paginator_Adapter_array($array));]]>
            </programlisting>
        </para>

        <para>
            For convenience, you may take advantage of the static 
            <code>factory()</code> method for the adapters packaged with Zend 
            Framework:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[$paginator = Zend_Paginator::factory($array);]]>
            </programlisting>
        </para>

        <note>
            In the case of the Null adapter, in lieu of a data collection you 
            must supply an item count to its constructor.
        </note>
        
        <para>
            Although the instance is technically usable in this state, you'll 
            need to tell the paginator what page number the user requested in 
            order to allow him to advance through the paginated data:
        </para>

        <para>
            <programlisting role="php"><![CDATA[$paginator->setCurrentPageNumber($pageNumber);]]>
            </programlisting>
        </para>
        
        <para>
            The simplest way to keep track of this value is through a URL.  
            Although we recommend using a 
            <code>Zend_Controller_Router_Interface</code>-compatible 
            router to handle this, it is not a requirement.
        </para>
        
        <para>
            The following is an example route you might use in an INI 
            configuration file:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[routes.example.route = articles/:articleName/:pageNumber
routes.example.defaults.controller = articles
routes.example.defaults.action = view
routes.example.defaults.pageNumber = 1
routes.example.reqs.articleName = \w+
routes.example.reqs.pageNumber = \d+]]>
            </programlisting>
        </para>
        
        <para>
            With the above route (and using Zend Framework MVC components), 
            you might set the current page number like this:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[$paginator->setCurrentPageNumber($this->_getParam('pageNumber'));]]>
            </programlisting>
        </para>
        
        <para>
            There are other options available; see 
            <link linkend="zend.paginator.configuration">Configuration</link> 
            for more on them.
        </para>
        
        <para>
            Finally, you'll need to assign the paginator instance to your view.
            If you're using <code>Zend_View</code> with the ViewRenderer action
            helper, the following will work:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[$this->view->paginator = $paginator;]]>
            </programlisting>
        </para>
    </sect2>
    
    <sect2 id="zend.paginator.rendering">
        <title>Rendering pages with view scripts</title>
        
        <para>
            The view script is used to render the page items (if you're using
            <code>Zend_Paginator</code> to do so) and display the pagination
            control.
        </para>
        
        <para>
            Because <code>Zend_Paginator</code> implements the SPL interface
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceIteratorAggregate.html"><code>IteratorAggregate</code></ulink>,
            looping over your items and displaying them is simple.
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[<html>
<body>
<h1>Example</h1>
<?php if (count($this->paginator)): ?>
<ul>
<?php foreach ($this->paginator as $item): ?>
  <li><?= $item; ?></li>
<?php endforeach; ?>
</ul>
<?php endif; ?>

<?= $this->paginationControl($this->paginator, 'Sliding', 'my_pagination_control.phtml'); ?>
</body>
</html>]]>
            </programlisting>
        </para>
        
        <para>
            Notice the view helper call near the end.  PaginationControl takes
            the paginator instance, an optional scrolling style, and an 
            optional view partial.
        </para>
        
        <para>
            Despite being optional, the latter two parameters are very 
            important.  Whereas the view partial is used to determine how the
            pagination control should <emphasis>look</emphasis>, the scrolling
            style is used to control how it should <emphasis>behave</emphasis>.
            Say the view partial is in the style of a search pagination 
            control, like the one below:
        </para>
        
        <para>
            <inlinegraphic align="center" valign="middle"
                fileref="figures/zend.paginator.usage.rendering.control.png"
                format="PNG"/>
        </para>
        
        <para>
            What happens when the user clicks the "next" link a few times?  
            Well, any number of things could happen.  The current page number
            could stay in the middle as you click through (as it does on 
            Yahoo!), or it could advance to the end of the page range and then
            appear again on the left when the user clicks "next" one more time.
            The page numbers might even expand and contract as the user 
            advances (or "scrolls") through them (as they do on Google).
        </para>
        
        <para>
            There are four scrolling styles packaged with Zend Framework:
        </para>
        
        <table id="zend.paginator.usage.rendering.scrolling-styles">
            <title>Scrolling styles for <code>Zend_Paginator</code></title>

            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Scrolling style</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>All</entry>
                        <entry>
                            Returns every page.  This is useful for dropdown 
                            menu pagination controls with relatively few 
                            pages.  In these cases, you want all pages 
                            available to the user at once.
                        </entry>
                    </row>
                    <row>
                        <entry>Elastic</entry>
                        <entry>
                            A Google-like scrolling style that expands and 
                            contracts as a user scrolls through the pages.
                        </entry>
                    </row>
                    <row>
                        <entry>Jumping</entry>
                        <entry>
                            As users scroll through, the page number advances
                            to the end of a given range, then starts again at
                            the beginning of the new range.
                        </entry>
                    </row>
                    <row>
                        <entry>Sliding</entry>
                        <entry>
                            A Yahoo!-like scrolling style that positions the
                            current page number in the center of the page 
                            range, or as close as possible.  This is the 
                            default style.
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        
        <para>
            By setting the default view partial, default scrolling style, and 
            view instance, you can eliminate the calls to PaginationControl
            completely:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[Zend_Paginator::setDefaultScrollingStyle('Sliding');
Zend_View_Helper_PaginationControl::setDefaultViewPartial('my_pagination_control.phtml');
$paginator->setView($view);]]>
            </programlisting>
        </para>
        
        <para>
            When all of these values are set, you can render the pagination
            control inside your view script with a simple echo statement:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[<?= $this->paginator; ?>]]>
            </programlisting>
        </para>
        
        <sect3 id="zend.paginator.usage.rendering.example-controls">
            <title>Example pagination controls</title>
            
            <para>
                The following example pagination controls will hopefully help
                you get started:
            </para>
            
            <para>
                Search pagination
                
                <programlisting role="php"><![CDATA[<!-- 
See http://developer.yahoo.com/ypatterns/pattern.php?pattern=searchpagination
-->

<?php if ($this->pageCount): ?> 
<div id="paginationControl">
<!-- Previous page link --> 
<?php if (isset($this->previous)): ?> 
  <a href="<?= $this->url(array('page' => $this->previous)); ?>">&lt; Previous</a> | 
<?php else: ?> 
  <span class="disabled">&lt; Previous</span> | 
<?php endif; ?> 

<!-- Numbered page links -->
<?php foreach ($this->pagesInRange as $page): ?> 
  <?php if ($page != $this->current): ?>
    <a href="<?= $this->url(array('page' => $page)); ?>"><?= $page; ?></a> | 
  <?php else: ?>
    <?= $page; ?> | 
  <?php endif; ?>
<?php endforeach; ?>

<!-- Next page link --> 
<?php if (isset($this->next)): ?> 
  <a href="<?= $this->url(array('page' => $this->next)); ?>">Next &gt;</a>
<?php else: ?> 
  <span class="disabled">Next &gt;</span>
<?php endif; ?> 
</div> 
<?php endif; ?>]]>
                </programlisting>
            </para>
            
            <para>
                Item pagination

                <programlisting role="php"><![CDATA[<!-- 
See http://developer.yahoo.com/ypatterns/pattern.php?pattern=itempagination
-->

<?php if ($this->pageCount): ?> 
<div id="paginationControl">
<?= $this->firstItemNumber; ?> - <?= $this->lastItemNumber; ?> 
of <?= $this->totalItemCount; ?>

<a href="<?= $this->url(array('page' => $this->first)); ?>">First</a> | 

<!-- Previous page link --> 
<?php if (isset($this->previous)): ?> 
  <a href="<?= $this->url(array('page' => $this->previous)); ?>">&lt; Previous</a> | 
<?php else: ?> 
  <span class="disabled">&lt; Previous</span> | 
<?php endif; ?> 

<!-- Next page link --> 
<?php if (isset($this->next)): ?> 
  <a href="<?= $this->url(array('page' => $this->next)); ?>">Next &gt;</a> |
<?php else: ?> 
  <span class="disabled">Next &gt;</span> |
<?php endif; ?>

<a href="<?= $this->url(array('page' => $this->last)); ?>">Last</a>

</div> 
<?php endif; ?>]]>
                </programlisting>
            </para>

            <para>
                Dropdown pagination

                <programlisting role="php"><![CDATA[<?php if ($this->pageCount): ?> 
<select id="paginationControl" size="1"> 
<?php foreach ($this->pagesInRange as $page): ?>
  <?php $selected = ($page == $this->current) ? ' selected="selected"' : ''; ?>
  <option value="<?= $this->url(array('page' => $page)); ?>"<?= $selected ?>><?= $page; ?></option> 
<?php endforeach; ?>
</select>
<?php endif; ?>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js"></script>
<script type="text/javascript">
$('paginationControl').observe('change', function() {
    window.location = this.options[this.selectedIndex].value;
})
</script>]]>
                </programlisting>
            </para>
        </sect3>
        
        <sect3 id="zend.paginator.usage.rendering.properties">
            <title>Listing of properties</title>
            
            <para>
                The following options are available to pagination control
                view partials:
            </para>
            
            <table id="zend.paginator.usage.rendering.properties.table">
                <title>Properties available to view partials</title>

                <tgroup cols="3">
                    <thead>
                        <row>
                            <entry>Property</entry>
                            <entry>Type</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>first</entry>
                            <entry>integer</entry>
                            <entry>First page number (i.e., 1)</entry>
                        </row>
                        <row>
                            <entry>firstItemNumber</entry>
                            <entry>integer</entry>
                            <entry>
                                Absolute number of the first item on this page
                            </entry>
                        </row>
                        <row>
                            <entry>firstPageInRange</entry>
                            <entry>integer</entry>
                            <entry>
                                First page in the range returned by the 
                                scrolling style
                            </entry>
                        </row>
                        <row>
                            <entry>current</entry>
                            <entry>integer</entry>
                            <entry>Current page number</entry>
                        </row>
                        <row>
                            <entry>currentItemCount</entry>
                            <entry>integer</entry>
                            <entry>Number of items on this page</entry>
                        </row>
                        <row>
                            <entry>last</entry>
                            <entry>integer</entry>
                            <entry>Last page number</entry>
                        </row>
                        <row>
                            <entry>lastItemNumber</entry>
                            <entry>integer</entry>
                            <entry>
                                Absolute number of the last item on this page
                            </entry>
                        </row>
                        <row>
                            <entry>lastPageInRange</entry>
                            <entry>integer</entry>
                            <entry>
                                Last page in the range returned by the 
                                scrolling style
                            </entry>
                        </row>
                        <row>
                            <entry>next</entry>
                            <entry>integer</entry>
                            <entry>Next page number</entry>
                        </row>
                        <row>
                            <entry>pageCount</entry>
                            <entry>integer</entry>
                            <entry>Number of pages</entry>
                        </row>
                        <row>
                            <entry>pagesInRange</entry>
                            <entry>array</entry>
                            <entry>
                                Array of pages returned by the scrolling style
                            </entry>
                        </row>
                        <row>
                            <entry>previous</entry>
                            <entry>integer</entry>
                            <entry>Previous page number</entry>
                        </row>
                        <row>
                            <entry>totalItemCount</entry>
                            <entry>integer</entry>
                            <entry>Total number of items</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </sect3>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->