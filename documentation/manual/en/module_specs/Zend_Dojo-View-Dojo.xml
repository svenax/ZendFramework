<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect2 id="zend.dojo.view.dojo">
    <title>dojo() View Helper</title>

    <para>
        The <code>dojo()</code> view helper is intended to simplify setting up
        the Dojo environment, including the following responsibilities:
    </para>

    <itemizedlist>
        <listitem><para>Specifying either a CDN or a local path to a Dojo
                install.</para></listitem>
        <listitem><para>Specifying paths to custom Dojo modules.</para></listitem>
        <listitem><para>Specifying dojo.require statements.</para></listitem>
        <listitem><para>Specifying dijit stylesheet themes to use.</para></listitem>
        <listitem><para>Specifying dojo.addOnLoad() events.</para></listitem>
    </itemizedlist>

    <para>
        The <code>dojo()</code> view helper implementation is an example of a
        placeholder implementation. The data set in it persists between view
        objects and may be directly echoed from your layout script.
    </para>

    <example id="zend.dojo.view.dojo.usage">
        <title>dojo() View Helper Usage Example</title>

        <para>
            For this example, let's assume the developer will be using Dojo from
            a local path, will require several dijits, and will be
            utilizing the Tundra dijit theme.
        </para>

        <para>
            On many pages, the developer may not utilize Dojo at all. So, we
            will first focus on a view script where Dojo is needed and then on the
            layout script, where we will setup some of the Dojo environment and
            then render it.
        </para>

        <para>
            First, we need to tell our view object to use the Dojo view helper
            paths. This can be done in your bootstrap or an early-running
            plugin; simply grab your view object and execute the following:
        </para>

        <programlisting role="php"><![CDATA[
$view->addHelperPath('Zend/Dojo/View/Helper/', 'Zend_Dojo_View_Helper');
]]></programlisting>

        <para>
            Next, the view script. In this case, we're going to specify
            that we will be using a FilteringSelect -- which will consume a
            custom store based on QueryReadStore, which we'll call
            'PairedStore' and store in our 'custom' module.
        </para>

        <programlisting role="php"><![CDATA[
<?php // setup data store for FilteringSelect ?>
<div dojoType="custom.PairedStore" jsId="stateStore"
    url="/data/autocomplete/type/state/format/ajax"
    requestMethod="get"></div>

<?php // Input element: ?>
State: <input id="state" dojoType="dijit.form.FilteringSelect"
    store="stateStore" pageSize="5" />

<?php // setup required dojo elements:
$this->dojo()->enable()
             ->setDjConfigOption('parseOnLoad', true)
             ->registerModulePath('custom', '../custom/')
             ->requireModule('dijit.form.FilteringSelect')
             ->requireModule('custom.PairedStore'); ?>
]]></programlisting>

        <para>
            In our layout script, we'll then check to see if Dojo is enabled,
            and, if so, we'll do some more general configuration and assemble
            it:
        </para>

        <programlisting role="php"><![CDATA[
<?php echo $this->doctype() ?>
<html>
<head>
    <?php echo $this->headTitle() ?>
    <?php echo $this->headMeta() ?>
    <?php echo $this->headLink() ?>
    <?php echo $this->headStyle() ?>
<?php if ($this->dojo()->isEnabled()){
    $this->dojo()->setLocalPath('/js/dojo/dojo.js')
                 ->addStyleSheetModule('dijit.themes.tundra');
    echo $this->dojo();
   }
?>
    <?php echo $this->headScript() ?>
</head>
<body class="tundra">
    <?php echo $this->layout()->content ?>
    <?php echo $this->inlineScript() ?>
</body>
</html>
]]></programlisting>

        <para>
            At this point, you only need to ensure that your files are in the
            correct locations and that you've created the end point action for
            your FilteringSelect!
        </para>
    </example>

    <sect3 id="zend.dojo.view.dojo.declarative">
        <title>Programmatic and Declarative Usage of Dojo</title>

        <para>
            Dojo allows both <emphasis>declarative</emphasis> and
            <emphasis>programmatic</emphasis> usage of many of its features.
            <emphasis>Declarative</emphasis> usage uses standard HTML elements
            with non-standard attributes that are parsed when the page is
            loaded. While this is a powerful and simple syntax to utilize, for
            many developers this can cause issues with page validation.
        </para>

        <para>
            <emphasis>Programmatic</emphasis> usage allows the developer to
            decorate existing elements by pulling them by ID or CSS selectors
            and passing them to the appropriate object constructors in Dojo.
            Because no non-standard HTML attributes are used, pages continue to
            validate.
        </para>

        <para>
            In practice, both use cases allow for graceful degradation when
            javascript is disabled or the various Dojo script resources are
            unreachable. To promote standards and document validation,
            Zend Framework uses programmatic usage by default; the various view
            helpers will generate javascript and push it to the
            <code>dojo()</code> view helper for inclusion when rendered.
        </para>

        <para>
            Developers using this technique may also wish to explore the option
            of writing their own programmatic decoration of the page. One
            benefit would be the ability to specify handlers for dijit events.
        </para>

        <para>
            To allow this, as well as the ability to use declarative syntax,
            there are a number of static methods available to set this behavior
            globally.
        </para>

        <example id="zend.dojo.view.dojo.declarative.usage">
            <title>Specifying Declarative and Programmatic Dojo Usage</title>

            <para>
                To specify declarative usage, simply call the static
                <code>setUseDeclarative()</code> method:
            </para>

            <programlisting role="php"><![CDATA[
Zend_Dojo_View_Helper_Dojo::setUseDeclarative();
]]></programlisting>

            <para>
                If you decide instead to use programmatic usage, call the static
                <code>setUseProgrammatic()</code> method:
            </para>

            <programlisting role="php"><![CDATA[
Zend_Dojo_View_Helper_Dojo::setUseProgrammatic();
]]></programlisting>

            <para>
                Finally, if you want to create your own programmatic rules, you
                should specify programmatic usage, but pass in the value '-1';
                in this situation, no javascript for decorating any dijits used
                will be created.
            </para>

            <programlisting role="php"><![CDATA[
Zend_Dojo_View_Helper_Dojo::setUseProgrammatic(-1);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.view.dojo.themes">
        <title>Themes</title>

        <para>
            Dojo allows the creation of themes for its dijits (widgets). You may
            select one by passing in a module path:
        </para>

        <programlisting role="php"><![CDATA[
$view->dojo()->addStylesheetModule('dijit.themes.tundra');
]]></programlisting>

        <para>
            The module path is discovered by using the character '.' as a
            directory separator and using the last value in the list as the name
            of the CSS file in that theme directory to use; in the example
            above, Dojo will look for the theme in
            'dijit/themes/tundra/tundra.css'.
        </para>

        <para>
            When using a theme, it is important to remember to pass the theme
            class to, at the least, a container surrounding any dijits you are
            using; the most common use case is to pass it in the body:
        </para>

        <programlisting role="html"><![CDATA[
<body class="tundra">
]]></programlisting>
    </sect3>

    <sect3 id="zend.dojo.view.dojo.layers">
        <title>Using Layers (Custom Builds)</title>

        <para>
            By default, when you use a dojo.require statement, dojo will make a
            request back to the server to grab the appropriate javascript file.
            If you have many dijits in place, this results in many requests to
            the server -- which is not optimal.
        </para>

        <para>
            Dojo's answer to this is to provide the ability to create
            <emphasis>custom builds</emphasis>. Builds do several things:
        </para>

        <itemizedlist>
            <listitem><para>
                Groups required files into <emphasis>layers</emphasis>; a layer
                lumps all required files into a single JS file. (Hence the name
                of this section.)
            </para></listitem>

            <listitem><para>
                "Interns" non-javascript files used by dijits (typically,
                template files). These are also grouped in the same JS file as
                the layer.
            </para></listitem>

            <listitem><para>
                Passes the file through ShrinkSafe, which strips whitespace and
                comments, as well as shortens variable names.
            </para></listitem>
        </itemizedlist>

        <para>
            Some files can not be layered, but the build process will create a
            special release directory with the layer file and all other files.
            This allows you to have a slimmed-down distribution customized for
            your site or application needs.
        </para>

        <para>
            To use a layer, the <code>dojo()</code> view helper has a
            <code>addLayer()</code> method for adding paths to required layers:
        </para>

        <programlisting role="html"><![CDATA[
$view->dojo()->addLayer('/js/foo/foo.js');
]]></programlisting>

        <para>
            For more information on creating custom builds, please <ulink
                url="http://dojotoolkit.org/book/dojo-book-0-9/part-4-meta-dojo/package-system-and-custom-builds">refer
            to the Dojo build documentation</ulink>.
        </para>
    </sect3>

    <sect3 id="zend.dojo.view.dojo.methods">
        <title>Methods Available</title>

        <para>
            The <code>dojo()</code> view helper always returns an instance of
            the dojo placeholder container. That container object has the
            following methods available:
        </para>

        <itemizedlist>
            <listitem><para><code>setView(Zend_View_Interface $view)</code>: set
                    a view instance in the container.</para></listitem>
            <listitem><para><code>enable()</code>: explicitly enable Dojo
                    integration.</para></listitem>
            <listitem><para><code>disable()</code>: disable Dojo
                    integration.</para></listitem>
            <listitem><para><code>isEnabled()</code>: determine whether or not
                    Dojo integration is enabled.</para></listitem>
            <listitem><para><code>requireModule($module)</code>: setup a
                    <code>dojo.require</code> statement.</para></listitem>
            <listitem><para><code>getModules()</code>: determine what modules
                    have been required.</para></listitem>
            <listitem><para><code>registerModulePath($module, $path)</code>:
                    register a custom Dojo module path.</para></listitem>
            <listitem><para><code>getModulePaths()</code>: get list of
                    registered module paths.</para></listitem>
            <listitem><para><code>addLayer($path)</code>: add a layer (custom
                    build) path to use.</para></listitem>
            <listitem><para><code>getLayers()</code>: get a list of all
                    registered layer paths (custom builds).</para></listitem>
            <listitem><para><code>removeLayer($path)</code>: remove the layer
                    that matches <code>$path</code> from the list of registered
                    layers (custom builds).</para></listitem>
            <listitem><para><code>setCdnBase($url)</code>: set the base URL for
                    a CDN; typically, one of the
                    <classname>Zend_Dojo::CDN_BASE_AOL</classname> or
                    <classname>Zend_Dojo::CDN_BASE_GOOGLE</classname>, but it only needs
                    to be the URL string prior to the version number.</para></listitem>
            <listitem><para><code>getCdnBase()</code>: retrieve the base CDN url
                    to utilize.</para></listitem>
            <listitem><para><code>setCdnVersion($version = null)</code>: set
                    which version of Dojo to utilize from the CDN.</para></listitem>
            <listitem><para><code>getCdnVersion()</code>: retrieve what
                    version of Dojo from the CDN will be used.</para></listitem>
            <listitem><para><code>setCdnDojoPath($path)</code>: set the relative
                    path to the dojo.js or dojo.xd.js file on a CDN; typically,
                    one of the <classname>Zend_Dojo::CDN_DOJO_PATH_AOL</classname> or
                    <classname>Zend_Dojo::CDN_DOJO_PATH_GOOGLE</classname>, but it only
                    needs to be the path string following the version
                    number.</para></listitem>
            <listitem><para><code>getCdnDojoPath()</code>: retrieve the last
                    path segment of the CDN url pointing to the dojo.js
                    file.</para></listitem>
            <listitem><para><code>useCdn()</code>: tell the container to
                    utilize the CDN; implicitly enables integration.</para></listitem>
            <listitem><para><code>setLocalPath($path)</code>: tell the container
                    the path to a local Dojo install (should be a path relative
                    to the server, and contain the dojo.js file itself);
                    implicitly enables integration.</para></listitem>
            <listitem><para><code>getLocalPath()</code>: determine what local
                    path to Dojo is being used.</para></listitem>
            <listitem><para><code>useLocalPath()</code>: is the integration
                    utilizing a Dojo local path?</para></listitem>
            <listitem><para><code>setDjConfig(array $config)</code>: set
                    dojo/dijit configuration values (expects assoc
                    array).</para></listitem>
            <listitem><para><code>setDjConfigOption($option, $value)</code>: set
                    a single dojo/dijit configuration value.</para></listitem>
            <listitem><para><code>getDjConfig()</code>: get all dojo/dijit
                    configuration values.</para></listitem>
            <listitem><para><code>getDjConfigOption($option, $default =
                    null)</code>: get a single dojo/dijit configuration
                    value.</para></listitem>
            <listitem><para><code>addStylesheetModule($module)</code>: add a
                    stylesheet based on a module theme.</para></listitem>
            <listitem><para><code>getStylesheetModules()</code>: get stylesheets
                    registered as module themes.</para></listitem>
            <listitem><para><code>addStylesheet($path)</code>: add a local
                    stylesheet for use with Dojo.</para></listitem>
            <listitem><para><code>getStylesheets()</code>: get local Dojo
                    stylesheets.</para></listitem>
            <listitem><para><code>addOnLoad($spec, $function = null)</code>: add
                    a lambda for dojo.onLoad to call. If one argument is passed,
                    it is assumed to be either a function name or a javascript
                    closure. If two arguments are passed, the first is assumed
                    to be the name of an object instance variable and the second
                    either a method name in that object or a closure to utilize
                    with that object.</para></listitem>
            <listitem><para><code>prependOnLoad($spec, $function = null)</code>:
                    exactly like <code>addOnLoad()</code>, excepts prepends to
                    beginning of onLoad stack.</para></listitem>
            <listitem><para><code>getOnLoadActions()</code>: retrieve all
                    dojo.onLoad actions registered with the container. This will
                    be an array of arrays.</para></listitem>
            <listitem><para><code>onLoadCaptureStart($obj = null)</code>:
                    capture data to be used as a lambda for dojo.onLoad(). If
                    $obj is provided, the captured JS code will be considered a
                    closure to use with that Javascript object.</para></listitem>
            <listitem><para><code>onLoadCaptureEnd($obj = null)</code>: finish
                    capturing data for use with dojo.onLoad().</para></listitem>
            <listitem><para><code>javascriptCaptureStart()</code>:
                    capture arbitrary javascript to be included with Dojo JS
                    (onLoad, require, etc. statements).</para></listitem>
            <listitem><para><code>javascriptCaptureEnd()</code>: finish
                    capturing javascript.</para></listitem>
            <listitem><para><code>__toString()</code>: cast the container to a
                    string; renders all HTML style and script elements.</para></listitem>
        </itemizedlist>
    </sect3>
</sect2>
<!--
vim:se ts=4 sw=4 et:
-->
