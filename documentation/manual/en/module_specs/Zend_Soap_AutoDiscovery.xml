<sect1 id="zend.soap.autodiscovery">
    <title>AutoDiscovery.</title>

    <sect2 id="zend.soap.autodiscovery.introduction">
        <title>AutoDiscovery. Introduction</title>
        <para>
            SOAP functionality implemented within Zend Framework is intended to make all steps
            required for SOAP communications more simple.
        </para>

        <para>
            SOAP is language independent protocol. So it may be used not only for PHP-to-PHP communications.
        </para>
        
        <para>
            There are three configurations for SOAP applications where Zend Framework may be utilized:
            <orderedlist>
                <listitem>
                    <simpara>SOAP server PHP application &lt;---&gt; SOAP client PHP application</simpara>
                </listitem>
                <listitem>
                    <simpara>SOAP server non-PHP application &lt;---&gt; SOAP client PHP application</simpara>
                </listitem>
                <listitem>
                    <simpara>SOAP server PHP application &lt;---&gt; SOAP client non-PHP application</simpara>
                </listitem>
            </orderedlist>
        </para>
        
        <para>
            We always have to know, which functionality is provided by SOAP server to operate with it.
            <ulink url="http://www.w3.org/TR/wsdl">WSDL</ulink> is used to describe network service API
            in details.  
        </para>

        <para>
            WSDL language is complex enough (see <ulink url="http://www.w3.org/TR/wsdl">http://www.w3.org/TR/wsdl</ulink> 
            for the details). So it's difficult to prepare correct WSDL description.      
        </para>
        
        <para>
            Another problem is synchronizing changes in network service API with already existing WSDL.      
        </para>

        <para>
            Both these problem may be solved by WSDL autogeneration. A prerequisite for this is a SOAP server autodiscovery.
            It constructs object similar to object used in SOAP server application, extracts necessary information and generates 
            correct WSDL using this information. 
        </para>

        <para>
            There are two ways for using Zend Framework for SOAP server application:     
            <itemizedlist>
                <listitem>
                    <para>Use separated class.</para>
                </listitem>
                <listitem>
                    <para>Use set of functions</para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            Both methods are supported by Zend Framework Autodiscovery functionality. 
        </para>

        <para>
            Zend_Soap_AutoDiscovery class also supports datatypes mapping from PHP to <ulink url="http://www.w3.org/TR/xmlschema-2/">XSD types</ulink>. 
        </para>


        <para>
            Here is an example of common usage of the autodiscovery functionality:
            <programlisting role="php"><![CDATA[
class My_SoapServer_Class {
...
}

$autodiscover = new Zend_Soap_AutoDiscover();
$autodiscover->setClass('My_SoapServer_Class');
$autodiscover->handle();
]]>
            </programlisting>
        </para>
    </sect2>


    <sect2 id="zend.soap.autodiscovery.class">
        <title>Class autodiscovering.</title>

        <para>
            If class is used to provide SOAP server functionality, then the same class should be provided to 
            <code>Zend_Soap_AutoDiscovery</code> for WSDL generation:
            <programlisting role="php"><![CDATA[
$autodiscover = new Zend_Soap_AutoDiscover();
$autodiscover->setClass('My_SoapServer_Class');
$autodiscover->handle();
]]>
            </programlisting>
        </para>
        
        <para>
            The following rules are used while WSDL generation:
            <itemizedlist>
                <listitem>
                    <para>Generated WSDL describes an RPC style Web Service.</para>
                </listitem>
                <listitem>
                    <para>Class name is used as a name of the Web Service being described.</para>
                </listitem>
                <listitem>
                    <para>
                        <code>'http://'  .$_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME']</code> is used 
                        as an URI where the WSDL is available.
                    </para>
                    <para>
                         It's also used as a target namespace for all service related names (including 
                         described complex types).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Class methods are joined into one <ulink url="http://www.w3.org/TR/wsdl#_porttypes">Port Type</ulink>.
                    </para>
                    <para>
                        <code>$className . 'Port'</code> is used as Port Type name.
                    </para>
                </listitem>
                <listitem>
                    <para>Each class method is registered as a corresponding port operation.</para>
                </listitem>
                <listitem>
                    <para>Each method prototype generates corresponding Request/Response messages.</para>
                    <para>Method may have several prototypes if some method parameters are optional.</para>
                </listitem>
            </itemizedlist>
        </para>
        
        <note>
            <title>Important!</title>
            <para>
                WSDL autodiscovery utilizes the PHP docblocks provided by the developer to determine the parameter and return types. 
                In fact, for scalar types, this is the only way to determine the parameter types, and for return types, this is the 
                only way to determine them.
            </para>
            <para>
                That means, providing correct and fully detailed docblocks is not only best practice, but is required for discovered class. 
            </para>
        </note>
    </sect2>


    <sect2 id="zend.soap.autodiscovery.functions">
        <title>Functions autodiscovering.</title>

        <para>
            If set of functions are used to provide SOAP server functionality, then the same set should be provided to 
            <code>Zend_Soap_AutoDiscovery</code> for WSDL generation:
            <programlisting role="php"><![CDATA[
$autodiscover = new Zend_Soap_AutoDiscover();
$autodiscover->addFunction('function1');
$autodiscover->addFunction('function2');
$autodiscover->addFunction('function3');
...
$autodiscover->handle();
]]>
            </programlisting>
        </para>
        
        <para>
            The following rules are used while WSDL generation:
            <itemizedlist>
                <listitem>
                    <para>Generated WSDL describes an RPC style Web Service.</para>
                </listitem>
                <listitem>
                    <para>Current script name is used as a name of the Web Service being described.</para>
                </listitem>
                <listitem>
                    <para>
                        <code>'http://'  .$_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME']</code> is used 
                        as an URI where the WSDL is available.
                    </para>
                    <para>
                         It's also used as a target namespace for all service related names (including 
                         described complex types).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Functions are joined into one <ulink url="http://www.w3.org/TR/wsdl#_porttypes">Port Type</ulink>.
                    </para>
                    <para>
                        <code>$functionName . 'Port'</code> is used as Port Type name.
                    </para>
                </listitem>
                <listitem>
                    <para>Each function is registered as a corresponding port operation.</para>
                </listitem>
                <listitem>
                    <para>Each function prototype generates corresponding Request/Response messages.</para>
                    <para>Function may have several prototypes if some method parameters are optional.</para>
                </listitem>
            </itemizedlist>
        </para>
        
        <note>
            <title>Important!</title>
            <para>
                WSDL autodiscovery utilizes the PHP docblocks provided by the developer to determine the parameter and return types. 
                In fact, for scalar types, this is the only way to determine the parameter types, and for return types, this is the 
                only way to determine them.
            </para>
            <para>
                That means, providing correct and fully detailed docblocks is not only best practice, but is required for discovered class. 
            </para>
        </note>
    </sect2>


    <sect2 id="zend.soap.autodiscovery.datatypes">
        <title>Autodiscovering. Datatypes.</title>

        <para>
            Input/output datatypes are converted into network service types using the following mapping:

            <itemizedlist>
                <listitem>
                    <para>PHP strings &lt;-&gt; <code>xsd:string</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP integers &lt;-&gt; <code>xsd:int</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP floats and doubles &lt;-&gt; <code>xsd:float</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP booleans &lt;-&gt; <code>xsd:boolean</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP arrays &lt;-&gt; <code>soap-enc:Array</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP object &lt;-&gt; <code>xsd:struct</code>.</para>
                </listitem>
                <listitem>
                    <para>
                        PHP class &lt;-&gt; <code>tns:$className</code>
                        <footnote>
                            <para>
                                If <code>Zend_Soap_AutoDiscover</code> object is created with <code>$extractComplexTypes</code>
                                parameter turned off, then classes are translated to <code>xsd:anyType</code>.
                            </para>
                            <para>
                                Otherwise, <code>tns:$className</code> is used and type is described in details in &lt;types&gt;
                                WSDL section.
                            </para>
                        </footnote>.
                    </para>
                </listitem>
                <listitem>
                    <para>PHP void &lt;-&gt; empty type.</para>
                </listitem>
                <listitem>
                    <para>If type is not matched to any of these types by some reason, then <code>xsd:anyType</code> is used.</para>
                </listitem>
            </itemizedlist>
            
            Where <code>xsd:</code> is "http://www.w3.org/2001/XMLSchema" namespace, 
            <code>soap-enc:</code> is a "http://schemas.xmlsoap.org/soap/encoding/" namespace,
            <code>tns:</code> is a "target namespace" for a service.
        </para>
    </sect2>
</sect1>
