<sect1 id="zend.mime.message">
    <title>Zend_Mime_Message</title>

    <sect2 id="zend.mime.message.introduction">
      <title>Introduction</title>

      <para><code>Zend_Mime_Message</code> represents a MIME compliant message
      that can contain one or more separate Parts (Represented as <link
      linkend="zend.mime.part"><code>Zend_Mime_Part</code></link> objects). With
      <code>Zend_Mime_Message</code>, MIME compliant multipart messages can be generated from
      <code>Zend_Mime_Part</code> objects. Encoding and Boundary handling are handled transparently
      by the class. <code>Zend_Mime_Message</code> objects can also be reconstructed from given
      strings (experimental). Used by <link linkend="zend.mail"><code>Zend_Mail</code></link>.
      </para>
    </sect2>

    <sect2 id="zend.mime.message.instantiation">
        <title>Instantiation</title>
        <para>
            There is no explicit constructor for <code>Zend_Mime_Message</code>.
        </para>
    </sect2>

    <sect2 id="zend.mime.message.addparts">
        <title>Adding MIME Parts</title>

        <para><link linkend="zend.mime.part"><code>Zend_Mime_Part</code></link>
        Objects can be added to a given <code>Zend_Mime_Message</code> object by calling
        <code>-&gt;addPart($part)</code></para>

    <para>An array with all <link linkend="zend.mime.part"><code>Zend_Mime_Part</code></link>
    objects in the <code>Zend_Mime_Message</code> is returned
        from the method <code>-&gt;getParts()</code>.  The Zend_Mime_Part objects
        can then be changed since they are stored in the array as references. If
        parts are added to the array or the sequence is changed, the array needs
        to be given back to the <link linkend="zend.mime.part"><code>Zend_Mime_Part</code></link>
        object by calling <code>-&gt;setParts($partsArray)</code>.</para>

        <para>The function <code>-&gt;isMultiPart()</code> will return true if
        more than one part is registered with the <code>Zend_Mime_Message</code> object and thus
        the object would generate a Multipart-Mime-Message when generating the
        actual output.</para>
    </sect2>

    <sect2 id="zend.mime.message.bondary">
        <title>Boundary handling</title>

        <para><code>Zend_Mime_Message</code> usually creates and uses its own
        <code>Zend_Mime</code> Object to generate a boundary. If you need to
        define the boundary or want to change the behaviour of the <code>Zend_Mime</code> object
        used by <code>Zend_Mime_Message</code>, you can instantiate the <code>Zend_Mime</code>
        object yourself and then register it to <code>Zend_Mime_Message</code>.
        Usually you will not need to do this. <code>-&gt;setMime(Zend_Mime
        $mime)</code> sets a special instance of <code>Zend_Mime</code> to be used
        by this <code>Zend_Mime_Message</code></para>

        <para><code>-&gt;getMime()</code> returns the instance of
        <code>Zend_Mime</code> that will be used to render the message when
        <code>generateMessage()</code> is called.</para>

        <para><code>-&gt;generateMessage()</code> renders the <code>Zend_Mime_Message</code>
        content to a string.</para>
    </sect2>

    <sect2 id="zend.mime.message.parse">
        <title>parsing a string to create a Zend_Mime_Message object
        (experimental)</title>

        <para>A given MIME compliant message in string form can be used to
        reconstruct a <code>Zend_Mime_Message</code> Object from it.
        <code>Zend_Mime_Message</code> has a static factory Method to parse this
        String and return a <code>Zend_Mime_Message</code> Object.</para>

        <para><code>Zend_Mime_Message::createFromMessage($str, $boundary)</code>
        decodes the given string and returns a <code>Zend_Mime_Message</code>
        Object that can then be examined using <code>-&gt;getParts()</code></para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->