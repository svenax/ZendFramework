<sect3 id="zend.controller.router.routes.hostname">
    <title>Zend_Controller_Router_Route_Hostname</title>

    <para>
        <code>Zend_Controller_Router_Hostname</code> is the hostname route of
        the framework. It works similar to the standard route, but it works on
        the with the hostname of the called URL instead with the path.
    </para>

    <para>
        Let's use the example from the standard route and see how it would look
        like in a hostname bawsed way. Instead of calling the user via a path,
        we'd want to have a user to be able to call
        <code>http://martel.users.example.com</code> to see the information
        about the user "martel":
    </para>

    <programlisting role="php"><![CDATA[
$hostnameRoute = new Zend_Controller_Router_Route_Hostname(
    ':username.users.example.com',
    array(
        'controller' => 'profile',
        'action'     => 'userinfo'
    )
);

$plainPathRoute = new Zend_Controller_Router_Route_Static('');

$router->addRoute('user', $hostnameRoute->chain($plainPathRoute);
]]>
    </programlisting>

    <para>
        The first parameter in the <code>Zend_Controller_Router_Route_Hostname</code>
        constructor is a route definition that will be matched to a hostname.  Route
        definitions consist of static and dynamic parts separated by the dot
        ('.') character. Dynamic parts, called variables, are marked by
        prepending a colon to the variable name: <code>:username</code>.
        Static parts are just simple text: <code>user</code>.
    </para>

    <para>
        Hostname routes can, but never should be used as is. The reason behind
        that is, that a hostname route alone would match any path. So what you
        have to do is to chain a path route to the hostname route. This is done
        like in the example by calling <code>$hostnameRoute->chain($pathRoute);</code>.
        By doing this, <code>$hostnameRoute</code> isn't modified, but a new
        route (<code>Zend_Controller_Router_Route_Chain</code>) is returned,
        which can then be given to the router. 
    </para>
    
    <note>
        <title>Parameter priority</title>
        <para>
            When chaining routes like the hostname route and the path route
            together, the parameters of the hostname route have a higher
            priority than the parameters of the path route. Thus if you define
            a controller in the hostname and in the path route, the controller
            of the hostname route will be selected.
        </para>
    </note>
    
    <sect4 id="zend.controller.router.routes.hostname.config">
        <title>Hostname routes via Zend_Config</title>

        <para>
            At the moment, it is not possible to chain hostname routes and
            path routes together via Zend_Config. This means, that you can create
            both the hostname and the path routes in a Zend_Config object, but
            you have to chain them together in you code. The config implementation
            will follow in a later version of Zend Framework.
        </para>
    </sect4>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->
