<sect1 id="zend.dojo.form" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Dojo Form Elements and Decorators</title>

    <para>
        Building on the <link linkend="zend.dojo.view.dijit">dijit view
        helpers</link>, the <code>Zend_Dojo_Form</code> family of classes
        provides the ability to utilize Dijits natively within your forms.
    </para>

    <para>
        There are three options for utilizing the Dojo form elements with your
        forms:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                Use <code>Zend_Dojo::enableForm()</code>. This will add plugin
                paths for decorators and elements to all attached form items,
                recursively. Additionally, it will dojo-enable the view object.
                Note, however, that any sub forms you attach
                <emphasis>after</emphasis> this call will also need to be
                passed through <code>Zend_Dojo::enableForm()</code>.
            </para>
        </listitem>

        <listitem>
            <para>
                Use the Dojo-specific form and subform implementations,
                <code>Zend_Dojo_Form</code> and
                <code>Zend_Dojo_Form_SubForm</code> respectively. These can be
                used as drop-in replacements for <code>Zend_Form</code> and
                <code>Zend_Form_SubForm</code>, contain all the appropriate
                decorator and element paths, set a Dojo-specific default
                DisplayGroup class, and dojo-enable the view.
            </para>
        </listitem>

        <listitem>
            <para>
                Last, and most tedious, you can set the appropriate decorator
                and element paths yourself, set the default DisplayGroup class,
                and dojo-enable the view. Since
                <code>Zend_Dojo::enableForm()</code> does this already, there's
                little reason to go this route.
            </para>
        </listitem>
    </itemizedlist>

    <example id="zend.dojo.form.enable">
        <title>Enabling Dojo in your existing forms</title>

        <para>
            "But wait," you say; "I'm already extending Zend_Form with my own
            custom form class! How can I Dojo-enable it?'"
        </para>

        <para>
            First, and easiest, simply change from extending
            <code>Zend_Form</code> to extending <code>Zend_Dojo_Form</code>,
            and update any places where you instantiate
            <code>Zend_Form_SubForm</code> to instantiate
            <code>Zend_Dojo_Form_SubForm</code>.
        </para>

        <para>
            A second approach is to call <code>Zend_Dojo::enableForm()</code>
            within your custom form's <code>init()</code> method; when the form
            definition is complete, loop through all SubForms to dojo-enable
            them:
        </para>

        <programlisting role="php"><![CDATA[
class My_Form_Custom extends Zend_Form
{
    public function init()
    {
        // Dojo-enable the form:
        Zend_Dojo::enableForm($this);

        // ... continue form definition from here

        // Dojo-enable all sub forms:
        foreach ($this->getSubForms() as $subForm) {
            Zend_Dojo::enableForm($subForm);
        }
    }
}
]]></programlisting>
    </example>

    <para>
        Usage of the dijit-specific form decorators and elements is just like
        using any other form decorator or element.
    </para>

    <xi:include href="Zend_Dojo-Form-Decorators.xml" />
    <xi:include href="Zend_Dojo-Form-Elements.xml" />
    <xi:include href="Zend_Dojo-Form-Examples.xml" />
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
