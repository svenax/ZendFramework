<sect1 id="zend.auth.adapter.dbtable">

    <title>Database Table Authentication</title>

    <sect2 id="zend.auth.adapter.dbtable.introduction">

        <title>Introduction</title>

        <para>
            <code>Zend_Auth_Adapter_DbTable</code> provides the ability to authenticate against credentials stored in a
            database table. Because <code>Zend_Auth_Adapter_DbTable</code> requires an instance of
            <code>Zend_Db_Adapter_Abstract</code> to be passed to its constructor, each instance is bound to a
            particular database connection. Other configuration options may be set through the constructor and through
            instance methods, one for each option.
        </para>

        <para>
            The available configuration options include:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>tableName</code>: This is the name of the database table that contains the authentication
                        credentials, and against which the database authentication query is performed.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>identityColumn</code>: This is the name of the database table column used to represent the
                        identity. The identity column must contain unique values, such as a username or e-mail address.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>credentialColumn</code>: This is the name of the database table column used to represent
                        the credential. Under a simple identity and password authentication scheme, the credential value
                        corresponds to the password. See also the <code>credentialTreatment</code> option.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>credentialTreatment</code>: In many cases, passwords and other sensitive data are
                        encrypted, hashed, encoded, obscured, or otherwise treated through some function or algorithm.
                        By specifying a parameterized treatment string with this method, such as <code>'MD5(?)'</code>
                        or <code>'PASSWORD(?)'</code>, a developer may apply such arbitrary SQL upon input credential
                        data. Since these functions are specific to the underlying RDBMS, check the database manual for
                        the availability of such functions for your database system.
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <example id="zend.auth.adapter.dbtable.introduction.example.basic_usage">

            <title>Basic Usage</title>

            <para>
                As explained in the introduction, the <code>Zend_Auth_Adapter_DbTable</code> constructor requires an
                instance of <code>Zend_Db_Adapter_Abstract</code> that serves as the database connection to which the
                authentication adapter instance is bound. First, the database connection should be created.
            </para>

            <para>
                The following code creates an adapter for an in-memory database, creates a simple table schema, and
                inserts a row against which we can perform an authentication query later. This example requires the PDO
                SQLite extension to be available:

                <programlisting role="php"><![CDATA[<?php
// Create an in-memory SQLite database connection
require_once 'Zend/Db/Adapter/Pdo/Sqlite.php';
$dbAdapter = new Zend_Db_Adapter_Pdo_Sqlite(array('dbname' => ':memory:'));

// Build a simple table creation query
$sqlCreate = 'CREATE TABLE [users] ( '
           . '[id] INTEGER  NOT NULL PRIMARY KEY, '
           . '[username] VARCHAR(50) UNIQUE NOT NULL, '
           . '[password] VARCHAR(32) NULL, '
           . '[real_name] VARCHAR(150) NULL)';

// Create the authentication credentials table
$dbAdapter->query($sqlCreate);

// Build a query to insert a row for which authentication may succeed
$sqlInsert = 'INSERT INTO users (username, password, real_name) '
           . 'VALUES ("my_username", "my_password", "My Real Name")';

// Insert the data
$dbAdapter->query($sqlInsert);]]>
                </programlisting>

            </para>

            <para>
                With the database connection and table data available, an instance of
                <code>Zend_Auth_Adapter_DbTable</code> may be created. Configuration option values may be passed to the
                constructor or deferred as parameters to setter methods after instantiation:

                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Adapter/DbTable.php';

// Configure the instance with constructor parameters...
$authAdapter = new Zend_Auth_Adapter_DbTable($dbAdapter, 'users', 'username', 'password');

// ...or configure the instance with setter methods
$authAdapter = new Zend_Auth_Adapter_DbTable($dbAdapter);
$authAdapter->setTableName('users')
            ->setIdentityColumn('username')
            ->setCredentialColumn('password');]]>
                </programlisting>

            </para>

            <para>
                At this point, the authentication adapter instance is ready to accept authentication queries. In order
                to formulate an authentication query, the input credential values are passed to the adapter prior to
                calling the <code>authenticate()</code> method:

                <programlisting role="php"><![CDATA[<?php
// Set the input credential values (e.g., from a login form)
$authAdapter->setIdentity('my_username')
            ->setCredential('my_password');

// Perform the authentication query, saving the result
$result = $authAdapter->authenticate();]]>
                </programlisting>

            </para>

            <para>
                In addition to the availability of the <code>getIdentity()</code> method upon the authentication result
                object, <code>Zend_Auth_Adapter_DbTable</code> also supports retrieving the table row upon
                authentication success:

                <programlisting role="php"><![CDATA[<?php
// Print the identity
echo $result->getIdentity() . "\n\n";

// Print the result row
print_r($authAdapter->getResultRowObject());

/* Output:
my_username

Array
(
    [id] => 1
    [username] => my_username
    [password] => my_password
    [real_name] => My Real Name
)
*/]]>
                </programlisting>

                Since the table row contains the credential value, it is important to secure the values against
                unintended access.
            </para>

        </example>

    </sect2>

    <sect2 id="zend.auth.adapter.dbtable.advanced.storing_result_row">

        <title>Advanced Use: Persisting a DbTable Result Object</title>

        <para>
            By default, <code>Zend_Auth_Adapter_DbTable</code> returns the identity supplied back to the auth object
            upon successful authentication. Another use case scenario, where developers want to store to the persistent
            storage mechanism of <code>Zend_Auth</code> an identity object containing other useful information, is
            solved by using the <code>getResultRowObject()</code> method to return a <code>stdClass</code> object. The
            following code snippet illustrates its use:

            <programlisting role="php"><![CDATA[<?php
// authenticate with Zend_Auth_Adapter_DbTable
$result = $this->_auth->authenticate($adapter);

if ($result->isValid()) {

    // store the identity as an object where only the username and real_name have been returned
    $this->_auth->getStorage()->write($adapter->getResultRowObject(array('username', 'real_name')));

    // store the identity as an object where the password column has been omitted
    $this->_auth->getStorage()->write($adapter->getResultRowObject(null, 'password'));

    /* ... */

} else {

    /* ... */

}]]>
            </programlisting>

        </para>

    </sect2>

    <sect2 id="zend.auth.adapter.dbtable.advanced.advanced_usage">
        <title>Advanced Usage By Example</title>

        <para>
            While the primary purpose of Zend_Auth (and consequently Zend_Auth_Adapter_DbTable) is primarily
            <emphasis role="strong">authentication</emphasis> and not <emphasis role="strong">authorization</emphasis>,
            there exist a few instances and problems
            that toe the line upon which domain the fit within.  Depending on how you've decided to explain
            your problem, it sometimes makes sense to solve what could look like an authorization problem
            within the authentication adapter.
        </para>

        <para>
            With that bit of a disclaimer out of the way, Zend_Auth_Adapter_DbTable has some built in
            mechanisms that can be leveraged to add additional checks at authentication time to solve
            some common user problems.

            <programlisting role="php"><![CDATA[<?php
// The status field value of an account is not equal to "compromised"
$adapter = new Zend_Auth_Adapter_DbTable($db, 'users', 'username', 'password', 'MD5(?) AND status != "compromised"');

// The active field value of an account is equal to "TRUE"
$adapter = new Zend_Auth_Adapter_DbTable($db, 'users', 'username', 'password', 'MD5(?) AND active = "TRUE"');

]]>
            </programlisting>

        </para>





    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->