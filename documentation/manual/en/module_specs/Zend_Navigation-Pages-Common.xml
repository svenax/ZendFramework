<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect2 id="zend.navigation.pages.common">
    <title>Common page features</title>

    <para>
        All page classes must extend <classname>Zend_Navigation_Page</classname>,
        and will thus share a common set of features and properties. Most notably
        they share the options in the table below and the same initialization
        process.
    </para>

    <para>
        Option keys are mapped to <code>set</code> methods. This means that
        the option <code>order</code> maps to the method <code>setOrder()</code>,
        and <code>reset_params</code> maps to the method
        <code>setResetParams()</code>. If there is no setter method for
        the option, it will be set as a custom property of the page.
    </para>

    <para>
        Read more on extending Zend_Navigation_Page in
        <link linkend="zend.navigation.pages.custom">Creating custom page types</link>.
    </para>

    <table id="zend.navigation.pages.common.options">
        <title>Common page options</title>
        <tgroup cols="4">
            <thead>
                <row>
                    <entry>Key</entry>
                    <entry>Type</entry>
                    <entry>Default</entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><code>label</code></entry>
                    <entry><code>string</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        A page label, such as 'Home' or 'Blog'.
                    </entry>
                </row>
                <row>
                    <entry><code>id</code></entry>
                    <entry><code>string</code> | <code>int</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        An id tag/attribute that may be used when rendering
                        the page, typically in an anchor element.
                    </entry>
                </row>
                <row>
                    <entry><code>class</code></entry>
                    <entry><code>string</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        A CSS class that may be used when rendering the page,
                        typically in an anchor element.
                    </entry>
                </row>
                <row>
                    <entry><code>title</code></entry>
                    <entry><code>string</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        A short page description, typically for using
                        as the <code>title</code> attribute in an anchor.
                    </entry>
                </row>
                <row>
                    <entry><code>target</code></entry>
                    <entry><code>string</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        Specifies a target that may be used for the page,
                        typically in an anchor element.
                    </entry>
                </row>
                <row>
                    <entry><code>rel</code></entry>
                    <entry><code>array</code></entry>
                    <entry><code>array()</code></entry>
                    <entry>
                        Specifies forward relations for the page.
                        Each element in the array is a key-value pair, where the
                        key designates the relation/link type, and the value is
                        a pointer to the linked page. An example of a key-value
                        pair is <code>'alternate' => 'format/plain.html'</code>.
                        To allow full flexbility, there are no restrictions on
                        relation values. The value does not have to be a string.
                        Read more about <code>rel</code> and <code>rev</code> in
                        <link linkend="zend.view.helpers.initial.navigation.links">the
                        section on the Links helper.</link>.
                    </entry>
                </row>
                <row>
                    <entry><code>rev</code></entry>
                    <entry><code>array</code></entry>
                    <entry><code>array()</code></entry>
                    <entry>
                        Specifies reverse relations for the page. Works exactly
                        like <code>rel</code>.
                    </entry>
                </row>
                <row>
                    <entry><code>order</code></entry>
                    <entry><code>string</code> | <code>int</code> | <code>null</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        Works like order for elements in
                        <link linkend="zend.form.quickstart.render">
                        <classname>Zend_Form</classname></link>. If specified,
                        the page will be iterated in a specific order, meaning
                        you can force a page to be iterated before others by
                        setting the <code>order</code> attribute to a low number,
                        e.g. -100. If a <code>string</code> is given, it must
                        parse to a valid <code>int</code>. If <code>null</code>
                        is given, it will be reset, meaning the order in which
                        the page was added to the container will be used.
                    </entry>
                </row>
                <row>
                    <entry><code>resource</code></entry>
                    <entry><code>string</code> | <classname>Zend_Acl_Resource_Interface</classname> | <code>null</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        ACL resource to associate with the page. Read more in
                        <link linkend="zend.view.helpers.initial.navigation.acl">the
                        section on ACL integration in view helpers.</link>.
                    </entry>
                </row>
                <row>
                    <entry><code>privilege</code></entry>
                    <entry><code>string</code> | <code>null</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        ACL privilege to associate with the page. Read more in
                        <link linkend="zend.view.helpers.initial.navigation.acl">the
                        section on ACL integration in view helpers.</link>.
                    </entry>
                </row>
                <row>
                    <entry><code>active</code></entry>
                    <entry><code>bool</code></entry>
                    <entry><code>false</code></entry>
                    <entry>
                        Whether the page should be considered active for the
                        current request. If active is <code>false</code> or not
                        given, MVC pages will check its properties against the
                        request object upon calling <code>$page->isActive()</code>.
                    </entry>
                </row>
                <row>
                    <entry><code>visible</code></entry>
                    <entry><code>bool</code></entry>
                    <entry><code>true</code></entry>
                    <entry>
                        Whether page should be visible for the user, or just
                        be a part of the structure. Invisible pages are skipped
                        by view helpers.
                    </entry>
                </row>
                <row>
                    <entry><code>pages</code></entry>
                    <entry><code>array</code> | <classname>Zend_Config</classname> | <code>null</code></entry>
                    <entry><code>null</code></entry>
                    <entry>
                        Child pages of the page. This could be an <code>array</code>
                        or <classname>Zend_Config</classname> object containing either page
                        options that can be passed to the <code>factory()</code>
                        method, or actual <classname>Zend_Navigation_Page</classname>
                        instances, or a mixture of both.
                    </entry>
                </row>
            </tbody>
        </tgroup>
    </table>

    <note>
        <title>Custom properties</title>
        <para>
            All pages support setting and getting of custom properties by
            use of the magic methods <code>__set($name, $value)</code>,
            <code>__get($name)</code>, <code>__isset($name)</code> and
            <code>__unset($name)</code>. Custom properties may have any value,
            and will be included in the array that is returned from
            <code>$page->toArray()</code>, which means that pages
            can be serialized/deserialized successfully even if the pages
            contains properties that are not native in the page class.
        </para>
        <para>
            Both native and custom properties can be set using
            <code>$page->set($name, $value)</code> and retrieved using
            <code>$page->get($name)</code>, or by using magic methods.
        </para>
    </note>

    <example id="zend.navigation.pages.common.example.customprops">
        <title>Custom page properties</title>

        <para>
            This example shows how custom properties can be used.
        </para>

        <programlisting language="php"><![CDATA[
$page = new Zend_Navigation_Page_Mvc();
$page->foo = 'bar';
$page->meaning = 42;

echo $page->foo;

if ($page->meaning != 42) {
    // action should be taken
}
]]></programlisting>
    </example>
</sect2>