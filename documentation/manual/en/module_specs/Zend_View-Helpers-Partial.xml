<sect3 id="zend.view.helpers.initial.partial">
    <title>Partial Helper</title>

    <para>
        The <code>Partial</code> view helper is used to render a specified
        template within its own variable scope. The primary use is for reusable
        template fragments with which you do not need to worry about variable
        name clashes. Additionally, they allow you to specify partial view
        scripts from specific modules.
    </para>

    <para>
        A sibling to the <code>Partial</code>, the <code>PartialLoop</code> view
        helper allows you to pass iterable data, and render a partial for each
        item.
    </para>

    <example id="zend.view.helpers.initial.partial.usage">
        <title>Basic Usage of Partials</title>

        <para>
            Basic usage of partials is to render a template fragment in its own
            view scope. Consider the following partial script:
        </para>

        <programlisting role="php"><![CDATA[
<?php // partial.phtml ?>
<ul>
    <li>From: <?= $this->escape($this->from) >?</li>
    <li>Subject: <?= $this->escape($this->subject) >?</li>
</ul>
]]></programlisting>

        <para>
            You would then call it from your view script using the following:
        </para>

        <programlisting role="php"><![CDATA[
<?= $this->partial('partial.phtml', array(
    'from' => 'Team Framework', 
    'subject' => 'view partials')); ?>
]]></programlisting>

        <para>
            Which would then render:
        </para>

        <programlisting role="html"><![CDATA[
<ul>
    <li>From: Team Framework</li>
    <li>Subject: view partials</li>
</ul>
]]></programlisting>

    </example>
        <note>
            <title>What is a model?</title>

            <para>
                A model used with the <code>Partial</code> view helper can be
                one of the following:
            </para>

            <itemizedlist>
                <listitem><para>
                        <emphasis>Array</emphasis>. If an array is passed, it
                        should be associative, as its key/value pairs are
                        assigned to the view with keys as view variables.
                </para></listitem>

                <listitem><para>
                        <emphasis>Object implementing toArray()
                            method</emphasis>. If an object is passed an has a
                        <code>toArray()</code> method, the results of
                        <code>toArray()</code> will be assigned to the view
                        object as view variables.
                </para></listitem>

                <listitem><para>
                        <emphasis>Standard object</emphasis>. Any other object
                        will assign the results of
                        <code>object_get_vars()</code> (essentially all public
                        properties of the object) to the view object.
                </para></listitem>
            </itemizedlist>
        </note>

    <example id="zend.view.helpers.initial.partial.partialloop">
        <title>Using PartialLoop to Render Iterable Models</title>

        <para>
            Typically, you'll want to use partials in a loop, to render the same
            content fragment many times; this way you can put large blocks of
            repeated content or complex display logic into a single location.
            However this has a performance impact, as the partial helper needs
            to be invoked once for each iteration.
        </para>

        <para>
            The <code>PartialLoop</code> view helper helps solve this issue. It
            allows you to pass an iterable item (array or object implementing
            <code>Iterator</code>) as the model. It then iterates over this,
            passing, the items to the partial script as the model. Items in the
            iterator may be any model the <code>Partial</code> view helper
            allows.
        </para>

        <para>
            Let's assume the following partial view script:
        </para>

        <programlisting role="php"><![CDATA[
<? // partialLoop.phtml ?>
    <dt><?= $this->key ?></dt>
    <dd><?= $this->value ?></dd>

]]></programlisting>

        <para>
            And the following "model":
        </para>

        <programlisting role="php"><![CDATA[<?php
$model = array(
    array('key' => 'Mammal', 'value' => 'Camel'),
    array('key' => 'Bird', 'value' => 'Penguin'),
    array('key' => 'Reptile', 'value' => 'Asp'),
    array('key' => 'Fish', 'value' => 'Flounder'),
);
?>]]></programlisting>

        <para>
            In your view script, you could then invoke the
            <code>PartialLoop</code> helper:
        </para>

        <programlisting role="php"><![CDATA[
<dl>
<?= $this->partialLoop('partialLoop.phtml', $model) ?>
</dl>
]]></programlisting>

        <programlisting role="html"><![CDATA[
<dl></dl>
    <dt>Mammal</dt>
    <dd>Camel</dd>

    <dt>Bird</dt>
    <dd>Penguin</dd>

    <dt>Reptile</dt>
    <dd>Asp</dd>

    <dt>Fish</dt>
    <dd>Flounder</dd>

</dl>
]]></programlisting>
    </example>

    <example id="zend.view.helpers.initial.partial.modules">
        <title>Rendering Partials in Other Modules</title>

        <para>
            Sometime a partial will exist in a different module. If you know the
            name of the module, you can pass it as the second argument to either
            <code>partial()</code> or <code>partialLoop()</code>, moving the
            <code>$model</code> argument to third position.
        </para>

        <para>
            For instance, if there's a pager partial you wish to use that's in
            the 'list' module, you could grab it as follows:
        </para>

        <programlisting role="php"><![CDATA[
<?= $this->partial('pager.phtml', 'list', $pagerData) ?>
]]></programlisting>

        <para>
            In this way, you can re-use partials created specifically for other
            modules. That said, it's likely a better practice to put re-usable
            partials in shared view script paths.
        </para>
    </example>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->
