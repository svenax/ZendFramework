<sect1 id="zend.auth.adapter.openid">

    <title>Open ID Authentication</title>

    <sect2 id="zend.auth.adapter.openid.introduction">

        <title>Introduction</title>
        <para>
            <code>Zend_Auth_Adapter_OpenId</code> allows authenticate user using
            remote OpenID server. Such authentication process assumes that user
            submits to web application only their OpenID identity. Then they are
            redirected to their OpenID providers to prove the identity ownership
            using password or some other method. This password is never known
            to local web application.
        </para>
        <para>
            The OpenID identity is just an HTTP URL that points to some web page
            with suitable information about the user and special tags which
            describes which server to use and which identity to submit there.
            You can read more about OpenID at
            <ulink url="http://www.openid.net/">OpenID official site</ulink>.
        </para>
        <para>
            The <code>Zend_Auth_Adapter_OpenId</code> class is a wrapper on top
            of <code>Zend_OpenId_Consumer</code> component which implements the
            OpenID authentication protocol itself.
        </para>

        <note>
            <para>
                <code>Zend_OpenId</code> takes advantage of the <ulink url="http://php.net/gmp">GMP extension</ulink>,
                where available. Consider enabling the GMP extension for better performance when using
                <code>Zend_Auth_Adapter_OpenId</code>.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.auth.adapter.openid.specifics">
        <title>Specifics</title>
        <para>
            As any other <code>Zend_Auth</code> adapter the <code>Zend_Auth_Adapter_OpenId</code>
            class implements <code>Zend_Auth_Adapter_Interface</code>, which
            defines one method - <code>authenticate()</code>. This method performs
            the authentication itself, but the object must be prepared prior to
            calling it. Such adapter preparation includes setting up OpenID
            identity and some other <code>Zend_OpenId</code> specific options.
        </para>

        <para>
            However in opposite to other <code>Zend_Auth</code> adapters it
            performs authentication on external server and it is done in two
            separate HTTP requests. So the <code>Zend_Auth_Adapter_OpenId::authenticate()</code>
            must be called twice. First time the method won't return, but will
            redirect user to their OpenID server. Then after authentication on
            server they will be redirected back and the script for this second
            request must call <code>Zend_Auth_Adapter_OpenId::authenticate()</code>
            again to verify signature which come with redirected request from the
            server and complete the authentication process. This time the
            method will return <code>Zend_Auth_Result</code> object as expected.
        </para>

        <para>
            The following example shows the usage of <code>Zend_Auth_Adapter_OpenId</code>.
            As was said before the <code>Zend_Auth_Adapter_OpenId::authenticate()</code>
            is called two times. First time - after submitting of HTML form when
            <code>$_POST['openid_action']</code> is set to <code>"login"</code>,
            and the second time after HTTP redirection from OpenID server when
            <code>$_GET['openid_mode']</code> or <code>$_POST['openid_mode']</code>
            is set.
        </para>

        <programlisting role="php"><![CDATA[$status = "";
$auth = Zend_Auth::getInstance();
if ((isset($_POST['openid_action']) &&
     $_POST['openid_action'] == "login" &&
     !empty($_POST['openid_identifier'])) ||
    isset($_GET['openid_mode']) ||
    isset($_POST['openid_mode'])) {
    $result = $auth->authenticate(
        new Zend_Auth_Adapter_OpenId(@$_POST['openid_identifier']));
    if ($result->isValid()) {
        $status = "You are logged-in as " . $auth->getIdentity() . "<br>\n";
    } else {
        $auth->clearIdentity();
        foreach ($result->getMessages() as $message) {
            $status .= "$message<br>\n";
        }
    }
} else if ($auth->hasIdentity()) {
    if (isset($_POST['openid_action']) &&
        $_POST['openid_action'] == "logout") {
        $auth->clearIdentity();
    } else {
        $status = "You are logged-in as " . $auth->getIdentity() . "<br>\n";
    }
}
?>
<html><body>
<?php echo htmlspecialchars($status);?>
<form method="post"><fieldset>
<legend>OpenID Login</legend>
<input type="text" name="openid_identifier" value="">
<input type="submit" name="openid_action" value="login">
<input type="submit" name="openid_action" value="logout">
</fieldset></form></body></html>
*/]]>
        </programlisting>

        <para>
            It is allowed customize the OpenID authentication process with:
            receiving redirection from the OpenID server on separate page,
            specifying the "root" of web site. In this case, using custom
            <code>Zend_OpenId_Consumer_Storage</code> or custom
            <code>Zend_Controller_Response</code>. It is also possible to use
            Simple Registration Extension to retrieve information about
            user from the OpenID server. All these possibilities described
            in more details in <code>Zend_OpenId_Consumer</code>
            reference.
        </para>

    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->