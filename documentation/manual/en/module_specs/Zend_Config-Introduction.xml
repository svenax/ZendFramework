<sect1 id="zend.config.introduction">
    <title>Introduction</title>
    <para>
        <code>Zend_Config</code> is designed to simplify access to and use of configuration data within applications.
        It provides a nested object property based user interface for accessing such configuration data within
        application code. The configuration data may come from a variety of media supporting hierarchical data storage.
        Currently <code>Zend_Config</code> provides adapters for configuration data that are stored in text files with
        <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link> and
        <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.
    </para>
    <example id="zend.config.introduction.example.using">
        <title>Using Zend_Config Per Se</title>
        <para>
            Normally it is expected that users would use one of the adapter classes such as
            <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link> or
            <link linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>, but if configuration data are
            available in a PHP array, one may simply pass the data to the <code>Zend_Config</code> constructor in order
            to utilize a simple object-oriented interface:
        </para>
        <programlisting role="php"><![CDATA[<?php
// Given an array of configuration data
$configArray = array(
    'webhost'  => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);

// Create the object-oriented wrapper upon the configuration data
require_once 'Zend/Config.php';
$config = new Zend_Config($configArray);

// Print a configuration datum (results in 'www.example.com')
echo $config->webhost;

// Use the configuration data to connect to the database
$db = Zend_Db::factory($config->database->adapter,
                       $config->database->params->toArray());

// Alternative usage: simply pass the Zend_Config object.
// The Zend_Db factory knows how to interpret it.
$db = Zend_Db::factory($config->database);]]>
        </programlisting>
    </example>
    <para>
        As illustrated in the example above, <code>Zend_Config</code> provides nested object property syntax to access
        configuration data passed to its constructor.
    </para>
    <para>
        Along with the object oriented access to the data values, <code>Zend_Config</code> also has <code>get()</code>
        which will return the supplied default value if the data element doesn't exist. For example:
    </para>
    <programlisting role="php"><![CDATA[<?php
$host = $config->database->get('host', 'localhost');]]>
    </programlisting>
    <example id="zend.config.introduction.example.file.php">
        <title>Using Zend_Config with a PHP Configuration File</title>
        <para>
            It is often desirable to use a pure PHP-based configuration file. The following code illustrates how easily
            this can be accomplished:
        </para>
        <programlisting role="php"><![CDATA[<?php
// config.php
return array(
    'webhost'  => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);]]></programlisting>
        <programlisting role="php"><![CDATA[<?php
// Configuration consumption
require_once 'Zend/Config.php';
$config = new Zend_Config(require 'config.php');

// Print a configuration datum (results in 'www.example.com')
echo $config->webhost;]]></programlisting>
    </example>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
