<sect1 id="zend.captcha.adapters">
    <title>Captcha Adapters</title>

    <para>
        The following adapters are shipped with Zend Framework by default.
    </para>

    <sect2 id="zend.captcha.adapters.word">
        <title>Zend_Captcha_Word</title>

        <para>
            Zend_Captcha_Word is an abstract adapter that serves as the basis
            for the Dumb, Figlet, and Image adapters. It provides mutators for
            specifying word length, session TTL, the session namespace object
            to use, and the session namespace class to use for persistence if
            you do not wish to use Zend_Session_Namespace. Additionally, it
            encapsulates all validation logic.
        </para>

        <para>
            By default, the word length is 8 characters, the session timeout is
            5 minutes, and Zend_Session_Namespace is used for persistence
            (using the namespace "Zend_Form_Captcha_&lt;captcha ID&gt;").
        </para>

        <para>
            In addition to the standard methods required by the
            <code>Zend_Captcha_Adapter</code> interface,
            <code>Zend_Captcha_Word</code> exposes the following methods:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setWordLen($length)</code> and <code>getWordLen()</code>
                allow you to specify the length of the generated "word" in
                characters, and to retrieve the current value.
            </para></listitem>

            <listitem><para>
                <code>setTimeout($ttl)</code> and <code>getTimeout()</code>
                allow you to specify the time-to-live of the session token, and
                to retrieve the current value. <code>$ttl</code> should be
                specified in seconds.
            </para></listitem>

            <listitem><para>
                <code>setSessionClass($class)</code> and
                <code>getSessionClass()</code> allow you to specify an
                alternate <code>Zend_Session_Namespace</code> implementation to
                use to persist the captcha token, as well as to retrieve the
                current value.
            </para></listitem>

            <listitem><para>
                <code>getId()</code> allows you to retrieve the current token
                identifier.
            </para></listitem>

            <listitem><para>
                <code>getWord()</code> allows you to retrieve the generated
                word to use with the captcha; it will generate it for you if
                none has been generated yet.
            </para></listitem>

            <listitem><para>
                <code>setSession(Zend_Session_Namespace $session)</code> allows
                you to specify a session object to use for persisting the
                captcha token; <code>getSession()</code> allows you to retrieve
                the current session object.
            </para></listitem>
        </itemizedlist>

        <para>
            All Word captchas allow you to pass an array of options to the
            constructor, or, alternately, pass them to
            <code>setOptions()</code> (or pass a <code>Zend_Config</code>
            object to <code>setConfig()</code>). By default, the
            <code>wordLen</code>, <code>timeout</code>, and
            <code>sessionClass</code> keys may all be used; each concrete
            implementation may define additional keys or utilize the options in
            other ways.
        </para>

        <note><para>
            Remeber, Word is an abstract class and may not be instantiated directly.
        </para></note>
    </sect2>

    <sect2 id="zend.captcha.adapters.dumb">
        <title>Zend_Captcha_Dumb</title>

        <para>
            The Dumb adapter is mostly self-describing. It provides a random
            string that needs to be typed in reverse to validate. As such, it's
            not a good CAPTCHA solution, and should only be used either for
            testing or as a last resort. It extends <code>Zend_Captcha_Word</code>.
        </para>
    </sect2>

    <sect2 id="zend.captcha.adapters.figlet">
        <title>Zend_Captcha_Figlet</title>

        <para>
            The Figlet adapter utilizes <link
                linkend="zend.text.figlet">Zend_Text_Figlet</link> to present a
            Figlet to the user. Figlet captchas are limited to characters only. 
        </para>

        <para>
            Options passed to the constructor will also be passed to the <link
                linkend="zend.text.figlet">Zend_Text_Figlet</link> object the
            adapter utilizes; see that documentation for details on what
            configuration options may be utilized.
        </para>
    </sect2>

    <sect2 id="zend.captcha.adapters.image">
        <title>Zend_Captcha_Image</title>

        <para>
            The Image adapter takes the word generated and renders it as an
            image, performing various skewing permutations on it to make it
            difficult to automatically decipher. To perform its work, it
            requires the <ulink url="http://php.net/gd">GD extension</ulink>
            compiled with TrueType or Freetype support. Currently, the Image
            adapter can only generate PNG images.
        </para>

        <para>
            <code>Zend_Captcha_Image</code> extends
            <code>Zend_Captcha_Word</code>, and additionally exposes the
            following methods:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setExpiration($expiration)</code> and
                <code>getExpiration()</code> allow you to specify a maximum
                lifetime a captcha image may reside on the filesystem. This is
                typically a longer duration than the session lifetime. Garbage
                collection is run periodically each time the captcha object is
                invoked, and images that have expired will be cleaned up.
                Expiration values are in seconds.
            </para></listitem>

            <listitem><para>
                <code>setGcFreq($gcFreq)</code> and <code>getGcFreg()</code>
                allow you to specify how frequently garbage collection should
                run. Garbage collection will run every <code>1/$gcFreq</code>
                calls (default is 100).
            </para></listitem>

            <listitem><para>
                <code>setFont($font)</code> and <code>getFont()</code> allow
                you to specify the font you wish to utilize. It should be a
                fully qualified path to the font file to utilize. If you do not
                set this value, the captcha will throw an exception during
                generation; the font is mandatory.
            </para></listitem>

            <listitem><para>
                <code>setFontSize($fsize)</code> and <code>getFontSize()</code>
                allow you to specify the font size, in pixels, to use when
                generating the captcha. This defaults to 24px.
            </para></listitem>

            <listitem><para>
                <code>setHeight($height)</code> and <code>getHeight()</code>
                allow you to specify the height, in pixels, of the generated
                captcha image. This defaults to 50px.
            </para></listitem>

            <listitem><para>
                <code>setWidth($width)</code> and <code>getWidth()</code>
                allow you to specify the width, in pixels, of the generated
                captcha image. This defaults to 200px.
            </para></listitem>

            <listitem><para>
                <code>setImgDir($imgDir)</code> and <code>getImgDir()</code>
                allow you to specify the directory in which captcha images are
                stored. This defaults to "./images/captcha/", which should look
                relative to the bootstrap script.
            </para></listitem>

            <listitem><para>
                <code>setImgUrl($imgUrl)</code> and <code>getImgUrl()</code>
                allow you to specify the relative path to a captcha image to
                use for the HTML markup. This defaults to "/images/captcha/".
            </para></listitem>

            <listitem><para>
                <code>setSuffix($suffix)</code> and <code>getSuffix()</code>
                allows you to specify the filename suffix to utilize. This
                defaults to ".png". Note: changing this will not change the
                image type generated.
            </para></listitem>
        </itemizedlist>

        <para>
            All of the above options may be passed as options to the
            constructor by simply removing the 'set' method prefix and casting
            the initial letter to lowercase: "suffix", "height", "imgUrl", etc.
        </para>
    </sect2>

    <sect2 id="zend.captcha.adapters.recaptcha">
        <title>Zend_Captcha_ReCaptcha</title>

        <para>
            The ReCaptcha adapter utilizes <link
                linkend="zend.service.recaptcha">Zend_Service_ReCaptcha</link>
            to generate and validate captchas. It exposes the following
            methods:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setPrivKey($key)</code> and <code>getPrivKey()</code>
                allow you to specify the private key you use with the ReCaptcha
                service. This must be specified during construction, though it
                may be overridden at any point.
            </para></listitem>

            <listitem><para>
                <code>setPubKey($key)</code> and <code>getPubKey()</code>
                allow you to specify the public key you use with the ReCaptcha
                service. This must be specified during construction, though it
                may be overridden at any point.
            </para></listitem>

            <listitem><para>
                <code>setService(Zend_Service_ReCaptcha $service)</code> and
                <code>getService()</code> allow you to specify and interact
                with the ReCaptcha service object.
            </para></listitem>
        </itemizedlist>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
