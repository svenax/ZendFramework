<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.tool.framework.clitool">
    <title>Using the CLI Tool</title>
    
    <para>
	    The CLI, or command line tool (internally known as the console tool), is currently the primary interface
	    for dispatching Zend_Tool requests.  With the CLI tool, developers can issue tooling requests inside a
	    the "command line windows", also commonly known as a "terminal" window.  This environment is predominant
	    in the *nix environment, but also has a common implementation in windows with the cmd.exe, console2 and 
	    also with the cygwin project.
    </para>
    
    <sect2 id="zend.tool.framework.clitool.setup-general">
        <title>Setting up the CLI tool</title>
    
        <para>
            To issue tooling requests via the command line client, you first need to setup the client
            so that your system can handle the "zf" command.  The command line client, for all intents
            and purposes, is the .sh or .bat file that is provided with your Zend Framework distribution.
            In trunk, it can be found here: 
            <ulink url="http://framework.zend.com/svn/framework/standard/trunk/bin/">http://framework.zend.com/svn/framework/standard/trunk/bin/</ulink>
        </para>
        
        <para>
            As you can see, there are 3 files in the <code>bin/</code> directory: a <code>zf.php, zf.sh, and zf.bat</code>.  The 
            zf.sh and the zf.bat are the operating system specific client wrappers: <code>zf.sh</code> for the *nix 
            environment, and zf.bat for the win32 environment.  These client wrappers are responsible for 
            finding the proper php.exe, finding the zf.php, and passing on the client request.  The <code>zf.php</code> 
            is the responsible for handling understanding your environment, constructing the proper include_path, 
            and passing what is provided on the command line to the proper library component for dispatching.
        </para>
        
        <para>
            Ultimately, you want to ensure two things to make everything work regardless of the operating
            system you are on:
        </para>
            
        <itemizedlist>
            <listitem>
                <para>
		            1) <code>zf.sh/zf.bat</code> is reachable from your system path.  This is the ability to call 
		            <code>zf</code> from anywhere on your command line, regardless of what your current working directory is.
	            </para>
	        </listitem>
	        <listitem>
	            <para>
	                2) ZendFramework/library is in your include_path.
                </para>
            </listitem>
        </itemizedlist>
        
        <para>
            <emphasis>Note:</emphasis> while the above are the most ideal requirements, you can simply download Zend Framework
            and expect it to work as <code>./path/to/zf.php</code> some command.
        </para>
        
    </sect2>
    <sect2 id="zend.tool.framework.clitool.setup-starnix">
        
        <para>
            The most common setup in the *nix environment, is to copy the <code>zf.sh</code> and <code>zf.php</code> into the same directory
            as your php binary.  This can generally be found in one of the following places:
        </para>
        
        <programlisting role="code"><![CDATA[
            /usr/bin
            /usr/local/bin
            /usr/local/ZendServer/bin/
            /Applications/ZendServer/bin/
]]></programlisting>
        
        <para>
            To find out the location of your php binary, you can alternatively type 'which php' on the command
            line.  This will return the location of the php binary you will be using to run php scripts in this
            environment.
        </para>
        
        <para>
            The next order of business is to ensure that the Zend Framework library is setup correctly inside
            of the systems php include_path.  To find out where you include_path is located, you can type
            'php -i' and look for the include_path variable, or more specifically type 'php -i | grep include_path'.
            Once you have found where your include path is located (this will generally be something like
            /usr/lib/php, /usr/share/php, /usr/local/lib/php, or similar), ensure that the contents of the
            library/ directory are put inside your include_path specified directory.
        </para>
        
        <para>
            Once you have done those two things, you should be able to issue a command and get back the proper 
            response like this:
        </para>
        
        <inlinegraphic scale="100" align="center" valign="middle"
            fileref="figures/zend.tool.framework.cliversionunix.png" format="PNG" />
            
        <para>
            If you do not see this type of output, go back and check your setup to ensure you have all of the 
            necessary peices in the proper place.
        </para>
        
        <para>
            There are a couple of alternative setups you might want to employ depending on your servers
            configuration, your level of access, or for other reasons.
        </para>
        
        <para>
            <emphasis>ALTERNATIVE SETUP</emphasis> involves keeping the Zend Framework download together as is, and creating a link
            from a PATH location to the <code>zf.sh</code>.  What this means is you can place the contents of the 
            ZendFramework download into a location such as <code>/usr/local/share/ZendFramework</code>, or more locally
            like <code>/home/username/lib/ZendFramework</code>, and creating a symbolic link to the zf.sh.
        </para>
        
        <para>
            Assuming you want to put the link inside <code>/usr/local/bin</code> (this could also work for placing the
            link inside <code>/home/username/bin/</code> for example) you would issue a command similar to this:
        </para>
            
        <programlisting role="code"><![CDATA[
            ln -s /usr/local/share/ZendFramework/bin/zf.sh /usr/local/bin/zf
            
            OR (for example)
            ln -s /home/username/lib/ZendFramework/bin/zf.sh /home/username/bin/zf
]]></programlisting>
           
        <para>
            This will create a link which you should be able to access globally on the command line
        </para>

    </sect2>
    
    <sect2 id="zend.tool.framework.clitool.setup-windows">
        
        <para>
            The most common setup in the windows win32 environment, is to copy the zf.sh and zf.php into the 
            same directory as your php binary.  This can generally be found in one of the following places:
        </para>
        
        <programlisting role="code"><![CDATA[
            C:\PHP
            C:\Program Files\ZendServer\bin\
            C:\WAMP\PHP\bin
]]></programlisting>
        
        <para>
            You should be able to run php.exe on the command line.  If you are not able to, first check
            the documentation that came with your PHP distribution, or ensure that the path to php.exe
            is in your windows PATH environment variable.
        </para>
        
        <para>
            The next order of business is to ensure that the Zend Framework library is setup correctly inside
            of the systems php include_path.  To find out where you include_path is located, you can type
            'php -i' and look for the include_path variable, or more specifically type 'php -i | grep include_path'
            if you have cygwin setup with grep available.  Once you have found where your include path is located 
            (this will generally be something like <code>C:\PHP\pear</code>, <code>C:\PHP\share</code>, 
            <code>C:\Program Files\ZendServer\share</code> or similar), ensure that the contents of the library/ 
            directory are put inside your include_path specified directory.
        </para>
        
        <para>
            Once you have done those two things, you should be able to issue a command and get back the proper 
            response like this:
        </para>
        
        <inlinegraphic scale="100" align="center" valign="middle"
            fileref="figures/zend.tool.framework.cliversionwin32.png" format="PNG" />
        
        <para>    
            If you do not see this type of output, go back and check your setup to ensure you have all of the 
            necessary peices in the proper place.
        </para>
        
        <para>
            There are a couple of alternative setups you might want to employ depending on your servers
            configuration, your level of access, or for other reasons.
        </para>
        
        <para>
            <emphasis>ALTERNATIVE SETUP</emphasis> involves keeping the Zend Framework download together as is, and altering
            both your system PATH as well as the php.ini file.  In your users environment, make sure to add
            <code>C:\Path\To\ZendFramework\bin</code>, so that your zf.bat file is executable.  Also, alter the php.ini
            file to ensure that <code>C:\Path\To\ZendFramework\library</code> is in your include_path.
        </para>

    </sect2>
    
    <sect2 id="zend.tool.framework.clitool.setup-othernotes">
        <title>Other Setup Considerations</title>
        
        <para>
            If for some reason you do not want the Zend Framework library inside your include_path, there is
            another option.  There are two special environment variables that zf.php will utilize to determine
            how to "find" Zend Framework.
        </para>
        
        <para>
            The first is <code>ZEND_TOOL_INCLUDE_PATH_PREPEND</code>, which will prepend the value of this environment
            variable to the systems (php.ini's) include_path before loading the client.
        </para>
        
        <para>
            Alternatively, you might want to use the <code>ZEND_TOOL_INCLUDE_PATH</code> to completely <emphasis>replace</emphasis>
            for systems include_path for one that makes sense specifically for the zf command line tool.
        </para>
    </sect2>
    
    <sect2 id="zend.tool.framework.clitool.continuing">
        <title>Where To Go Next?</title>
        
        <para>
            At this point, your should be setup to start initiating some more "interesting".  To get going,
            you can issue the <code>zf --help</code> command to see what is available to you..
        </para>
        
        <inlinegraphic scale="100" align="center" valign="middle"
            fileref="figures/zend.tool.framework.clihelp.png" format="PNG" />

        
        <para>
            .. or continue onto the Zend_Tool_Project-CreateProject section for project creation.
        </para>
    
    
    </sect2>
    
    <!-- @todo -->
</sect1>
