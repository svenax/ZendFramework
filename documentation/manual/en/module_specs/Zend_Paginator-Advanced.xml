<sect1 id="zend.paginator.advanced">
    <title>Advanced usage</title>

    <sect2 id="zend.paginator.advanced.adapters">
        <title>Custom data source adapters</title>
        
        <para>
            At some point you may run across a data type that is not covered by
            the packaged adapters.  In this case, you will need to write your 
            own.
        </para>
        
        <para>
            To do so, you must implement 
            <code>Zend_Paginator_Adapter_Interface</code>.  There are two 
            methods required to do this:
        </para>
        
        <itemizedlist>
            <listitem>
                <para>count()</para>
            </listitem>
            <listitem>
                <para>getItems($offset, $itemCountPerPage)</para>
            </listitem>
        </itemizedlist>
        
        <para>
            Additionally, you'll want to implement a constructor that takes 
            your data source as a parameter and stores it as a protected or 
            private property.  How you wish to go about doing this 
            specifically is up to you.
        </para>
        
        <para>
            If you've ever used the SPL interface 
            <ulink url="http://www.php.net/~helly/php/ext/spl/interfaceCountable.html"><code>Countable</code></ulink>, 
            you're familiar with <code>count()</code>.  As used with 
            <code>Zend_Paginator</code>, this is the total number of items 
            in the data collection.
        </para>
        
        <para>
            The <code>getItems()</code> method is only slightly more 
            complicated.  For this, your adapter is supplied with an offset and
            the number of items to display per page.  You must return the 
            appropriate slice of data.  For an array, that would be:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[return array_slice($this->_array, $offset, $itemCountPerPage);]]>
            </programlisting>
        </para>
        
        <para>
            Take a look at the packaged adapters (all of which implement the 
            <code>Zend_Paginator_Adapter_Interface</code>) for ideas of how you
            might go about implementing your own.
        </para>
    </sect2>

    <sect2 id="zend.paginator.advanced.scrolling-styles">
        <title>Custom scrolling styles</title>
        
        <para>
            Creating your own scrolling style requires that you implement 
            <code>Zend_Paginator_ScrollingStyle_Interface</code>, which defines
            a single method, <code>getPages()</code>.  Specifically,
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[public function getPages(Zend_Paginator $paginator, $pageRange = null);]]>
            </programlisting>
        </para>
        
        <para>
            This method should calculate a lower and upper bound for page 
            numbers within the range of so-called "local" pages (that is, pages
            that are nearby the current page).
        </para>
        
        <para>
            Unless it extends another scrolling style (see 
            <code>Zend_Paginator_ScrollingStyle_Elastic</code> for an example),
            your custom scrolling style will inevitably end with something 
            similar to the following line of code:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[return $paginator->getPagesInRange($lowerBound, $upperBound);]]>
            </programlisting>
        </para>
        
        <para>
            There's nothing special about this call; it's merely a convenience 
            method to check the validity of the lower and upper bound and 
            return an array of the range to the paginator.
        </para>
        
        <para>
            When you're ready to use your new scrolling style, you'll need to 
            tell <code>Zend_Paginator</code> what directory to look in.  To do
            that, do the following:
        </para>
        
        <para>
            <programlisting role="php"><![CDATA[$prefix = 'My_Paginator_ScrollingStyle';
$path   = 'My/Paginator/ScrollingStyle/';
Zend_Paginator::addScrollingStylePrefixPath($prefix, $path);]]>
            </programlisting>
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->