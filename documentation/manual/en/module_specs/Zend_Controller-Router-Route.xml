<sect3 id="zend.controller.router.routes.standard">
    <title>Zend_Controller_Router_Route</title>

    <para>
        <code>Zend_Controller_Router_Route</code> is the standard framework
        route. It combines ease of use with flexible route definition.  Each
        route consists primarily of URL mapping (of static and dynamic parts
        (variables)) and may be initialized with defaults as well as with
        variable requirements.
    </para>

    <para>
        Let's imagine our fictional application will need some informational
        page about the content authors. We want to be able to point our web
        browsers to <code>http://domain.com/author/martel</code> to see the
        information about this "martel" guy. And the route for such
        functionality could look like:
    </para>

    <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'author/:username',
    array(
        'controller' => 'profile',
        'action'     => 'userinfo'
    )
);

$router->addRoute('user', $route);]]>
    </programlisting>

    <para>
        The first parameter in the <code>Zend_Controller_Router_Route</code>
        constructor is a route definition that will be matched to a URL.  Route
        definitions consist of static and dynamic parts separated by the slash
        ('/') character.  Static parts are just simple text:
        <code>author</code>.  Dynamic parts, called variables, are marked by
        prepending a colon to the variable name: <code>:username</code>.
    </para>

    <note>
        <title>Character usage</title>
        <para>
            The current implementation allows you to use any character (except a
            slash) as a variable identifier, but it is strongly recommended that
            one uses only characters that are valid for PHP variable
            identifiers. Future implementations may alter this behaviour, which
            could result in hidden bugs in your code.
        </para>
    </note>

    <para>
        This example route should be matched when you point your browser to
        <code>http://domain.com/author/martel</code>, in which case all its
        variables will be injected to the <code>Zend_Controller_Request</code>
        object and will be accessible in your <code>ProfileController</code>.
        Variables returned by this example may be represented as an array of
        the following key and value pairs:
    </para>

    <programlisting role="php"><![CDATA[<?php
$values = array(
    'username'   => 'martel',
    'controller' => 'profile',
    'action'     => 'userinfo'
);]]>
    </programlisting>

    <para>
        Later on, <code>Zend_Controller_Dispatcher_Standard</code> should invoke
        the <code>userinfoAction()</code> method of your
        <code>ProfileController</code> class (in the default module) based on
        these values. There you will be able to access all variables by means of
        the <code>Zend_Controller_Action::_getParam()</code> or
        <code>Zend_Controller_Request::getParam()</code> methods:
    </para>

    <programlisting role="php"><![CDATA[<?php
public function userinfoAction()
{
    $request = $this->getRequest();
    $username = $request->getParam('username');

    $username = $this->_getParam('username');
}]]>
    </programlisting>

    <para>
        Route definition can contain one more special character - a wildcard
        - represented by '*' symbol. It is used to gather parameters similarly
        to the default Module route (var => value pairs defined in the URI).  The
        following route more-or-less mimics the Module route behavior:
    </para>

    <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    ':module/:controller/:action/*',
    array('module' => 'default')
);
$router->addRoute('default', $route);]]>
    </programlisting>

    <sect4 id="zend.controller.router.routes.standard.variable-defaults">
        <title>Variable defaults</title>

        <para>
            Every variable in the route can have a default and this is what the
            second parameter of the <code>Zend_Controller_Router_Route</code>
            constructor is used for. This parameter is an array with keys
            representing variable names and with values as desired defaults:
        </para>

        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array('year' => 2006)
);
$router->addRoute('archive', $route);]]>
        </programlisting>

        <para>
            The above route will match URLs like
            <code>http://domain.com/archive/2005</code> and
            <code>http://example.com/archive</code>. In the latter case the
            variable year will have an initial default value of 2006.
        </para>

        <para>
            This example will result in injecting a year variable to the request
            object.  Since no routing information is present (no controller and
            action parameters are defined), the application will be dispatched
            to the default controller and action method (which are both defined
            in <code>Zend_Controller_Dispatcher_Abstract</code>).  To make it
            more usable, you have to provide a valid controller and a valid
            action as the route's defaults:
        </para>

        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    )
);
$router->addRoute('archive', $route);]]>
        </programlisting>

        <para>
            This route will then result in dispatching to the method
            <code>showAction()</code> of the class
            <code>ArchiveController</code>.
        </para>

    </sect4>

    <sect4 id="zend.controller.router.routes.standard.variable-requirements">
        <title>Variable requirements</title>

        <para>
            One can add a third parameter to the
            <code>Zend_Controller_Router_Route</code> constructor where variable
            requirements may be set. These are defined as parts of a regular
            expression:
        </para>

        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    ),
    array('year' => '\d+')
);
$router->addRoute('archive', $route);]]>
        </programlisting>

        <para>
            With a route defined like above, the router will match it only when
            the year variable will contain numeric data, eg.
            <code>http://domain.com/archive/2345</code>. A URL like
            <code>http://example.com/archive/test</code> will not be matched and
            control will be passed to the next route in the chain instead.
        </para>
    </sect4>
    
    <sect4 id="zend.controller.router.routes.standard.hostname-routing">
        <title>Hostname routing</title>

        <para>
            You can also use the hostname for route matching. For simple
            matching there is a static hostname option:
        </para>

        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    array(
        'host' => 'blog.mysite.com',
        'path' => 'archive'
    ),
    array(
        'module'     => 'blog',
        'controller' => 'archive',
        'action'     => 'index'
    )
);
$router->addRoute('archive', $route);]]>
        </programlisting>

        <para>
            If you want to match parameters in the hostname, there is a regex
            option. In the following example, the subdomain is used as username
            parameter for the action controller. When assembling the route, you
            simply give the username as parameter, as you would with the other
            path parameters:
        </para>
        
        <programlisting role="php"><![CDATA[<?php
$route = new Zend_Controller_Router_Route(
    array(
        'host' => array(
            'regex'   => '([a-z]+).mysite.com',
            'reverse' => '%s.mysite.com'
            'params'  => array(
                1 => 'username'
            ) 
        ),
        'path' => ''
    ),
    array(
        'module'     => 'users',
        'controller' => 'profile',
        'action'     => 'index'
    )
);
$router->addRoute('profile', $route);]]>
        </programlisting>
    </sect4>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->
