<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<appendix id="coding-standard">
  <title>Zend Framework Coding Standard for PHP</title>
    <sect1 id="coding-standard.overview">
        <title>Overview</title>

        <sect2 id="coding-standard.overview.scope">
            <title>Scope</title>

            <para>
                This document provides guidelines for code formatting and documentation to
                individuals and teams contributing to Zend Framework. Many developers using Zend
                Framework have also found these coding standards useful because their code's style
                remains consistent with all Zend Framework code. It is also worth noting that it
                requires significant effort to fully specify coding standards.

                Note: Sometimes developers consider the establishment of a standard more important
                than what that standard actually suggests at the most detailed level of design. The
                guidelines in the Zend Framework coding standards capture practices that have worked
                well on the ZF project. You may modify these standards or use them as is in
                accordance with the terms of our
                <ulink url="http://framework.zend.com/license">license</ulink>
            </para>
            <para>
                Topics covered in the ZF coding standards include:

                <itemizedlist>
                    <listitem>
                        <para>PHP File Formatting</para>
                    </listitem>

                    <listitem>
                        <para>Naming Conventions</para>
                    </listitem>

                    <listitem>
                        <para>Coding Style</para>
                    </listitem>

                    <listitem>
                        <para>Inline Documentation</para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect2>

        <sect2 id="coding-standard.overview.goals">
            <title>Goals</title>

            <para>
                Coding standards are important in any development project, but they are particularly
                important when many developers are working on the same project. Coding standards
                help ensure that the code is high quality, has fewer bugs, and can be easily
                maintained.
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.php-file-formatting">
        <title>PHP File Formatting</title>

        <sect2 id="coding-standard.php-file-formatting.general">
            <title>General</title>

            <para>
                For files that contain only PHP code, the closing tag ("?>") is never permitted. It
                is not required by PHP, and omitting it prevents the accidental injection of
                trailing white space into the response.
            </para>

            <para>
                <emphasis>IMPORTANT:</emphasis> Inclusion of arbitrary binary data as permitted by
                <code>__HALT_COMPILER()</code> is prohibited from PHP files in the Zend Framework
                project or files derived from them. Use of this feature is only permitted for some
                installation scripts.
            </para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.indentation">
            <title>Indentation</title>

            <para>Indentation should consist of 4 spaces. Tabs are not allowed.</para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.max-line-length">
            <title>Maximum Line Length</title>

            <para>
                The target line length is 80 characters. That is to say, ZF developers should strive
                keep each line of their code under 80 characters where possible and practical.
                However, longer lines are acceptable in some circumstances. The maximum length of
                any line of PHP code is 120 characters.
            </para>
        </sect2>

        <sect2 id="coding-standard.php-file-formatting.line-termination">
            <title>Line Termination</title>

            <para>
                Line termination follows the Unix text file convention. Lines must end with a
                single linefeed (LF) character. Linefeed characters are represented as ordinal 10,
                or hexadecimal 0x0A.
            </para>

            <para>
                Note: Do not use carriage returns (CR) as is the convention in Apple OS's (0x0D) or
                the carriage return/linefeed combination (CRLF) as is standard for the Windows OS
                (0x0D, 0x0A).
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.naming-conventions">
        <title>Naming Conventions</title>

        <sect2 id="coding-standard.naming-conventions.classes">
            <title>Classes</title>

            <para>
                Zend Framework standardizes on a class naming convention whereby the names of the
                classes directly map to the directories in which they are stored. The root level
                directory of the ZF standard library is the "Zend/" directory, whereas
                the root level directory of the ZF extras library is the "ZendX/" directory. All
                Zend Framework classes are stored hierarchically under these root directories..
            </para>

            <para>
                Class names may only contain alphanumeric characters. Numbers are permitted
                in class names but are discouraged in most cases. Underscores are only permitted in
                place of the path separator; the filename "Zend/Db/Table.php" must map to the
                class name "Zend_Db_Table".
            </para>

            <para>
                If a class name is comprised of more than one word, the first letter of each new
                word must be capitalized. Successive capitalized letters are not allowed, e.g.
                a class "Zend_PDF" is not allowed while "Zend_Pdf" is acceptable.
            </para>

            <para>
                These conventions define a pseudo-namespace mechanism for Zend Framework. Zend
                Framework will adopt the PHP namespace feature when it becomes available and is
                feasible for our developers to use in their applications.
            </para>

            <para>
                See the class names in the standard and extras libraries for examples of this
                classname convention. <emphasis>IMPORTANT:</emphasis> Code that must be deployed
                alongside ZF libraries but is not part of the standard or extras libraries (e.g.
                application code or libraries that are not distributed by Zend) must never start
                with "Zend_" or "ZendX_".
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.filenames">
            <title>Filenames</title>

            <para>
                For all other files, only alphanumeric characters, underscores, and the dash
                character ("-") are permitted. Spaces are strictly prohibited.
            </para>

            <para>
                Any file that contains PHP code should end with the extension ".php", with the
                notable exception of view scripts. The following examples show acceptable filenames
                for Zend Framework classes:
                <programlisting role="php"><![CDATA[
Zend/Db.php

Zend/Controller/Front.php

Zend/View/Helper/FormRadio.php
]]></programlisting>

                File names must map to class names as described above.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.functions-and-methods">
            <title>Functions and Methods</title>

            <para>
                Function names may only contain alphanumeric characters. Underscores are not
                permitted. Numbers are permitted in function names but are discouraged in most
                cases.
            </para>

            <para>
                Function names must always start with a lowercase letter. When a function name
                consists of more than one word, the first letter of each new word must be
                capitalized. This is commonly called "camelCase" formatting.
            </para>

            <para>
                Verbosity is generally encouraged. Function names should be as verbose as is
                practical to fully describe their purpose and behavior.
            </para>

            <para>
                These are examples of acceptable names for functions:

                <programlisting role="php"><![CDATA[
filterInput()

getElementById()

widgetFactory()
]]></programlisting>
            </para>

            <para>
                For object-oriented programming, accessors for instance or static variables should
                always be prefixed with "get" or "set". In implementing design patterns, such as the
                singleton or factory patterns, the name of the method should contain the pattern
                name where practical to more thoroughly describe behavior.
            </para>

            <para>
                For methods on objects that are declared with the "private" or "protected" modifier,
                the first character of the method name must be an underscore. This is the only
                acceptable application of an underscore in a method name. Methods declared "public"
                should never contain an underscore.
            </para>

            <para>
                Functions in the global scope (a.k.a "floating functions") are permitted but
                discouraged in most cases. Consider wrapping these functions in a static class.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.variables">
            <title>Variables</title>

            <para>
                Variable names may only contain alphanumeric characters. Underscores are not
                permitted. Numbers are permitted in variable names but are discouraged in most
                cases.
            </para>

            <para>
                For instance variables that are declared with the "private" or "protected" modifier,
                the first character of the variable name must be a single underscore. This is the
                only acceptable application of an underscore in a variable name. Member variables
                declared "public" should never start with an underscore.
            </para>

            <para>
                As with function names (see section 3.3) variable names must always start with a
                lowercase letter and follow the "camelCaps" capitalization convention.
            </para>

            <para>
                Verbosity is generally encouraged. Variables should always be as verbose as
                practical to describe the data that the developer intends to store in them. Terse
                variable names such as "$i" and "$n" are discouraged for all but the smallest loop
                contexts. If a loop contains more than 20 lines of code, the index variables should
                have more descriptive names.
            </para>
        </sect2>

        <sect2 id="coding-standard.naming-conventions.constants">
            <title>Constants</title>

            <para>
                Constants may contain both alphanumeric characters and underscores. Numbers are
                permitted in constant names.
            </para>

            <para>
                All letters used in a constant name must be capitalized, while all words in a
                constant name must be separated by underscore characters.
            </para>

            <para>
                For example, <code>EMBED_SUPPRESS_EMBED_EXCEPTION</code> is permitted but
                <code>EMBED_SUPPRESSEMBEDEXCEPTION</code> is not.
            </para>

            <para>
                Constants must be defined as class members with the "const" modifier. Defining
                constants in the global scope with the "define" function is permitted but strongly
                discouraged.
            </para>
        </sect2>
    </sect1>

    <sect1 id="coding-standard.coding-style">
        <title>Coding Style</title>

        <sect2 id="coding-standard.coding-style.php-code-demarcation">
            <title>PHP Code Demarcation</title>

            <para>
                PHP code must always be delimited by the full-form, standard PHP tags:

                <programlisting role="php"><![CDATA[
<?php

?>
]]></programlisting>
            </para>

            <para>
                Short tags are never allowed. For files containing only PHP code, the closing tag
                must always be omitted (See <xref
                    linkend="coding-standard.php-file-formatting.general" />).
            </para>
        </sect2>

        <sect2 id="coding-standard.coding-style.strings">
            <title>Strings</title>

            <sect3 id="coding-standard.coding-style.strings.literals">
                <title>String Literals</title>

                <para>
                    When a string is literal (contains no variable substitutions), the apostrophe or
                    "single quote" should always be used to demarcate the string:

                    <programlisting role="php"><![CDATA[
$a = 'Example String';
]]></programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.literals-containing-apostrophes">
                <title>String Literals Containing Apostrophes</title>

                <para>
                    When a literal string itself contains apostrophes, it is permitted to demarcate
                    the string with quotation marks or "double quotes". This is especially useful
                    for SQL statements:

                    <programlisting role="php"><![CDATA[
$sql = "SELECT `id`, `name` from `people` "
     . "WHERE `name`='Fred' OR `name`='Susan'";
]]></programlisting>

                    This syntax is preferred over escaping apostrophes as it is much easier to read.
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.variable-substitution">
                <title>Variable Substitution</title>

                <para>
                    Variable substitution is permitted using either of these forms:

                    <programlisting role="php"><![CDATA[
$greeting = "Hello $name, welcome back!";

$greeting = "Hello {$name}, welcome back!";
]]></programlisting>
                </para>

                <para>
                    For consistency, this form is not permitted:

                    <programlisting role="php"><![CDATA[
$greeting = "Hello ${name}, welcome back!";
]]></programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.strings.string-concatenation">
                <title>String Concatenation</title>

                <para>
                    Strings must be concatenated using the "." operator. A space must always
                    be added before and after the "." operator to improve readability:

                    <programlisting role="php"><![CDATA[
$company = 'Zend' . ' ' . 'Technologies';
]]></programlisting>
                </para>

                <para>
                    When concatenating strings with the "." operator, it is encouraged to
                    break the statement into multiple lines to improve readability. In these
                    cases, each successive line should be padded with white space such that the
                    "."; operator is aligned under the "=" operator:

                    <programlisting role="php"><![CDATA[
$sql = "SELECT `id`, `name` FROM `people` "
     . "WHERE `name` = 'Susan' "
     . "ORDER BY `name` ASC ";
]]></programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.arrays">
            <title>Arrays</title>

            <sect3 id="coding-standard.coding-style.arrays.numerically-indexed">
                <title>Numerically Indexed Arrays</title>

                <para>Negative numbers are not permitted as indices.</para>

                <para>
                    An indexed array may start with any non-negative number, however
                    all base indices besides 0 are discouraged.
                </para>

                <para>
                    When declaring indexed arrays with the <code>array</code> function, a trailing
                    space must be added after each comma delimiter to improve readability:

                    <programlisting role="php"><![CDATA[
$sampleArray = array(1, 2, 3, 'Zend', 'Studio');
]]></programlisting>
                </para>

                <para>
                    It is permitted to declare multi-line indexed arrays using the "array"
                    construct. In this case, each successive line must be padded with spaces such
                    that beginning of each line is aligned:

                    <programlisting role="php"><![CDATA[
$sampleArray = array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500);
]]></programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.arrays.associative">
                <title>Associative Arrays</title>

                <para>
                    When declaring associative arrays with the <code>array</code> construct,
                    breaking the statement into multiple lines is encouraged. In this case, each
                    successive line must be padded with white space such that both the keys and the
                    values are aligned:
                    <programlisting role="php"><![CDATA[
$sampleArray = array('firstKey'  => 'firstValue',
                     'secondKey' => 'secondValue');
]]></programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.classes">
            <title>Classes</title>

            <sect3 id="coding-standard.coding-style.classes.declaration">
                <title>Class Declaration</title>

                <para>
                    Classes must be named according to Zend Framework's naming conventions.
                </para><para>
                    The brace should always be written on the line underneath the class name.
                </para><para>
                    Every class must have a documentation block that conforms to the PHPDocumentor
                    standard.
                </para><para>
                    All code in a class must be indented with four spaces.
                </para><para>
                    Only one class is permitted in each PHP file.
                </para><para>
                    Placing additional code in class files is permitted but discouraged.
                    In such files, two blank lines must separate the class from any additional PHP
                    code in the class file.
                </para><para>
                    The following is an example of an acceptable class declaration:

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class SampleClass
{
    // all contents of class
    // must be indented four spaces
}
]]></programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standard.coding-style.classes.member-variables">
                <title>Class Member Variables</title>

                <para>
                    Member variables must be named according to Zend Framework's variable naming
                    conventions.
                </para>
                <para>
                    Any variables declared in a class must be listed at the top of the class, above
                    the declaration of any methods.
                </para>
                <para>
                    The <code>var</code> construct is not permitted. Member variables always declare
                    their visibility by using one of the <code>private</code>,
                    <code>protected</code>, or <code>public</code> modifiers. Giving access to
                    member variables directly by declaring them as public is permitted but
                    discouraged in favor of accessor methods (set/get).
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.functions-and-methods">
            <title>Functions and Methods</title>

            <sect3 id="coding-standard.coding-style.functions-and-methods.declaration">
                <title>Function and Method Declaration</title>

                <para>
                    Functions must be named according to the Zend Framework function naming
                    conventions.
                </para>
                <para>
                    Methods inside classes must always declare their visibility by using
                    one of the <code>private</code>, <code>protected</code>,
                    or <code>public</code> modifiers.
                </para>
                <para>
                    As with classes, the brace should always be written on the line underneath the
                    function name. Space between the function name and the opening parenthesis for
                    the arguments is not permitted.
                </para>
                <para>
                    Functions in the global scope are strongly discouraged.
                </para>
                <para>
                    The following is an example of an acceptable function declaration in a class:

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class Foo
{
    /**
     * Documentation Block Here
     */
    public function bar()
    {
        // all contents of function
        // must be indented four spaces
    }
}
]]></programlisting>
                </para>

                <para>
                    <emphasis>NOTE:</emphasis> Pass-by-reference is the only parameter passing
                    mechanism permitted in a method declaration.

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class Foo
{
    /**
     * Documentation Block Here
     */
    public function bar(&$baz)
    {}
}
]]></programlisting>
                </para>

                <para>
                    Call-time pass-by-reference is strictly prohibited.
                </para>

                <para>
                    The return value must not be enclosed in parentheses. This can hinder
                    readability, in additional to breaking code if a method is later changed to
                    return by reference.

                    <programlisting role="php"><![CDATA[
/**
 * Documentation Block Here
 */
class Foo
{
    /**
     * WRONG
     */
    public function bar()
    {
        return($this->bar);
    }

    /**
     * RIGHT
     */
    public function bar()
    {
        return $this->bar;
    }
}
]]></programlisting>
                </para>

            </sect3>

            <sect3 id="coding-standard.coding-style.functions-and-methods.usage">
                <title>Function and Method Usage</title>

                <para>
                    Function arguments should be separated by a single trailing space after the
                    comma delimiter. The following is an example of an acceptable invocation of a
                    function that takes three arguments:

                    <programlisting role="php"><![CDATA[
threeArguments(1, 2, 3);
]]></programlisting>
                </para>

                <para>
                    Call-time pass-by-reference is strictly prohibited. See the function
                    declarations section for the proper way to pass function arguments by-reference.
                </para>
                <para>
                    In passing arrays as arguments to a function, the function call may include the
                    "array" hint and may be split into multiple lines to improve readability. In
                    such cases, the normal guidelines for writing arrays still apply:

                    <programlisting role="php"><![CDATA[
threeArguments(array(1, 2, 3), 2, 3);

threeArguments(array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500), 2, 3);
]]></programlisting>
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standard.coding-style.control-statements">
            <title>Control Statements</title>

            <sect3 id="coding-standard.coding-style.control-statements.if-else-elseif">
                <title>If/Else/Elseif</title>

                <para>
                    Control statements based on the <code>if</code> and <code>elseif</code>
                    constructs must have a single space before the opening parenthesis of the
                    conditional and a single space after the closing parenthesis.
                </para>

                <para>
                    Within the conditional statements between the parentheses, operators must be
                    separated by spaces for readability. Inner parentheses are encouraged to improve
                    logical grouping for larger conditional expressions.
                </para>

                <para>
                    The opening brace is written on the same line as the conditional statement. The
                    closing brace is always written on its own line. Any content within the braces
                    must be indented using four spaces.

                    <programlisting role="php"><![CDATA[
if ($a != 2) {
    $a = 2;
}
]]></programlisting>
                </para>

                <para>
                    For "if" statements that include "elseif" or "else", the formatting conventions
                    are similar to the "if" construct. The following examples demonstrate proper
                    formatting for "if" statements with "else" and/or "elseif" constructs:

                    <programlisting role="php"><![CDATA[
if ($a != 2) {
    $a = 2;
} else {
    $a = 7;
}

if ($a != 2) {
    $a = 2;
} elseif ($a == 3) {
    $a = 4;
} else {
    $a = 7;
}
]]></programlisting>
                    PHP allows statements to be written without braces in some circumstances. This
                    coding standard makes no differentiation- all "if", "elseif" or "else"
                    statements must use braces.
                </para>

                <para>
                    Use of the "elseif" construct is permitted but strongly discouraged in favor of
                    the "else if" combination.
                </para>
            </sect3>

            <sect3 id="coding-standards.coding-style.control-statements.switch">
                <title>Switch</title>

                <para>
                    Control statements written with the "switch" statement must have a single space
                    before the opening parenthesis of the conditional statement and after the
                    closing parenthesis.
                </para>

                <para>
                    All content within the "switch" statement must be indented using four spaces.
                    Content under each "case" statement must be indented using an additional four
                    spaces.
                </para>

                <programlisting role="php"><![CDATA[
switch ($numPeople) {
    case 1:
        break;

    case 2:
        break;

    default:
        break;
}
]]></programlisting>

                <para>
                    The construct <code>default</code> should never be omitted from a
                    <code>switch</code> statement.
                </para>

                <para>
                    <emphasis>NOTE:</emphasis> It is sometimes useful to write a <code>case</code>
                    statement which falls through to the next case by not including a
                    <code>break</code> or <code>return</code> within that case. To distinguish these
                    cases from bugs, any <code>case</code> statement where <code>break</code> or
                    <code>return</code> are omitted should contain a comment indicating that the
                    break was intentionally omitted.
                </para>
            </sect3>
        </sect2>

        <sect2 id="coding-standards.inline-documentation">
            <title>Inline Documentation</title>

            <sect3 id="coding-standards.inline-documentation.documentation-format">
                <title>Documentation Format</title>

                <para>
                    All documentation blocks ("docblocks") must be compatible with the phpDocumentor
                    format. Describing the phpDocumentor format is beyond the scope of this
                    document. For more information, visit: <ulink
                        url="http://phpdoc.org/">http://phpdoc.org/</ulink>
                </para>

                <para>
                    All class files must contain a "file-level" docblock at the top of each file and
                    a "class-level" docblock immediately above each class. Examples of such
                    docblocks can be found below.
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.files">
                <title>Files</title>

                <para>
                    Every file that contains PHP code must have a docblock at the top of the file
                    that contains these phpDocumentor tags at a minimum:

                    <programlisting role="php"><![CDATA[
/**
 * Short description for file
 *
 * Long description for file (if any)...
 *
 * LICENSE: Some license information
 *
 * @copyright  2008 Zend Technologies
 * @license    http://framework.zend.com/license   BSD License
 * @version    $Id:$
 * @link       http://framework.zend.com/package/PackageName
 * @since      File available since Release 1.5.0
*/
]]></programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.classes">
                <title>Classes</title>

                <para>
                    Every class must have a docblock that contains these phpDocumentor tags at a
                    minimum:

                    <programlisting role="php"><![CDATA[
/**
 * Short description for class
 *
 * Long description for class (if any)...
 *
 * @copyright  2008 Zend Technologies
 * @license    http://framework.zend.com/license   BSD License
 * @version    Release: @package_version@
 * @link       http://framework.zend.com/package/PackageName
 * @since      Class available since Release 1.5.0
 * @deprecated Class deprecated in Release 2.0.0
 */
]]></programlisting>
                </para>
            </sect3>

            <sect3 id="coding-standards.inline-documentation.functions">
                <title>Functions</title>

                <para>
                Every function, including object methods, must have a docblock that contains at a
                minimum:

                    <itemizedlist>
                        <listitem><para>A description of the function</para></listitem>
                        <listitem><para>All of the arguments</para></listitem>
                        <listitem><para>All of the possible return values</para></listitem>
                    </itemizedlist>
                </para>

                <para>
                    It is not necessary to use the "@access" tag because the access level is already
                    known from the "public", "private", or "protected" modifier used to declare the
                    function.
                </para>

                <para>
                    If a function/method may throw an exception, use @throws for all known exception
                    classes:

                    <programlisting role="php"><![CDATA[
@throws exceptionclass [description]
]]></programlisting>
                </para>
            </sect3>
        </sect2>
    </sect1>

</appendix>
<!--
vim:se ts=4 sw=4 et:
-->
