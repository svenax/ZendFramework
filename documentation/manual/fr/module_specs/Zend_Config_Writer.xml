<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 15103 -->
<!-- Reviewed: no -->
<sect1 id="zend.config.writer.introduction">
    <title>Zend_Config_Writer</title>

    <para>
        <classname>Zend_Config_Writer</classname> vous donne la possibilité d'écrire des
        fichiers de configuration à partir d'objets <classname>Zend_Config</classname>. Il
        fonctionne avec des adaptateurs détachés du système et est donc très simple à utiliser. Par
        défaut <classname>Zend_Config_Writer</classname> embarque trois adaptateurs, qui
        fonctionnent tous de la même façon. Vous instanciez un rédacteur ("writer") avec des
        options spécifiques, qui peuvent être <code>filename</code> et <code>config</code>. Ensuite
        vous pouvez appeler la méthode <code>write()</code> du rédacteur et le fichier de
        configuration est créé. Vous pouvez aussi fournir <code>$filename</code> et
        <code>$config</code> directement à la méthode <code>write()</code>. Actuellement les
        rédacteurs suivants sont embarqués avec <classname>Zend_Config_Writer</classname>&#160;:
    </para>

    <itemizedlist>
        <listitem>
            <para><classname>Zend_Config_Writer_Array</classname></para>
        </listitem>
        <listitem>
            <para><classname>Zend_Config_Writer_Ini</classname></para>
        </listitem>
        <listitem>
            <para><classname>Zend_Config_Writer_Xml</classname></para>
        </listitem>
    </itemizedlist>

    <para>
        Une exception subsiste, <classname>Zend_Config_Writer_Ini</classname> qui a un
        paramètre optionnel additionnel <code>nestSeparator</code>, définissant le caractère
        séparant les profondeurs d'imbrication. Par défaut il s'agit du point ("<code>.</code>"),
        comme <classname>Zend_Config_Ini</classname> l'accepte par défaut.
    </para>

    <para>
        Lors de la modification ou la création d'objet <classname>Zend_Config</classname>, il
        y a quelques informations à garder en mémoire. Pour créer ou modifier une valeur, vous
        appelez simplement le réglage d'un paramètre d'un objet <classname>Zend_Config</classname>
        grâce à l'accesseur de paramètre ("<code>-&gt;</code>"). Pour créer une section à la racine
        ou pour créer une branche, vous avez juste à créer un nouveau tableau
        (<code>$config-&gt;branch = array();</code>). Pour définir quelle section en étend une
        autre, vous devez appeler la méthode <code>setExtend()</code> sur l'objet
        <classname>Zend_Config</classname> racine.
    </para>

    <example id="zend.config.writer.example.using">
        <title>Utilisation de Zend_Config_Writer</title>

        <para>
            Cet exemple illustre une utilisation basique
            <classname>Zend_Config_Writer_Xml</classname> pour créer un nouveau fichier de
            configuration&#160;:
        </para>

        <programlisting role="php"><![CDATA[
// Créer l'objet de configuration
$config = new Zend_Config(array(), true);
$config->production = array();
$config->staging    = array();

$config->setExtend('staging', 'production');

$config->production->db = array();
$config->production->db->hostname = 'localhost';
$config->production->db->username = 'production';

$config->staging->db = array();
$config->staging->db->username = 'staging';

// Ecrire le fichier de l'une des manières suivantes :
// a)
$writer = new Zend_Config_Writer_Xml(array('config'   => $config,
                                           'filename' => 'config.xml'));
$writer->write();

// b)
$writer = new Zend_Config_Writer_Xml();
$writer->setConfig($config)
       ->setFilename('config.xml')
       ->write();

// c)
$writer = new Zend_Config_Writer_Xml();
$writer->write('config.xml', $config);
]]></programlisting>

        <para>
            Ceci créera un fichier de configuration XML avec les sections "production" et
            "staging", où "staging" étend "production".
        </para>
    </example>

    <example id="zend.config.writer.modifying">
        <title>Modifier une configuration existante</title>

        <para>
            Cet exemple montre comment modifier un fichier de configuration
            existant&#160;:
        </para>

        <programlisting role="php"><![CDATA[
// Charger toutes les sections d'un fichier de configuration existant,
// tout en évitant les sections étendues.
$config = new Zend_Config_Ini('config.ini',
                              null,
                              array('skipExtends'        => true,
                                    'allowModifications' => true));

// Modifier une valeur
$config->production->hostname = 'foobar';

// Ecrire le fichier
$writer = new Zend_Config_Writer_Ini(array('config'   => $config,
                                           'filename' => 'config.ini'));
$writer->write();
]]></programlisting>
    </example>

    <note>
        <title>Chargement d'un fichier de configuration</title>
        <para>
            Lors du chargement d'un fichier de configuration existant afin de le modifier, il
            est très important de charger toutes les sections et d'éviter les sections étendues,
            évitant ainsi toute fusion de valeurs. Ceci est réalisé en fournissant l'option
            <code>skipExtends</code> au constructeur.
        </para>
    </note>
</sect1>
