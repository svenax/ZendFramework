<!-- EN-Revision: 10200 -->
<sect1 id="zend.paginator.advanced">
    <title>Utilisation avancée</title>

    <sect2 id="zend.paginator.advanced.adapters">
        <title>Adaptateurs de source de données personnalisée</title>

        <para>À partir d'un moment, vous pourriez avoir besoin de parcourir un type de données qui n'est pas couvert par
        les adaptateurs fournis par défaut. Dans ce cas, vous devrez écrire vos propres adaptateurs. </para>

        <para>Pour faire ceci, vous devez implémenter <code>Zend_Paginator_Adapter_Interface</code>. Il existe deux
        méthodes requises :</para>

        <itemizedlist>
            <listitem>
                <para><code>count()</code></para>
            </listitem>

            <listitem>
                <para><code>getItems($offset, $itemCountPerPage)</code></para>
            </listitem>
        </itemizedlist>

        <para>De plus, vous voudrez peut-être implémenter un constructeur qui prend votre source de données comme
        paramètre et le stocke comme propriété protégée ou privée. La manière suivant laquelle vous allez spécifiquement
        faire ceci, vous incombe.</para>

        <para>Si vous avez déjà utilisé l'interface SPL <ulink
        url="http://www.php.net/~helly/php/ext/spl/interfaceCountable.html"><code>Countable</code></ulink>, vous êtes
        familier avec <code>count()</code>. Utilisé avec <code>Zend_Paginator</code>, il s'agit du nombre total
        d'éléments dans la collection de données.</para>

        <para>La méthode <code>getItems()</code> est seulement légèrement plus compliquée. Pour ceci, les paramètres
        sont un point de départ et un nombre d'éléments à afficher par page. Vous devez retourner la portion appropriée
        de données. Pour un tableau, il s'agirait :</para>

        <para><programlisting role="php"><![CDATA[
return array_slice($this->_array, $offset, $itemCountPerPage);
]]></programlisting></para>

        <para>Regardez les adaptateurs fournis par défaut (ils implémentent tous
        <code>Zend_Paginator_Adapter_Interface</code>) pour avoir une idée de la manière d'implémenter votre propre
        adaptateur.</para>
    </sect2>

    <sect2 id="zend.paginator.advanced.scrolling-styles">
        <title>Styles de défilement personnalisés</title>

        <para>Créer votre propre style de défilement requiert que vous implémentiez
        <code>Zend_Paginator_ScrollingStyle_Interface</code>, qui définit une seule méthode, <code>getPages()</code>. Et
        plus spécifiquement :</para>

        <para><programlisting role="php"><![CDATA[
public function getPages(Zend_Paginator $paginator, $pageRange = null);
]]></programlisting></para>

        <para>Cette méthode doit calculer des bornes inférieures et supérieures des numéros de page dans la plage des
        pages dites "local" (c'est-à-dire qui sont proches de la page courante).</para>

        <para>A moins que votre style étende un autre style de défilement (voir
        <code>Zend_Paginator_ScrollingStyle_Elastic</code> par exemple), votre style personnalisé devra inévitablement
        se terminer par quelque chose de similaire à ceci :</para>

        <para><programlisting role="php"><![CDATA[
return $paginator->getPagesInRange($lowerBound, $upperBound);
]]></programlisting></para>

        <para>Il n'y a rien de spécial au sujet de cet appel ; c'est simplement une méthode pratique pour vérifier la
        validité de la limite inférieure et supérieure et pour renvoyer un tableau de ces bornes au pagineur.</para>

        <para>Quand vous êtes prêt à utiliser votre style de défilement, vous devez informer <code>Zend_Paginator</code>
        dans quel dossier le chercher, en réalisant ceci :</para>

        <para><programlisting role="php"><![CDATA[
$prefix = 'Mon_Paginator_StyleDefilement';
$path   = 'Mon/Paginator/StyleDefilement/';
Zend_Paginator::addScrollingStylePrefixPath($prefix, $path);
]]></programlisting></para>
    </sect2>
</sect1>