<!-- EN-Revision: 13826 -->
<sect1 id="zend.view.controllers">
    <title>Scripts de contrôleur</title>

    <para>Le contrôleur est l'endroit où vous instanciez et configurez <code>Zend_View</code>. Vous assignez ensuite des
    variables à la vue, et lui dites comment effectuer le rendu en utilisant un script particulier.</para>

    <sect2 id="zend.view.controllers.assign">
        <title>Assigner des variables</title>

        <para>Votre script de contrôleur devrait assigner les variables nécessaires à la vue avant de passer le contrôle
        au script de vue. Normalement vous pouvez faire les assignations une par une en assignant les noms des
        propriétés de l'instance de la vue :</para>

        <programlisting role="php"><![CDATA[
$view = new Zend_View();
$view->a = "Ha";
$view->b = "Bé";
$view->c = "Cé";
]]></programlisting>

        <para>Cependant, ceci peut être pénible quand vous avez déjà collecté (dans un tableau ou dans un objet) les
        valeurs à assigner.</para>

        <para>La méthode <code>assign()</code> vous laisse assigner "en vrac" depuis un tableau ou un objet. Les
        exemples suivants ont le même effet que celui ci-dessus.</para>

        <programlisting role="php"><![CDATA[
$view = new Zend_View();

// assigne un tableau de paires clés/valeurs, où la clé
// est le nom de la variable, et la valeur, sa valeur assignée
$array = array(
    'a' => "Ha",
    'b' => "Bé",
    'c' => "Cé",
);
$view->assign($array);

// fait pareil avec les propriétés publiques d'un objet
// notez le transtypage lors de l'assignation
$obj = new StdClass;
$obj->a = "Ha";
$obj->b = "Bé";
$obj->c = "Cé";
$view->assign((array) $obj);
]]></programlisting>

        <para>Alternativement, vous pouvez utiliser la méthode <code>assign()</code> pour assigner les variables une par
        une, en passant le nom de la variable, et sa valeur.</para>

        <programlisting role="php"><![CDATA[
$view = new Zend_View();
$view->assign('a', "Ha");
$view->assign('b', "Bé");
$view->assign('c', "Cé");
]]></programlisting>
    </sect2>

    <sect2 id="zend.view.controllers.render">
        <title>Effectuer le rendu d'un script de vue</title>

        <para>Une fois que vous avez assigné toutes les variables dont vous avez besoin, le contrôleur devrait demander
        à <code>Zend_View</code> de rendre un script de vue particulier. Faites cela en appelant la méthode
        <code>render()</code>. Notez que la méthode va retourner la vue rendue, mais ne va pas l'afficher, vous devez
        donc l'afficher vous même avec <code>print</code> ou <code>echo</code>, au moment voulu.</para>

        <programlisting role="php"><![CDATA[
$view = new Zend_View();
$view->a = "Ha";
$view->b = "Bé";
$view->c = "Cé";
echo $view->render('uneVue.php');
]]></programlisting>
    </sect2>

    <sect2 id="zend.view.controllers.script-paths">
        <title>Chemin des scripts de vue</title>

        <para>Par défaut, <code>Zend_View</code> s'attend à ce que vos scripts de vues soient dans le même dossier que
        celui du contrôleur. Par exemple, si le script du contrôleur est dans "/chemin/des/controleurs" et qu'il appelle
        <code>$view-&gt;render('uneVue.php')</code>, <code>Zend_View</code> va rechercher
        "/chemin/des/controleurs/uneVue.php".</para>

        <para>Évidemment, vos scripts sont peut-être localisés ailleurs. Pour dire à <code>Zend_View</code> ou il doit
        chercher, utilisez la méthode <code>setScriptPath()</code>.</para>

        <programlisting role="php"><![CDATA[
$view = new Zend_View();
$view->setScriptPath('/chemin/des/vues');
]]></programlisting>

        <para>Maintenant, vous appelez <code>$view-&gt;render('uneVue.php')</code>, il va rechercher dans
        "<filename>/chemin/des/vues/uneVue.php</filename>".</para>

        <para>En fait, vous pouvez "empiler" les chemins en utilisant la méthode <code>setScriptPath()</code>. Comme
        vous ajoutez des chemins dans la pile, <code>Zend_View</code> va rechercher le script de vue dans le chemin le
        plus récemment ajouté. Cela vous permet de passer outre les vues par défaut, pour des vues personnalisées. Ainsi
        vous pouvez créer des "thèmes" ou des "skins" pour certaines vues, pendant que vous laissez les autres
        intactes.</para>

        <programlisting role="php"><![CDATA[
$view = new Zend_View();
$view->addScriptPath('/chemin/des/vues');
$view->addScriptPath('/chemin/des/vues-personnalisees');

// maintenant, lorsque vous appelerez $view->render('listelivre.php'),
// Zend_View va rechercher en premier dans
// "/chemin/des/vues-personnalisees/listelivre.php", puis
// dans "/chemin/des/vues/listelivre.php", et ensuite dans le répertoire
// courant pour trouver le fichier "listelivre.php".
]]></programlisting>
    </sect2>
</sect1>