<!-- EN-Revision: 13847 -->
<sect1 id="zend.controller.basics">
    <title>Fondations de Zend_Controller</title>

    <para>Le système <code>Zend_Controller</code> est conçu pour être léger, modulaire, et extensible. Il est de
    conception minimaliste pour permettre la flexibilité et la liberté aux utilisateurs tout en fournissant assez de
    structure de sorte que les systèmes établis autour de <code>Zend_Controller</code> partagent certaines conventions
    communes et dispositions semblables de code.</para>

    <para>Le diagramme suivant décrit le déroulement des opérations, et ce qui suit décrit en détail les interactions
    :</para>

    <para><inlinegraphic align="center" fileref="figures/zend.controller.basics.png" format="PNG" scale="100"
    valign="middle" width="483" /></para>

    <para>Le déroulement des opérations de <code>Zend_Controller</code> est implémenté par plusieurs composants. Même
    s'il n'est pas nécessaire de comprendre complètement les détails de tous ces composants pour employer le système,
    avoir une bonne connaissance du fonctionnement du processus est utile.</para>

    <itemizedlist>
        <listitem>
            <para><code>Zend_Controller_Front</code> orchestre le déroulement entier des opérations du système
            <code>Zend_Controller</code>. C'est une interprétation du modèle contrôleur frontal ("FrontController").
            <code>Zend_Controller_Front</code> traite toutes les demandes reçues par le serveur et est finalement
            responsable de déléguer les demandes aux contrôleurs d'action ("ActionControllers"
            [<code>Zend_Controller_Action</code>]).</para>
        </listitem>

        <listitem>
            <para><code>Zend_Controller_Request_Abstract</code> (souvent référencé comme <code>Request Object</code>)
            représente l'environnement de la requête et fournit les méthodes pour régler et rechercher le contrôleur,
            l'action et les paramètres fournis. De plus il contient l'information si l'action qu'elle contient a été
            distribuée ou non par <code>Zend_Controller_Dispatcher</code>. Des extensions de l'objet abstrait de requête
            peuvent être employées pour encapsuler l'environnement entier de requête, permettant à des routeurs de
            récupérer les informations issues de l'environnement de requête afin de régler les noms de contrôleur et
            d'action.</para>

            <para>Par défaut, <code>Zend_Controller_Request_Http</code> est employé, ce qui permet d'accéder à
            l'environnement complet de requête HTTP.</para>
        </listitem>

        <listitem>
            <para><code>Zend_Controller_Router_Interface</code> est employé pour définir les routeurs. Le routage est le
            processus d'examen de l'environnement de requête pour déterminer quel contrôleur, et action de ce
            contrôleur, devraient recevoir la requête. Ces contrôleur, action, et paramètres facultatifs sont alors
            placés dans l'objet de requête à traiter par <code>Zend_Controller_Dispatcher_Standard</code>. Le routage se
            produit seulement une fois : quand la demande est initialement reçue et avant que le premier contrôleur ne
            soit distribué.</para>

            <para>Le routeur par défaut, <code>Zend_Controller_Router_Rewrite</code>, récupère un URI comme indiqué dans
            <code>Zend_Controller_Request_Http</code> et le décompose en contrôleur, action, et paramètres basés sur
            l'information de chemin de l'URL. Par exemple, l'URL <code>http://localhost/foo/bar/key/value</code> serait
            décodée pour employer le contrôleur <code>foo</code>, l'action <code>bar</code>, et pour indiquer un
            paramètre <code>key</code> avec une valeur <code>value</code>.</para>

            <para><code>Zend_Controller_Router_Rewrite</code> peut également être utilisé pour faire correspondre des
            chemins arbitraires ; voir <link linkend="zend.controller.router">la documentation du routeur</link> pour
            plus d'information.</para>
        </listitem>

        <listitem>
            <para><code>Zend_Controller_Dispatcher_Interface</code> est utilisé pour définir les distributeurs. La
            distribution est le processus chargé de récupérer le contrôleur et l'action issus de l'objet de requête et de
            les faire correspondre à un fichier/classe de contrôleur et à une méthode d'action dans la classe du
            contrôleur. Si le contrôleur ou l'action n'existent pas, il se charge de déterminer des contrôleurs et des
            actions par défaut à distribuer.</para>

            <para>Le processus de distribution réel se compose de l'instanciation de la classe de contrôleur et de
            l'appel de la méthode d'action dans cette classe. A la différence du routage, qui se produit seulement une
            fois, la distribution se produit dans une boucle. Si le statut distribué de l'objet de requête est remis à
            zéro à un moment quelconque, la boucle sera répétée, en appelant l'action actuellement placée dans l'objet
            de requête. La première fois que la boucle se termine avec une propriété de statut d'objet de requête
            distribué à vrai (booléen <code>true</code>), le processus s'arrête.</para>

            <para>Le distributeur par défaut est <code>Zend_Controller_Dispatcher_Standard</code>. Il définit les
            contrôleurs comme des classes pouvant se nommer avec une série de caractère majuscules et/ou minuscules et
            se terminant par le mot <code>Controller</code>, et des méthodes d'action suivant la notationCamel se
            terminant avec le mot Action : <code>FooController::barAction()</code>. Dans ce cas-ci, le contrôleur est
            désigné comme <code>foo</code> et l'action comme <code>bar</code>.</para>

            <note>
                <title>Conventions de nommage (casse)</title>

                <para>Puisque les humains sont notoirement incompatibles avec le respect des majuscules et des
                minuscules quand ils tapent des liens, Zend Framework normalise les chemins en lettres minuscules.
                Ceci, naturellement, affectera votre manière d'appeler vos contrôleurs et actions... ou vous vous
                référez à eux dans les liens.</para>

                <para>Si vous souhaitez que votre classe ou action de contrôleur ait de multiples motsEnCassesMélangées
                ou motsEnNotationCamel, vous devrez séparer ces mots dans l'URL avec soit un tiret ("-"), soit un point
                (".") (bien que vous puissiez configurer le caractère utilisé).</para>

                <para>Par exemple, si vous souhaitez l'action <code>FooBarController::bazBatAction()</code>, vous vous
                referez à elle avec l'URL <code>/foo-bar/baz-bat</code> ou <code>/foo.bar/baz.bat</code>.</para>
            </note>
        </listitem>

        <listitem>
            <para><code>Zend_Controller_Action</code> est le composant contrôleur d'action de base. Chaque contrôleur
            est une classe simple qui étend la classe de <code>Zend_Controller_Action</code> et devrait contenir une ou
            plusieurs méthodes d'action.</para>
        </listitem>

        <listitem>
            <para><code>Zend_Controller_Response_Abstract</code> définit une classe de réponse de base employée pour
            rassembler et retourner les réponses des contrôleurs d'action. Il rassemble les en-têtes et le contenu du
            corps.</para>

            <para>La classe de réponse par défaut est <code>Zend_Controller_Response_Http</code>, qui convient pour
            l'usage dans un environnement HTTP.</para>
        </listitem>
    </itemizedlist>

    <para>Le déroulement des opérations de <code>Zend_Controller</code> est relativement simple. Une demande est reçue
    par <code>Zend_Controller_Front</code>, qui appelle alternativement <code>Zend_Controller_Router_Rewrite</code> pour
    déterminer le contrôleur (et l'action dans ce contrôleur) à distribuer. <code>Zend_Controller_Router_Rewrite</code>
    décompose l'URI afin de régler les noms de contrôleur et d'action dans la requête.
    <code>Zend_Controller_Front</code> entre alors dans une boucle de distribution. Il appelle
    <code>Zend_Controller_Dispatcher_Standard</code>, en lui passant la requête, pour distribuer le contrôleur et
    l'action indiqués dans la requête (ou utiliser les valeurs par défaut). Après que le contrôleur ait fini, la
    commande revient à <code>Zend_Controller_Front</code>. Si le contrôleur a indiqué qu'un autre contrôleur devait être
    distribué en remettant à zéro le statut distribué de la requête, la boucle continue et une autre distribution est
    effectuée. Sinon, le processus se termine.</para>
</sect1>