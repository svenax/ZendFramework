<!-- EN-Revision: 12759 -->
<sect1 id="zend.validate.set" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Classes de validation standard</title>

    <para>Le Zend Framework est fourni avec un jeu de classes de validation standard, qui sont directement utilisables
    par votre application.</para>

    <sect2 id="zend.validate.set.alnum">
        <title>Alnum</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> contient seulement des caractères
        alphabétiques et numériques. Ce validateur inclue une option permettant la validation possible des caractères
        espace.</para>
    </sect2>

    <sect2 id="zend.validate.set.alpha">
        <title>Alpha</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> contient seulement des caractères
        alphabétiques. Ce validateur inclue une option permettant la validation possible des caractères espace.</para>

        <note>
            <para>Les caractères alphabétiques comprennent les caractères destinés à constituer des mots dans chaque
            langue. Cependant l'alphabet anglais est aussi utilisé pour les langues suivantes : chinois, japonais et
            coréen. La langue est spécifiée par <code>Zend_Locale</code>.</para>
        </note>
    </sect2>

    <sect2 id="zend.validate.set.barcode">
        <title>Barcode</title>

        <para>Ce validateur est intancié avec le type de code-barres suivant lequel vous souhaitez valider une valeur.
        Il supporte actuellement les types de code-barres "<code>UPC-A</code>" (Universal Product Code) et
        "<code>EAN-13</code>" (European Article Number), et la méthode <code>isValid()</code> retourne <code>true</code>
        si et seulement si la valeur fournie est validée par l'algorithme de validation du code-barres. Vous devez
        retirer tous les caractères exceptés les nombres compris entre zéro et neuf (0-9) de la valeur à tester avant de
        la fournir au validateur.</para>
    </sect2>

    <sect2 id="zend.validate.set.between">
        <title>Between</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est compris entre les valeurs minimum et
        maximum définies. La comparaison inclue par défaut les bornes (<code>$value</code> peut égaler le minimum ou le
        maximum), bien que ceci puisse être surchargé pour avoir une comparaison stricte, où <code>$value</code> doit
        être strictement supérieur au minimum et strictement inférieur au maximum.</para>
    </sect2>

    <sect2 id="zend.validate.set.ccnum">
        <title>Ccnum</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> respecte <ulink
        url="http://fr.wikipedia.org/wiki/Luhn">l'algorithme de Luhn ("module 10")</ulink> pour les numéros de cartes de
        crédits.</para>
    </sect2>

    <sect2 id="zend.validate.set.date">
        <title>Date</title>

        <para>Retourne <code>true</code> si <code>$value</code> est une date valide au format <code>YYYY-MM-DD</code>.
        Si l'option <code>locale</code> est fournie alors la date sera validé suivant le paramètre local. Enfin si
        l'option <code>format</code> est fournie ce format est utilisé pour la validation. Pour plus de détails
        concernant les paramètres optionnel, referez vous à <link
        linkend="zend.date.others.comparison.table">Zend_Date::isDate()</link>.</para>
    </sect2>

    <sect2 id="zend.validate.set.digits">
        <title>Digits</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> contient seulement des caractères
        numériques.</para>
    </sect2>

    <xi:include href="Zend_Validate-EmailAddress.xml" />

    <sect2 id="zend.validate.set.float">
        <title>Float</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est une valeur en virgule
        flottante.</para>
    </sect2>

    <sect2 id="zend.validate.set.greater_than">
        <title>GreaterThan</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est supérieure à une valeur minimum
        fournie.</para>
    </sect2>

    <sect2 id="zend.validate.set.hex">
        <title>Hex</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> contient seulement des caractères
        numériques hexadécimaux.</para>
    </sect2>

    <xi:include href="Zend_Validate-Hostname.xml" />

    <sect2 id="zend.validate.set.in_array">
        <title>InArray</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est contenue dans un tableau. Si
        l'option stricte est à <code>true</code>, alors le type de <code>$value</code> est aussi vérifié.</para>
    </sect2>

    <sect2 id="zend.validate.set.int">
        <title>Int</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est une valeur entière.</para>
    </sect2>

    <sect2 id="zend.validate.set.ip">
        <title>Ip</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est une adresse IP valide.</para>
    </sect2>

    <sect2 id="zend.validate.set.less_than">
        <title>LessThan</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est inférieure à une valeur maximum
        fournie.</para>
    </sect2>

    <sect2 id="zend.validate.set.not_empty">
        <title>NotEmpty</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> est une valeur non vide.</para>
    </sect2>

    <sect2 id="zend.validate.set.regex">
        <title>Regex</title>

        <para>Retourne <code>true</code> si et seulement si <code>$value</code> respecte une expression régulière
        fournie.</para>
    </sect2>

    <sect2 id="zend.validate.set.string_length">
        <title>StringLength</title>

        <para>Retourne <code>true</code> si et seulement si la longueur de la chaîne <code>$value</code> est supérieure
        à une valeur minimum et inférieure à une valeur maximum (quand l'option max n'est pas à <code>null</code>).
        Depuis la version 1.5.0, la méthode <code>setMin()</code> lève une exception si la valeur fournie pour la
        longueur minimum est supérieure à celle fournie pour la longueur maximum, et la méthode <code>setMax()</code>
        lève une exception si la valeur fournie pour la longueur maximum est supérieure à celle fournie pour la longueur
        minimum. Depuis la version 1.0.2, cette classe supporte l'UTF-8 et les autres encodages, en se basant sur la
        valeur courante de <ulink url="http://www.php.net/manual/fr/ref.iconv.php#iconv.configuration">
                <code>iconv.internal_encoding</code>
            </ulink>.</para>
    </sect2>
</sect1>