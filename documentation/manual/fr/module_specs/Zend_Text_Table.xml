<!-- EN-Revision: 12516 -->
<sect1 id="zend.text.table.introduction">
    <title>Zend_Text_Table</title>

    <para><code>Zend_Text_Table</code> est un composant pour créer à la volée des tables de type texte avec différents
    décorateurs. Ceci peut être utile, si vous souhaitez soit envoyé des données structurées dans des emails textuels,
    qui sont sont utilisés pour leurs polices mono-espacés, ou pour afficher des informations sous forme de tableaux
    dans une application CLI. <code>Zend_Text_Table</code> supporte les colonnes multi-lignes, les fusions de colonnes
    ainsi que l'alignement.</para>

    <note>
        <title>Encodage</title>

        <para><code>Zend_Text_Table</code> suppose que vos chaînes sont encodés en UTF-8 par défaut. Si ce n'est pas le
        cas, vous pouvez fournir l'encodage en tant que paramètre du constructeur ou à la méthode
        <code>setContent</code> de <code>Zend_Text_Table_Column</code>.</para>
    </note>

    <para>Un objet <code>Zend_Text_Table</code> consiste en des lignes, qui contiennent des colonnes, représenté par
    <code>Zend_Text_Table_Row</code> et <code>Zend_Text_Table_Column</code>. Lors de la création d'une table, vous devez
    fournir toutes les largeurs de colonnes sous la forme d'un tableau. Disons que si souhaitez afficher une table avec
    trois colonnes, ayant des largeurs de 10, 50 et 20 caractères, vous avez juste à fournir <code>array(10, 50,
    20)</code> en tant que premier paramètre du constructeur. En second paramètre, vous pouvez fournir un décorateur,
    qui stylise les bordures de la table. Par défaut <code>Zend_Text_Table_Decorator_Unicode</code> est utilisé, mais
    vous pouvez aussi utiliser le décorateur simple <code>Zend_Text_Table_Decorator_Ascii</code>.</para>

    <para>Les lignes sont simplement ajoutées à la table en créant une nouvelle instance de
    <code>Zend_Text_Table_Row</code>, et en l'ajoutant à la table via la méthode <code>appendRow</code>. Les lignes
    elle-même n'ont pas d'options. Vous pouvez aussi fournir un tableau directement à la méthode <code>appendRow</code>,
    qui le convertira automatiquement en des objets <code>Row</code>, contenant les multiples objets
    <code>Column</code>.</para>

    <para>De la même manière vous pouvez ajouter les colonnes aux lignes. Créez un instance de
    <code>Zend_Text_Table_Column</code> et ensuite paramétrer les options de colonnes soit dans le constructeur ou plus
    tard par les méthodes <code>set*</code>. Le premier paramètre est le contenu de la colonne qui peut avoir des lignes
    multiples, elles sont dans le meilleur des cas séparées par le caractère <code>\n</code>. Le second paramètre
    définit l'alignement, qui est "<code>left</code>" par défaut et peut être l'une des constantes de la classe
    <code>Zend_Text_Table_Column</code> :<itemizedlist>
            <listitem>
                <para><code>ALIGN_LEFT</code></para>
            </listitem>

            <listitem>
                <para><code>ALIGN_CENTER</code></para>
            </listitem>

            <listitem>
                <para><code>ALIGN_RIGHT</code></para>
            </listitem>
        </itemizedlist>Le troisième paramètre est le colspan ("fusion") de la colonne. Par exemple, quand vous
    choisissez "2 comme colspan, la colonne va déborder sur deux colonnes de la table. Le dernier paramètre définit
    l'encodage du contenu, qui peut être fourni, si le contenu n'est ni de l'ASCII ni de l'UTF-8. Pour ajouter la
    colonne à la ligne, vous appelez simplement <code>appendColumn</code> dans votre objet <code>Row</code> avec l'objet
    <code>Column</code> en tant que paramètre. Alternativement vous pouvez directement fournir la chaîne à la méthode
    <code>appendColumn</code>.</para>

    <para>Pour finalement effectuer le rendu de la table, vous pouvez soit utiliser la méthode <code>render</code> de la
    table, ou utilisez la méthode magique <code>__toString</code> en faisant <code>echo $table;</code> ou
    <code>$tableString = (string) $table</code>.</para>

    <example id="zend.text.table.example.using">
        <title>Utilisation de Zend_Text_Table</title>

        <para>Cet exemple illustre un utilisation basique de <code>Zend_Text_Table</code> pour créer une table simple
        :</para>

        <programlisting role="php"><![CDATA[
require_once 'Zend/Text/Table.php';
require_once 'Zend/Text/Table/Row.php';
require_once 'Zend/Text/Table/Column.php';

$table = new Zend_Text_Table(array(10, 20));

// Either simple
$table->appendRow(array('Zend', 'Framework'));

// Or verbose
$row = new Zend_Text_Table_Row();

$row->appendColumn(new Zend_Text_Table_Column('Zend'));
$row->appendColumn(new Zend_Text_Table_Column('Framework'));

$table->appendRow($row);

echo $table;
]]></programlisting>

        <para>Ceci entraînera l'affichage suivant :</para>

        <programlisting role="text"><![CDATA[
┌──────────┬────────────────────┐
│Zend      │Framework           │
└──────────┴────────────────────┘
]]></programlisting>
    </example>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->