<sect1 id="zend.search.lucene.index-creation">
    <title>Créer des index</title>

    <sect2 id="zend.search.lucene.index-creation.creating">
        <title>Créer un nouvel index</title>

        <para>
            La création et la mise à jour des index sont implémentées dans le composant
            <code>Zend_Search_Lucene</code>, ainsi que dans le projet Java Lucene.
            Vous pouvez utiliser l'une ou l'autre de ces options pour créer des index dans
            lesquels <code>Zend_Search_Lucene</code> pourra chercher.
        </para>

        <para>
            Le listing ci-dessous donne un exemple d'indexation d'un fichier en
            utilisant l'API d'indexation de <code>Zend_Search_Lucene</code> :
        </para>

        <programlisting role="php"><![CDATA[
// Création de l'index
$index = Zend_Search_Lucene::create('/data/my-index');

$doc = new Zend_Search_Lucene_Document();

// Stockage de l'URL du document afin de pouvoir l'identifier dans les résultats de recherche
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));

// Indexation des contenus du document
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Ajout du document à l'index
$index->addDocument($doc);
]]>
        </programlisting>

        <para>
            Les documents nouvellement ajoutés sont immédiatement recherchables dans l'index.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.updating">
        <title>Mettre à jour un index</title>

        <para>
            La même procédure est utilisée pour mettre à jour un index existant. La
            seule différence est l'appel de la méthode open() à la place de create().
        </para>

        <programlisting role="php"><![CDATA[
// Ouverture d'un index existant
$index = Zend_Search_Lucene::open('/data/my-index');

$doc = new Zend_Search_Lucene_Document();
// Stockage de l'URL du document afin de pouvoir l'identifier dans les résultats de recherche
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));
// Indexation des contenus du document
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents',
                                                  $docContent));

// Ajout du document à l'index
$index->addDocument($doc);
]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.document-updating">
        <title>Mise à jour de Documents.</title>

        <para>
            Le format de fichier d'un index Lucene ne permet pas la mise à jour d'un document.
            Les documents doivent être supprimés puis réinsérés dans l'index afin d'être mis à
            jour efficacement.
        </para>

        <para>
            La méthode <code>Zend_Search_Lucene::delete()</code> utilise un identifiant interne de document.
            Cet identifiant peut être récupéré dans une requête en demandant la propriété 'id' :
        </para>

        <programlisting role="php"><![CDATA[
$removePath = ...;
$hits = $index->find('path:' . $removePath);
foreach ($hits as $hit) {
    $index->delete($hit->id);
}
]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.counting">
        <title>Récupération de la taille de l'index</title>

        <para>
            Il existe deux méthodes pour récupérer la taille d'un index dans <code>Zend_Search_Lucene</code>.
        </para>

        <para>
            La méthode <code>Zend_Search_Lucene::maxDoc()</code> retourne un de plus que
            le plus grand nombre possible de documents. Il s'agit en fait du nombre total
            de documents dans l'index, y compris les documents supprimés. Cette méthode a
            une méthode synonyme : <code>Zend_Search_Lucene::count()</code>.
        </para>

        <para>
            La méthode <code>Zend_Search_Lucene::numDocs()</code> retourne le nombre total
            de documents non supprimés.
        </para>

        <programlisting role="php"><![CDATA[
$indexSize = $index->count();
$documents = $index->numDocs();
]]>
        </programlisting>

        <para>
            La méthode <code>Zend_Search_Lucene::isDeleted($id)</code> peut être utilisée
            pour vérifier si un document a été supprimé.
        </para>

        <programlisting role="php"><![CDATA[
for ($count = 0; $count < $index->maxDoc(); $count++) {
    if ($index->isDeleted($count)) {
        echo "Le document #$id a été supprimé.\n";
    }
}
]]>
        </programlisting>

        <para>
            L'optimisation d'index retire les documents suppimés et resserre les identifiants
            de documents dans un intervalle plus petit. Ainsi, un identifiant interne de document
            peut être modifié durant l'optimisation de l'index.
        </para>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.optimization">
        <title>Optimisation d'index</title>

        <para>
            Un index Lucene est composé de plusieurs segments. Chaque segment est un ensemble de données
            complètement indépendant des autres.
        </para>
        <para>
            Les fichiers de segment d'index Lucene ne peuvent pas être mis à jour conceptuellement. Une
            mise à jour de segment requiert une réorganisation complète de tous les segments. Consultez
            les formats de fichiers d'index pour plus de détails
            (<ulink url="http://lucene.apache.org/java/docs/fileformats.html">http://lucene.apache.org/java/docs/fileformats.html</ulink>)
            <footnote>
                <para>
                    Le format de fichier d'index supporté actuellement est la version 2.3 (depuis ZF 1.6).
                </para>
            </footnote>.
            Les nouveaux documents sont ajoutés à l'index en créant de nouveaux segments.
        </para>
        <para>
            L'augmentation du nombre de segments réduit la qualité de l'index, mais l'optimisation de
            l'index remédie à ce problème. L'optimisation a pour principale activité de fusionner plusieurs
            segments en un seul. Ce processus ne met pas à jour les segments. Il génère un nouveau segment
            plus gros et met à jour la liste des segments ('segments' file).
        </para>

        <para>
            L'optimisation complète de l'index peut être déclenchée en appelant la
            méthode <code>Zend_Search_Lucene::optimize()</code>. Elle va fusionner
            tous les segments de l'index en un seul nouveau segment :
        </para>
        <programlisting role="php"><![CDATA[
// Ouverture d'un index existant.
$index = Zend_Search_Lucene::open('/data/my-index');

// Optimisation de l'index.
$index->optimize();
]]>
        </programlisting>

        <para>
            L'optimisation automatique de l'index est lancée pour garder les index dans un
            état cohérent.
        </para>
        <para>
            L'optimisation automatique est un processus itératif géré par plusieurs options d'index.
            Il s'agit de fusionner les très petits segments pour obtenir de plus gros segments, puis
            de fusionner ces segments obtenus vers des segments encore plus gros et ainsi de suite.
        </para>

        <sect3 id="zend.search.lucene.index-creation.optimization.maxbuffereddocs">
            <title><emphasis>MaxBufferedDocs</emphasis> auto-optimization option</title>
            <para>
                <emphasis>MaxBufferedDocs</emphasis> is a minimal number of documents required before
                the buffered in-memory documents are written into a new segment.
            </para>
            <para>
                <emphasis>MaxBufferedDocs</emphasis> can be retrieved or set by <code>$index->getMaxBufferedDocs()</code> or
                <code>$index->setMaxBufferedDocs($maxBufferedDocs)</code> calls.
            </para>
            <para>
                Default value is 10.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.index-creation.optimization.maxmergedocs">
            <title><emphasis>MaxMergeDocs</emphasis> auto-optimization option</title>
            <para>
                <emphasis>MaxMergeDocs</emphasis> is a largest number of documents ever merged by addDocument().
                Small values (e.g., less than 10.000) are best for interactive indexing, as this limits the length
                of pauses while indexing to a few seconds. Larger values are best for batched indexing and speedier
                searches.
            </para>
            <para>
                <emphasis>MaxMergeDocs</emphasis> can be retrieved or set by <code>$index->getMaxMergeDocs()</code> or
                <code>$index->setMaxMergeDocs($maxMergeDocs)</code> calls.
            </para>
            <para>
                Default value is PHP_INT_MAX.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.index-creation.optimization.mergefactor">
            <title><emphasis>MergeFactor</emphasis> auto-optimization option</title>
            <para>
                <emphasis>MergeFactor</emphasis> determines how often segment indices are merged by addDocument().
                With smaller values, less RAM is used while indexing, and searches on unoptimized indices are faster,
                but indexing speed is slower. With larger values, more RAM is used during indexing, and while searches
                on unoptimized indices are slower, indexing is faster. Thus larger values (&gt; 10) are best for batch
                index creation, and smaller values (&lt; 10) for indices that are interactively maintained.
            </para>
            <para>
                <emphasis>MergeFactor</emphasis> is a good estimation for average number of segments merged by one auto-optimization pass.
                Too large values produce large number of segments while they are not merged into new one. It may be a cause of
                "failed to open stream: Too many open files" error message. This limitation is system dependent.
            </para>
            <para>
                <emphasis>MergeFactor</emphasis> can be retrieved or set by <code>$index->getMergeFactor()</code> or
                <code>$index->setMergeFactor($mergeFactor)</code> calls.
            </para>
            <para>
                Default value is 10.
            </para>
            <para>
                Lucene Java and Luke (Lucene Index Toolbox - <ulink url="http://www.getopt.org/luke/">http://www.getopt.org/luke/</ulink>)
                can also be used to optimize an index. Latest Luke release (v0.8) is based on Lucene v2.3 and compatible with
                current implementation of <code>Zend_Search_Lucene</code> component (ZF 1.6). Earlier versions of <code>Zend_Search_Lucene</code> implementations
                need another versions of Java Lucene tools to be compatible:
                <itemizedlist>
                    <listitem>
                        <para>ZF 1.5 - Java Lucene 2.1 (Luke tool v0.7.1 - <ulink url="http://www.getopt.org/luke/luke-0.7.1/"/>)</para>
                    </listitem>
                    <listitem>
                        <para>ZF 1.0 - Java Lucene 1.4 - 2.1 (Luke tool v0.6 - <ulink url="http://www.getopt.org/luke/luke-0.6/"/>)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect3>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.permissions">
        <title>Permissions</title>

        <para>
            By default, index files are available for reading and writing by everyone.
        </para>

        <para>
            It's possible to override this with the <code>Zend_Search_Lucene_Storage_Directory_Filesystem::setDefaultFilePermissions()</code> method:
        </para>


        <programlisting role="php"><![CDATA[
// Get current default file permissions
$currentPermissions =
    Zend_Search_Lucene_Storage_Directory_Filesystem::getDefaultFilePermissions();

// Give read-writing permissions only for current user and group
Zend_Search_Lucene_Storage_Directory_Filesystem::setDefaultFilePermissions(0660);
]]>
        </programlisting>
    </sect2>

    <sect2 id="zend.search.lucene.index-creation.limitations">
        <title>Limitations</title>

        <sect3 id="zend.search.lucene.index-creation.limitations.index-size">
            <title>Index size</title>
            <para>
                Index size is limited by 2GB for 32-bit platforms.
            </para>

            <para>
                Use 64-bit platforms for larger indices.
            </para>
        </sect3>

        <sect3 id="zend.search.lucene.index-creation.limitations.filesystems">
            <title>Supported Filesystems</title>
            <para>
                <code>Zend_Search_Lucene</code> uses <code>flock()</code> to provide concurrent searching, index updating and optimization.
            </para>

            <para>
                According to the PHP <ulink url="http://www.php.net/manual/en/function.flock.php">documentation</ulink>,
                "<code>flock()</code> will not work on NFS and many other networked file systems".
            </para>

            <para>
                Do not use networked file systems with <code>Zend_Search_Lucene</code>.
            </para>
        </sect3>
    </sect2>
</sect1>

<!--
vim:se ts=4 sw=4 et:
-->
