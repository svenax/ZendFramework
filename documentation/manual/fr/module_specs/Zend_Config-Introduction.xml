<!-- EN-Revision: 13849 -->
<sect1 id="zend.config.introduction">
    <title>Introduction</title>

    <para><code>Zend_Config</code> est conçu pour simplifier l'accès et l'utilisation des données de configuration dans
    les applications. Il fournit une interface utilisateur basée sur des propriétés d'objets imbriquées. Les données de
    configuration peuvent venir de sources variées supportant une organisation hiérarchique des données. Actuellement
    <code>Zend_Config</code> fournit des adaptateurs pour les données de configuration qui sont stockées dans des
    fichier textes avec <link linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link> et <link
    linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>.</para>

    <example id="zend.config.introduction.example.using">
        <title>Utilisation native de <code>Zend_Config</code></title>

        <para>Normalement on s'attend à ce que les utilisateurs emploient une des classes d'adaptateur telles que <link
        linkend="zend.config.adapters.ini"><code>Zend_Config_Ini</code></link> ou <link
        linkend="zend.config.adapters.xml"><code>Zend_Config_Xml</code></link>, mais si les données de configuration
        sont disponibles dans un tableau PHP, on peut simplement passer les données au constructeur de
        <code>Zend_Config</code> afin d'utiliser une interface orientée objet simple :</para>

        <programlisting role="php"><![CDATA[
// Fourni un tableau de configuration
$configArray = array(
    'webhost' => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);

// Crée un objet à partir des données de configuration
$config = new Zend_Config($configArray);

// Affiche une donnée de configuration en particulier
// (résultat : 'www.example.com')
echo $config->webhost;

// Utilise les données de configuration pour se connecter
// à une base de données
$db = Zend_Db::factory($config->database->adapter,
                       $config->database->params->toArray());

// Autre possibilité : fournir simplement l'objet Zend_Config.
// Zend_Db factory sait comment l'interpréter.
$db = Zend_Db::factory($config->database);
]]></programlisting>
    </example>

    <para>Comme illustré dans l'exemple ci-dessus, <code>Zend_Config</code> fournit une syntaxe de propriétés d'objets
    imbriquées pour accéder aux données de configuration passées à son constructeur.</para>

    <para>Avec l'accès de type orienté-objet aux données, <code>Zend_Config</code> a aussi la méthode <code>get()</code>
    qui retournera la valeur par défaut si l'élément n'existe pas. Par exemple :</para>

    <programlisting role="php"><![CDATA[
$host = $config->database->get('host', 'localhost');
]]></programlisting>

    <example id="zend.config.introduction.example.file.php">
        <title>Utilisez <code>Zend_Config</code> avec un fichier de configuration en PHP</title>

        <para>Il est souvent souhaitable d'utiliser une fichier de configuration en pur PHP. Le code suivant illustre
        comment ceci peut être facilement réalisé :</para>

        <programlisting role="php"><![CDATA[
// config.php
return array(
    'webhost'  => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);
]]></programlisting>

        <programlisting role="php"><![CDATA[
// Lecture de la configuration
$config = new Zend_Config(require 'config.php');

// Affiche une donnée de configuration ('www.example.com')
echo $config->webhost;
]]></programlisting>
    </example>
</sect1>