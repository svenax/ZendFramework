<sect1 id="zend.acl.introduction">
    <title>Introduction</title>

    <para><code>Zend_Acl</code> fournit une solution légère et flexible de listes de contrôle d'accès (ACL : Access
    Control List), ainsi que la gestion de privilèges. En général, une application peut utiliser une telle
    fonctionnalité pour contrôler l'accès à certains objets par d'autres objets demandeurs.</para>

    <para>Dans le cadre de cette documentation, <itemizedlist>
            <listitem>
                <para>une <emphasis role="strong">Ressource</emphasis> est un objet dont l'accès est contrôlé</para>
            </listitem>

            <listitem>
                <para>un <emphasis role="strong">Rôle</emphasis> est un objet qui peut demander l'accès à une
                Ressource.</para>
            </listitem>
        </itemizedlist> Dit simplement, <emphasis role="strong"> les Rôles demandent l'accès à des
    Ressources</emphasis>. Par exemple, si une personne demande l'accès à une voiture, alors la personne est le Rôle
    demandeur et la voiture est la Ressource, puisque l'accès à la voiture est soumis à un contrôle.</para>

    <para>Grâce à la définition et à la mise en oeuvre d'une liste de contrôle d'accès (ACL), une application peut
    contrôler comment les objets demandeurs (Rôles) reçoivent l'accès (ou non) à des objets protégés
    (Ressources).</para>

    <sect2 id="zend.acl.introduction.resources">
        <title>A propos des Ressources</title>

        <para>Avec <code>Zend_Acl</code>, créer une Ressource est très simple. <code>Zend_Acl</code> fournit
        <code>Zend_Acl_Resource_Interface</code> pour faciliter la tâche aux développeurs. Une classe a simplement
        besoin d'implémenter cette interface, qui consiste en une seule méthode, <code>getResourceId()</code>, pour que
        <code>Zend_Acl</code> considère l'objet comme étant une Ressource. Par ailleurs, <code>Zend_Acl_Resource</code>
        est inclus dans <code>Zend_Acl</code> comme une implémentation basique de Ressource que les développeurs peuvent
        étendre si besoin.</para>

        <para><code>Zend_Acl</code> fournit une structure en arbre à laquelle plusieurs Ressources (ou "zone sous
        contrôle d'accès") peuvent être ajoutées. Puisque les Ressources sont sauvées dans cet arbre, elles peuvent être
        organisées du général (via la racine de l'arbre) jusqu'au particulier (via les feuilles de l'arbre). Les
        requêtes envers une Ressource spécifique vont automatiquement entraîner la recherche de règles sur ses parents
        au sein de la structure hiérarchique des Ressources, ce qui permet un héritage simple des règles. Par exemple,
        si une règle par défaut doit être appliquée à tous les bâtiments d'une ville, on pourra simplement assigner la
        règle à la ville elle-même, au lieu de la répéter à tous les bâtiments. Mais certains bâtiments peuvent
        nécessiter des règles spécifiques, et ceci peut se faire aisément avec <code>Zend_Acl</code> en assignant les
        règles nécessaires à chaque bâtiment de la ville qui nécessite une exception. Une Ressource peut hériter d'un
        seul parent Ressource, qui hérite lui même de son propre parent, et ainsi de suite.</para>

        <para><code>Zend_Acl</code> supporte aussi des privilèges pour chaque Ressource (par exemple : "créer", "lire",
        "modifier", "supprimer"), et le développeur peut assigner des règles qui affectent tous les privilèges ou seuls
        certains privilèges d'une Ressource.</para>
    </sect2>

    <sect2 id="zend.acl.introduction.roles">
        <title>A propos des Rôles</title>

        <para>Comme pour les Ressources, créer un Rôle est très simple. <code>Zend_Acl</code> propose
        <code>Zend_Acl_Role_Interface</code> pour faciliter le travail des développeurs. Une classe doit uniquement
        implémenter cette interface qui consiste en une seule méthode <code>getRoleId()</code>, pour que
        <code>Zend_Acl</code> considère l'objet comme un Rôle. De plus, <code>Zend_Acl_Role</code> est inclus dans
        <code>Zend_Acl</code> comme une implémentation basique de Rôle que les développeurs peuvent étendre si
        besoin.</para>

        <para>Dans <code>Zend_Acl</code>, un Rôle peut hériter de un ou plusieurs Rôles. Ceci permet de supporter
        l'héritage de règles à travers plusieurs Rôles. Par exemple, un Rôle utilisateur, comme "Éric", peut appartenir
        à un ou plusieurs Rôles d'action, tels que "éditeur" ou "administrateur". Le développeur peut créer des règles
        pour "éditeur" et "administrateur" séparément, et "Éric" va hériter des règles des deux sans avoir à définir des
        règles directement pour "Éric".</para>

        <para>Bien que la possibilité d'hériter de plusieurs Rôles soit très utile, l'héritage multiple introduit aussi
        un certain degré de complexité. L'exemple ci-dessous illustre l'ambiguïté et la manière de la résoudre.</para>

        <example id="zend.acl.introduction.roles.example.multiple_inheritance">
            <title>Héritages multiples entre Rôles</title>

            <para>Le code ci-dessous définit trois Rôles de base - "<code>invite</code>", "<code>membre</code>", et
            "<code>admin</code>" - desquels d'autres Rôles peuvent hériter. Ensuite, un Rôle identifié par
            "<code>unUser</code>" est créé et hérite des trois autres Rôles. L'ordre selon lequel ces Rôles apparaissent
            dans le tableau <code>$parents</code> est important. Lorsque cela est nécessaire <code>Zend_Acl</code>
            recherche les règles d'accès définies non seulement pour le Rôle demandé (ici "<code>unUser</code>"), mais
            aussi pour les autres Rôles desquels le Rôle recherché hérite (ici "<code>invite</code>",
            "<code>membre</code>", et "<code>admin</code>") :</para>

            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';
$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';
$acl->addRole(new Zend_Acl_Role('invite'))
    ->addRole(new Zend_Acl_Role('membre'))
    ->addRole(new Zend_Acl_Role('admin'));

$parents = array('invite', 'membre', 'admin');
$acl->addRole(new Zend_Acl_Role('unUtilisateur'), $parents);

require_once 'Zend/Acl/Resource.php';
$acl->add(new Zend_Acl_Resource('uneResource'));

$acl->deny('invite', 'uneResource');
$acl->allow('membre', 'uneResource');

echo $acl->isAllowed('unUtilisateur', 'uneResource') ? 'autorisé' : 'refusé';]]></programlisting>

            <para>Puisqu'il n'y a pas de règle spécifiquement définie pour le Rôle "<code>unUtilisateur</code>" et
            "<code>uneResource</code>", <code>Zend_Acl</code> doit rechercher des règles qui pourraient être définies
            pour des Rôles dont "<code>unUtilisateur</code>" hérite. Premièrement, le Rôle "<code>admin</code>" est
            contrôlé, et il n'y a pas de règle d'accès définie pour lui. Ensuite, le Rôle "<code>membre</code>" est
            visité, et <code>Zend_Acl</code> trouve qu'il y a une règle qui spécifie que "<code>membre</code>" a un
            accès autorisé à "<code>uneResource</code>".</para>

            <para>Si <code>Zend_Acl</code> continuait à examiner toutes les règles de tous les Rôles parents, il
            trouverait que "<code>invite</code>" est interdit d'accès à "<code>uneResource</code>". Ceci introduit une
            ambiguïté puisque maintenant "<code>unUtilisateur</code>" est à la fois autorisé et interdit d'accès à
            "<code>uneResource</code>", puisqu'il hérite de règles opposées de ses différents parents.</para>

            <para><code>Zend_Acl</code> résout cette ambiguïté en arrêtant la recherche de règles d'accès dès qu'une
            première règle est découverte. Dans notre exemple, puisque le Rôle "<code>membre</code>" est examiné avant
            le rôle "<code>invite</code>", le résultat devrait afficher "<code>autorisé</code>".</para>
        </example>

        <note>
            <para>Lorsque vous spécifiez plusieurs parents pour un Rôle, conservez à l'esprit que le dernier parent
            listé est le premier dans lequel une règle utilisable sera recherchée.</para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.creating">
        <title>Créer la Liste de Contrôle d'Accès (ACL)</title>

        <para>Une ACL peut représenter n'importe quel ensemble d'objets physiques ou virtuels que vous souhaitez. Pour
        les besoins de la démonstration, nous allons créer un système basique d'ACL pour une Gestion de Contenus (CMS)
        qui comporte plusieurs niveaux de groupes au sein d'une grande variété de zones. Pour créer un nouvel objet ACL,
        nous créons une nouvelle instance d'ACL sans paramètres :</para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();]]></programlisting>

        <note>
            <para>Jusqu'à ce que le développeur spécifie une règle "allow", <code>Zend_Acl</code> refuse l'accès pour
            tous les privilèges sur chaque ressource pour chaque rôle.</para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.role_registry">
        <title>Registre des Rôles</title>

        <para>Les systèmes de gestion de contenu vont pratiquement toujours nécessiter une hiérarchie de permissions
        afin de déterminer les droits de rédaction de ses utilisateurs. Il pourrait y avoir un groupe "Invités" qui
        donne accès aux démonstrations, un groupe "Staff" pour la majorité des utilisateurs du CMS qui réalisent la
        plupart du travail quotidien, un groupe "Éditeur" pour ceux qui sont responsables de la publication,
        l'archivage, la relecture et la suppression, et enfin un groupe "Administrateur" dont les tâches incluent toutes
        les tâches des autres groupes plus des tâches de maintenance, de gestion des utilisateurs, configuration et
        backup/export. Cet ensemble de permissions peut être représenté dans un registre de Rôles, permettant à chaque
        groupe d'hériter des privilèges des groupes "parents". Les permissions peuvent être rendues de la manière
        suivante :</para>

        <table>
            <title>Contrôles d'Accès pour un exemple de CMS</title>

            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>Nom</entry>

                        <entry>Permissions</entry>

                        <entry>Permissions héritées de</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>Invité</entry>

                        <entry>Voir</entry>

                        <entry>N/A</entry>
                    </row>

                    <row>
                        <entry>Staff</entry>

                        <entry>Modifier, Soumettre, Relire</entry>

                        <entry>Invité</entry>
                    </row>

                    <row>
                        <entry>Éditeur</entry>

                        <entry>Publier, Archiver, Supprimer</entry>

                        <entry>Staff</entry>
                    </row>

                    <row>
                        <entry>Administrateur</entry>

                        <entry>(Reçoit tous les accès)</entry>

                        <entry>N/A</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>Pour cet exemple, <code>Zend_Acl_Role</code> est utilisé, mais n'importe quel objet qui implémente
        <code>Zend_Acl_Role_Interface</code> est acceptable. Ces groupes peuvent être ajoutés au registre des Rôles
        comme suit :</para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

// Ajoute des groupes au registre des Rôles en utilisant Zend_Acl_Role
require_once 'Zend/Acl/Role.php';

// Invité n'hérite d'aucun accès
$roleinvite = new Zend_Acl_Role('invite');
$acl->addRole($roleinvite);

// Staff hérite de Invité
$acl->addRole(new Zend_Acl_Role('staff'), $roleinvite);

// Ce que précède pourrait aussi être écrit:
// $acl->addRole(new Zend_Acl_Role('staff'), 'invite');

// Editeur hérite de staff
$acl->addRole(new Zend_Acl_Role('editeur'), 'staff');

// Administrateur n'hérite pas d'accès
$acl->addRole(new Zend_Acl_Role('administrateur'));]]></programlisting>
    </sect2>

    <sect2 id="zend.acl.introduction.defining">
        <title>Définir les Contrôles d'Accès</title>

        <para>Maintenant que l'ACL contient les Rôles nécessaires, on peut établir des règles qui définissent comment
        les Ressources accèdent aux Rôles. Vous avez sans doute noté que nous n'avons défini aucune Ressource
        particulière pour cet exemple, ce qui est plus simple pour illustrer comment les règles s'appliquent à toutes
        les Ressources. <code>Zend_Acl</code> fournit une implémentation dans laquelle les règles doivent simplement
        être assignées du général au particulier, ce qui réduit le nombre de règles spécifiques à ajouter. Ceci grâce à
        l'héritage.</para>

        <note>
            <para>Généralement <code>Zend_Acl</code> se conforme à une règle donnée si et seulement si une règle plus
            spécifique ne s'applique pas.</para>
        </note>

        <para>En conséquence, on peut définir un nombre assez complexe de règles avec un nombre minimal de code. Pour
        définir les permissions comme définies ci-dessus :</para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';

$roleinvite = new Zend_Acl_Role('invité');
$acl->addRole($roleinvite);
$acl->addRole(new Zend_Acl_Role('staff'), $roleinvite);
$acl->addRole(new Zend_Acl_Role('editeur'), 'staff');
$acl->addRole(new Zend_Acl_Role('administrateur'));

// Invité peut uniquement voir le contenu
$acl->allow($roleinvite, null, 'voir');

/* ce qui précède peut aussi être écrit :
 * $acl->allow('invité', null, 'voir');
 */

// Staff hérite des privilèges de Invité, mais a aussi ses propres privilèges
$acl->allow('staff', null, array('edit', 'submit', 'relire'));

// Editeur hérite les privilèges voir, modifier, soumettre, et relire de Staff,
// mais a aussi besoin de certains privilèges
$acl->allow('editeur', null, array('publier', 'archiver', 'supprimer'));

// Administrateur hérite de rien, mais reçoit tous les privilèges
$acl->allow('administrateur');]]></programlisting>

        <para>Les valeurs <code>null</code> dans les appels <code>allow()</code> ci-dessus sont utilisées pour indiquer
        que les règles s'appliquent à toutes les Ressources.</para>
    </sect2>

    <sect2 id="zend.acl.introduction.querying">
        <title>Interroger les ACL</title>

        <para>Nous avons maintenant un ACL flexible, qui peut être utilisé pour déterminer si l'objet appelant a les
        permissions pour réaliser les fonctions au sein de l'application web. Interroger l'ACL est assez simple en
        utilisant la méthode <code>isAllowed()</code> :</para>

        <programlisting role="php"><![CDATA[<?php
echo $acl->isAllowed('invité', null, 'voir') ?
     "autorisé" : "refusé"; // autorisé

echo $acl->isAllowed('staff', null, 'publier') ?
     "autorisé" : "refusé"; // refusé

echo $acl->isAllowed('staff', null, 'relire') ?
     "autorisé" : "refusé"; // autorisé

echo $acl->isAllowed('editeur', null, 'voir') ?
     "autorisé" : "refusé"; // autorisé parce que hérité de Invité

echo $acl->isAllowed('editeur', null, 'modifier') ?
     "autorisé" : "refusé"; // refusé parce qu'il n'y a pas de règle pour 'modifier'

echo $acl->isAllowed('administrateur', null, 'voir') ?
     "autorisé" : "refusé"; // autorisé car administrateur est autorisé pour tout

echo $acl->isAllowed('administrateur') ?
     "autorisé" : "refusé"; // autorisé car administrateur est autorisé pour tout

echo $acl->isAllowed('administrateur', null, 'modifier') ?
     "autorisé" : "refusé"; // autorisé car administrateur est autorisé pour tout
        ]]></programlisting>
    </sect2>
</sect1>