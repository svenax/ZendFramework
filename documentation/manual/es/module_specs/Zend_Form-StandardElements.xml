<sect1 id="zend.form.standardElements">
    <title>Standard Form Elements Shipped With Zend Framework</title>

    <para>
        Zend Framework ships with concrete element classes covering most HTML
        form elements. Most simply specify a particular view helper for use when
        decorating the element, but several offer additional functionality. The
        following is a list of all such classes, as well as descriptions of the
        functionality they offer.
    </para>

    <sect2 id="zend.form.standardElements.button">
        <title>Zend_Form_Element_Button</title>

        <para>
            Used for creating HTML button elements,
            <code>Zend_Form_Element_Button</code> extends <link
                linkend="zend.form.standardElements.submit">Zend_Form_Element_Submit</link>,
            deriving its custom functionality. It specifies the 'formButton'
            view helper for decoration.
        </para>

        <para>
            Like the submit element, it uses the element's label as the element
            value for display purposes; in other words, to set the text of the
            button, set the value of the element. The label will be translated
            if a translation adapter is present.
        </para>

        <para>
            Because the label is used as part of the element, the button element
            uses only the <link
                linkend="zend.form.standardDecorators.viewHelper">ViewHelper</link>
            and <link
                linkend="zend.form.standardDecorators.dtDdWrapper">DtDdWrapper</link>
            decorators.
        </para>

        <para>
            After populating or validating a form, you can check if the given
            button was clicked using the <code>isChecked()</code> method.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.captcha">
        <title>Zend_Form_Element_Captcha</title>

        <para>
            CAPTCHAs are used to prevent automated submission of forms by bots
            and other automated processes.
        </para>

        <para>
            The Captcha form element allows you to specify which <link
                linkend="zend.captcha.adapters">Zend_Captcha adapter</link> you
            wish to utilize as a form captcha. It then sets this adapter as a
            validator to the object, and uses a Captcha decorator for rendering
            (which proxies to the captcha adapter).
        </para>

        <para>
            Adapters may be any adapters in <code>Zend_Captcha</code>, as well
            as any custom adapters you may have defined elsewhere. To allow
            this, you may pass an additional plugin loader type key, 'CAPTCHA'
            or 'captcha', when specifying a plugin loader prefix path:
        </para>

        <programlisting role="php"><![CDATA[
$element->addPrefixPath('My_Captcha', 'My/Captcha/', 'captcha');
]]>
        </programlisting>

        <para>
            Captcha's may then be registered using the <code>setCaptcha()</code>
            method, which can take either a concrete captcha instance, or the
            short name of a captcha adapter:
        </para>

        <programlisting role="php"><![CDATA[
// Concrete instance:
$element->setCaptcha(new Zend_Captcha_Figlet());

// Using shortnames:
$element->setCaptcha('Dumb');
]]>
        </programlisting>

        <para>
            If you wish to load your element via configuration, specify either
            the key 'captcha' with an array containing the key 'captcha', or
            both the keys 'captcha' and 'captchaOptions':
        </para>

        <programlisting role="php"><![CDATA[
// Using single captcha key:
$element = new Zend_Form_Element_Captcha('foo', array(
    'label' => "Please verify you're a human",
    'captcha' => array(
        'captcha' => 'Figlet',
        'wordLen' => 6,
        'timeout' => 300,
    ),
));

// Using both captcha and captchaOptions:
$element = new Zend_Form_Element_Captcha('foo', array(
    'label' => "Please verify you're a human"
    'captcha' => 'Figlet',
    'captchaOptions' => array(
        'captcha' => 'Figlet',
        'wordLen' => 6,
        'timeout' => 300,
    ),
));
]]>
        </programlisting>

        <para>
            The decorator used is determined by querying the captcha adapter. By
            default, the <link
                linkend="zend.form.standardDecorators.captcha">Captcha
                decorator</link> is used, but an adapter may specify a different
            one via its <code>getDecorator()</code> method.
        </para>

        <para>
            As noted, the captcha adapter itself acts as a validator for the
            element. Additionally, the NotEmpty validator is not used, and the
            element is marked as required. In most cases, you should need to do
            nothing else to have a captcha present in your form.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.checkbox">
        <title>Zend_Form_Element_Checkbox</title>

        <para>
            HTML checkboxes allow you return a specific value, but basically
            operate as booleans: when it is checked, the value is submitted;
            when it's not checked, nothing is submitted. Internally,
            Zend_Form_Element_Checkbox enforces this state.
        </para>

        <para>
            By default, the checked value is '1', and the unchecked value '0'.
            You can specify the values to use using the
            <code>setCheckedValue()</code> and <code>setUncheckedValue()</code>
            accessors, respectively. Internally, any time you set the value, if
            the provided value matches the checked value, then it is set, but
            any other value causes the unchecked value to be set.
        </para>

        <para>
            Additionally, setting the value sets the <code>checked</code>
            property of the checkbox. You can query this using
            <code>isChecked()</code> or simply accessing the property. Using the
            <code>setChecked($flag)</code> method will both set the state of the
            flag as well as set the appropriate checked or unchecked value in the
            element. Please use this method when setting the checked state of a
            checkbox element to ensure the value is set properly.
        </para>

        <para>
            <code>Zend_Form_Element_Checkbox</code> uses the 'formCheckbox' view
            helper. The checked value is always used to populate it.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.file">
        <title>Zend_Form_Element_File</title>

        <para>
            The File form element provides a mechanism for supplying file upload
            fields to your form. It utilizes <link
                linkend="zend.file.transfer.introduction">Zend_File_Transfer</link>
            internally to provide this functionality, and the
            <code>FormFile</code> view helper as also the <code>File</code>
            decorator to display the form element.
        </para>

        <para>
            By default, it uses the <code>Http</code> transfer adapter, which
            introspects the <code>$_FILES</code> array and allows you to attach
            validators and filters. Validators and filters attached to the form
            element will be attached to the transfer adapter.
        </para>

        <example id="zend.form.standardElements.file.usage">
            <title>File form element usage</title>

            <para>
                The above explanation of using the File form element may seem
                arcane, but actual usage is relatively trivial:
            </para>

            <programlisting role="php"><![CDATA[
$element = new Zend_Form_Element_File('foo');
$element->setLabel('Upload an image:')
        ->setDestination('/var/www/upload');
// ensure only 1 file
$element->addValidator('Count', false, 1);
// limit to 100K
$element->addValidator('Size', false, 102400);
// only JPEG, PNG, and GIFs
$element->addValidator('Extension', false, 'jpg,png,gif');
$form->addElement($element, 'foo');
]]>
            </programlisting>

            <para>
                You also need to ensure the correct encoding type is provided to
                the form; you should use 'multipart/form-data'. You can do this
                by setting the 'enctype' attribute on the form:
            </para>

            <programlisting role="php"><![CDATA[
$form->setAttrib('enctype', 'multipart/form-data');
]]>
            </programlisting>

            <para>
                When the form has successfully validated, you have to receive the file
                to store it in the final destination using receive(). Additionally you
                can determinate the final location using getFileName():
            </para>

            <programlisting role="php"><![CDATA[
if (!$form->isValid) {
    print "Ohoh... validation error";
}

if (!$form->foo->receive()) {
    print "Error receiving the file";
}

$location = $form->foo->getFileName();
]]>
            </programlisting>

        </example>

        <note>
            <title>Default upload locations</title>

            <para>
                By default, files are uploaded to the system temp directory.
            </para>
        </note>

        <note>
            <title>File values</title>

            <para>
                Within HTTP a file element has no value. Therefor and because of
                security reasons you will only get the uploaded filename by calling
                getValue() and not the complete path. If you need the full informations
                call getFileName()you will return you path and name of the file.
            </para>
        </note>

        <para>
            <code>Zend_Form_Element_File</code> supports also multiple files.
            By calling the <code>setMultiFile($count)</code> method you can set
            the ammount of file elements you want to create. This prevents you
            from setting the same settings multiple times.
        </para>

        <example id="zend.form.standardElements.file.multiusage">
            <title>Setting multiple files</title>

            <para>
                Creating a multifile element is the same like setting a single
                element. Just call <code>setMultiFile()</code> additionally after
                creation:
            </para>

            <programlisting role="php"><![CDATA[
$element = new Zend_Form_Element_File('foo');
$element->setLabel('Upload an image:')
        ->setDestination('/var/www/upload');
// ensure minimum 1, maximum 3 files
$element->addValidator('Count', false, array('min' => 1, 'max' => 3));
// limit to 100K
$element->addValidator('Size', false, 102400);
// only JPEG, PNG, and GIFs
$element->addValidator('Extension', false, 'jpg,png,gif');
// defines 3 identical file elements
$element->setMultiFile(3);
$form->addElement($element, 'foo');
]]>
            </programlisting>

            <para>
                In your view you will now get 3 identical file upload elements which
                all share the same settings. To get the set multifile number simply call
                <code>getMultiFile()</code>.
            </para>

        </example>

        <note>
            <title>File elements in Subforms</title>

            <para>
                When you use file elements in subforms you must set unique names.
                So when you named you file element in subform1 "file", you must give
                it a different name in subform2.
            </para>

            <para>
                As soon as there are 2 identical named file elements, the second
                element would not be displayed or submitted.
            </para>
        </note>

        <para>
            To limit the size of the file, which is uploaded by the client, you should
            additionally set the maximum file size the form accepts. This will limit
            the size on the client side by setting the <code>MAX_FILE_SIZE</code>
            option on the form. As soon as you set this value by using the
            <code>setMaxFileSize($size)</code> method, it will be rendered with the
            file element.
        </para>

        <programlisting role="php"><![CDATA[
$element = new Zend_Form_Element_File('foo');
$element->setLabel('Upload an image:')
        ->setDestination('/var/www/upload')
        ->addValidator('Size', false, 102400) // limit to 100K
        ->setMaxFileSize(102400); // limits the filesize on the client side
$form->addElement($element, 'foo');
]]>
        </programlisting>

        <note>
            <title>MaxFileSize with multiple file elements</title>

            <para>
                When you use multiple file elements in your form you will have to set
                the <code>MAX_FILE_SIZE</code> only once. Setting it again will
                overwrite the previous set value.
            </para>

            <para>
                Note, that you can set <code>MAX_FILE_SIZE</code> only once, even if you
                use multiple forms.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.form.standardElements.hidden">
        <title>Zend_Form_Element_Hidden</title>

        <para>
            Hidden elements merely inject data that should be submitted, but
            which the user should not manipulate.
            <code>Zend_Form_Element_Hidden</code> accomplishes this through use
            of the 'formHidden' view helper.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.hash">
        <title>Zend_Form_Element_Hash</title>

        <para>
            This element provides protection from CSRF attacks on forms,
            ensuring the data is submitted by the user session that generated
            the form and not by a rogue script. Protection is achieved by adding
            a hash element to a form and verifying it when the form is
            submitted.
        </para>

        <para>
            The name of the hash element should be unique. It is recommended to use
            the <literal>salt</literal> option for the element, two hashes with
            same names and different salts would not collide:
        </para>

        <programlisting role="php"><![CDATA[
$form->addElement('hash', 'no_csrf_foo', array('salt' => 'unique'));
]]>
        </programlisting>

        <para>
            You can set the salt later using the <code>setSalt($salt)</code>
            method.
        </para>

        <para>
            Internally, the element stores a unique identifier using
            <code>Zend_Session_Namespace</code>, and checks for it at
            submission (checking that the TTL has not expired). The 'Identical'
            validator is then used to ensure the submitted hash matches the
            stored hash.
        </para>

        <para>
            The 'formHidden' view helper is used to render the element in the
            form.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.Image">
        <title>Zend_Form_Element_Image</title>

        <para>
            Images can be used as form elements, and allow you to specify
            graphical elements as form buttons.
        </para>

        <para>
            Images need an image source. <code>Zend_Form_Element_Image</code>
            allows you to specify this by using the <code>setImage()</code>
            accessor (or 'image' configuration key). You can also optionally specify a value to use when
            submitting the image using the <code>setImageValue()</code> accessor
            (or 'imageValue' configuration key). When the value set for the
            element matches the <code>imageValue</code>, then the accessor
            <code>isChecked()</code> will return true.
        </para>

        <para>
            The Image element uses the
            <link linkend="zend.form.standardDecorators.image">Image
                Decorator</link> for rendering (as well as the standard Errors,
            HtmlTag, and Label decorators). You can optionally specify a tag to
            the <code>Image</code> decorator that will then wrap the image
            element.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.multiCheckbox">
        <title>Zend_Form_Element_MultiCheckbox</title>

        <para>
            Often you have a set of related checkboxes, and you wish to group
            the results. This is much like a <link
                linkend="zend.form.standardElements.multiselect">Multiselect</link>,
            but instead of them being in a dropdown list, you need to show
            checkbox/value pairs.
        </para>

        <para>
            <code>Zend_Form_Element_MultiCheckbox</code> makes this a snap. Like
            all other elements extending the base Multi element, you can specify
            a list of options, and easily validate against that same list. The
            'formMultiCheckbox' view helper ensures that these are returned as
            an array in the form submission.
        </para>

        <para>
            By default, this element registers an <code>InArray</code> validator
            which validates against the array keys of registered options. You
            can disable this behavior by either calling
            <code>setRegisterInArrayValidator(false)</code>, or by passing a
            false value to the <code>registerInArrayValidator</code>
            configuration key.
        </para>

        <para>
            You may manipulate the various checkbox options using the following
            methods:
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (overwrites existing options)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>

        <para>
            To mark checked items, you need to pass an array of values to
            <code>setValue()</code>. The following will check the values "bar"
            and "bat":
        </para>

        <programlisting role="php"><![CDATA[
$element = new Zend_Form_Element_MultiCheckbox('foo', array(
    'multiOptions' => array(
        'foo' => 'Foo Option',
        'bar' => 'Bar Option',
        'baz' => 'Baz Option',
        'bat' => 'Bat Option',
    );
));

$element->setValue(array('bar', 'bat'));
]]>
        </programlisting>

        <para>
            Note that even when setting a single value, you must pass an array.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.multiselect">
        <title>Zend_Form_Element_Multiselect</title>

        <para>
            XHTML <code>select</code> elements allow a 'multiple' attribute,
            indicating multiple options may be selected for submission, instead
            of the usual one. <code>Zend_Form_Element_Multiselect</code> extends
            <link
                linkend="zend.form.standardElements.select">Zend_Form_Element_Select</link>,
            and sets the <code>multiple</code> attribute to 'multiple'. Like
            other classes that inherit from the base
            <code>Zend_Form_Element_Multi</code> class, you can manipulate the
            options for the select using:
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (overwrites existing options)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>

        <para>
            If a translation adapter is registered with the form and/or element,
            option values will be translated for display purposes.
        </para>

        <para>
            By default, this element registers an <code>InArray</code> validator
            which validates against the array keys of registered options. You
            can disable this behavior by either calling
            <code>setRegisterInArrayValidator(false)</code>, or by passing a
            false value to the <code>registerInArrayValidator</code>
            configuration key.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.password">
        <title>Zend_Form_Element_Password</title>

        <para>
            Password elements are basically normal text elements -- except that
            you typically do not want the submitted password displayed in error
            messages or the element itself when the form is re-displayed.
        </para>

        <para>
            <code>Zend_Form_Element_Password</code> achieves this by calling
            <code>setObscureValue(true)</code> on each validator (ensuring that
            the password is obscured in validation error messages), and using
            the 'formPassword' view helper (which does not display the value
            passed to it).
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.radio">
        <title>Zend_Form_Element_Radio</title>

        <para>
            Radio elements allow you to specify several options, of which you
            need a single value returned. <code>Zend_Form_Element_Radio</code>
            extends the base <code>Zend_Form_Element_Multi</code> class,
            allowing you to specify a number of options, and then uses the
            <code>formRadio</code> view helper to display these.
        </para>

        <para>
            By default, this element registers an <code>InArray</code> validator
            which validates against the array keys of registered options. You
            can disable this behavior by either calling
            <code>setRegisterInArrayValidator(false)</code>, or by passing a
            false value to the <code>registerInArrayValidator</code>
            configuration key.
        </para>

        <para>
            Like all elements extending the Multi element base class, the
            following methods may be used to manipulate the radio options
            displayed:
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (overwrites existing options)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.form.standardElements.reset">
        <title>Zend_Form_Element_Reset</title>

        <para>
            Reset buttons are typically used to clear a form, and are not part
            of submitted data. However, as they serve a purpose in the display,
            they are included in the standard elements.
        </para>

        <para>
            <code>Zend_Form_Element_Reset</code> extends <link
                linkend="zend.form.standardElements.submit">Zend_Form_Element_Submit</link>.
            As such, the label is used for the button display, and will be
            translated if a translation adapter is present. It utilizes only the
            'ViewHelper' and 'DtDdWrapper' decorators, as there should never be
            error messages for such elements, nor will a label be necessary.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.select">
        <title>Zend_Form_Element_Select</title>

        <para>
            Select boxes are a common way of limiting to specific choices for a
            given form datum. <code>Zend_Form_Element_Select</code> allows you
            to generate these quickly and easily.
        </para>

        <para>
            By default, this element registers an <code>InArray</code> validator
            which validates against the array keys of registered options. You
            can disable this behavior by either calling
            <code>setRegisterInArrayValidator(false)</code>, or by passing a
            false value to the <code>registerInArrayValidator</code>
            configuration key.
        </para>

        <para>
            As it extends the base Multi element, the following methods may be
            used to manipulate the select options:
        </para>

        <itemizedlist>
            <listitem><para><code>addMultiOption($option, $value)</code></para></listitem>

            <listitem><para><code>addMultiOptions(array $options)</code></para></listitem>

            <listitem><para><code>setMultiOptions(array $options)</code>
                    (overwrites existing options)</para></listitem>

            <listitem><para>getMultiOption($option)</para></listitem>

            <listitem><para>getMultiOptions()</para></listitem>

            <listitem><para><code>removeMultiOption($option)</code></para></listitem>

            <listitem><para><code>clearMultiOptions()</code></para></listitem>
        </itemizedlist>

        <para>
            <code>Zend_Form_Element_Select</code> uses the 'formSelect' view
            helper for decoration.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.submit">
        <title>Zend_Form_Element_Submit</title>

        <para>
            Submit buttons are used to submit a form. You may use multiple
            submit buttons; you can use the button used to submit the form to
            decide what action to take with the data submitted.
            <code>Zend_Form_Element_Submit</code> makes this decisioning easy,
            by adding a <code>isChecked()</code> method; as only one button
            element will be submitted by the form, after populating or
            validating the form, you can call this method on each submit button
            to determine which one was used.
        </para>

        <para>
            <code>Zend_Form_Element_Submit</code> uses the label as the "value"
            of the submit button, translating it if a translation adapter is
            present. <code>isChecked()</code> checks the submitted value against
            the label in order to determine if the button was used.
        </para>

        <para>
            The <link
                linkend="zend.form.standardDecorators.viewHelper">ViewHelper</link>
            and <link
                linkend="zend.form.standardDecorators.dtDdWrapper">DtDdWrapper</link>
            decorators to render the element. No label decorator is used, as the
            button label is used when rendering the element; also, typically,
            you will not associate errors with a submit element.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.text">
        <title>Zend_Form_Element_Text</title>

        <para>
            By far the most prevalent type of form element is the text element,
            allowing for limited text entry; it's an ideal element for most data
            entry. <code>Zend_Form_Element_Text</code> simply uses the
            'formText' view helper to display the element.
        </para>
    </sect2>

    <sect2 id="zend.form.standardElements.textarea">
        <title>Zend_Form_Element_Textarea</title>

        <para>
            Textareas are used when large quantities of text are expected, and
            place no limits on the amount of text submitted (other than maximum
            size limits as dictated by your server or PHP).
            <code>Zend_Form_Element_Textarea</code> uses the 'textArea' view
            helper to display such elements, placing the value as the content of
            the element.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 tw=80 et:
-->
