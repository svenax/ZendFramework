<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 15103 -->
<!-- Reviewed: no -->
<sect1 id="zend.debug.dumping">

    <title>Mostrar información de variables(Dumping Variables)</title>

    <para>
        El método estático <classname>Zend_Debug::dump()</classname> imprime o devuelve
        información sobre una expresión. Esta sencilla técnica de depuración es
        común, porque es fácil de utilizar en caliente y no requiere
        inicialización, herramientas especiales, o la depuración del entorno.
    </para>

    <example id="zend.debug.dumping.example">
        <title>Ejemplo del método dump()</title>
         <programlisting language="php"><![CDATA[

Zend_Debug::dump($var, $label=null, $echo=true);
]]></programlisting>
    </example>

    <para>
        El argumento <methodname>$var</methodname> especifica la expresión o variable sobre
        la cual el método <classname>Zend_Debug::dump()</classname> generará información.
    </para>

    <para>
        El argumento boleano <methodname>$echo</methodname> especifica si la salida de
        <classname>Zend_Debug::dump()</classname> es o no mostrada. Si es
        <methodname>verdadera</methodname>, la salida es mostrada. A pesar del valor del
        argumento <methodname>$echo</methodname>, el retorno de este método contiene la
        salida.
    </para>

    <para>
        Puede ser útil comprender que el método <classname>Zend_Debug::dump()</classname>
        envuelve la función de PHP
        <ulink url="http://php.net/var_dump"><methodname>var_dump()</methodname></ulink>.
        Si el flujo de salida es detectado como una presentación de la web, la
        salida de <methodname>var_dump()</methodname> es escapada usando
        <ulink url="http://php.net/htmlspecialchars"><methodname>htmlspecialchars()</methodname></ulink>
        y envuelta con el tag (X)HTML <methodname>pre</methodname>.
    </para>

    <tip>
        <title>Depurando con Zend_Log</title>
        <para>
            Usar <classname>Zend_Debug::dump()</classname> es lo mejor para la depuración
            en caliente durante el desarrollo de software. Puede añadir el código para
            volcar una variable y después quitar el código fácilmente.
        </para>
        <para>
            También considere el componente <link linkend="zend.log.overview">
            Zend_Log</link> escribiendo el código de depuración más
            permanente. Por ejemplo, puede utilizar el nivel de log de
            <methodname>DEPURACIÓN</methodname> y el Stream log writer, para mostrar la
            cadena de salida de <classname>Zend_Debug::dump()</classname>.
        </para>
    </tip>

</sect1>
<!--
    vim:se ts=4 sw=4 et:
-->