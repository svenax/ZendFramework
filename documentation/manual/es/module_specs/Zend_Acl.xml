<sect1 id="zend.acl.introduction">
    <title>Introducci&#243;n</title>

    <para>
	    Zend_Acl proporciona la funcionalidad de Listas de Control de Acceso (ACL por sus siglas en ingles) y privilegios de administraci&#243;n de una forma flexible y ligera. En general, una aplicacion puede utilizar esta funcionalidad para controlar el acceso a ciertos objetos que estan protegidos cuando otros objetos intentan acceder a estos.
    </para>

    <para>
	Para los propositos de esta documentaci&#243;n,
        <itemizedlist>
            <listitem>
                <para>
		Un <emphasis role="strong">Recurso</emphasis> es un objeto al cual el acceso esta controlado.
                </para>
            </listitem>
            <listitem>
                <para>
		Un <emphasis role="strong">Rol</emphasis> es un objeto que puede solicitar acceso a un Recurso.
                </para>
            </listitem>
        </itemizedlist>
	En terminos generales, <emphasis role="strong">Los roles solicitan acceso a los Recursos</emphasis>.
	Por ejemplo, si una persona solicita acceso a un automovil, entonces la persona se convierte en el Rol solicitante, y el automovil en el Recurso, puesto que el acceso al automovil esta bajo control.
    </para>

    <para>
	A traves de la especificaci&#243;n y uso de Listas de Control de Acceso (ACL), una aplicacion puede controlar como los objetos solicitantes (Roles) han obtenido acceso a objetos protegidos (Recursos).
    </para>

    <sect2 id="zend.acl.introduction.resources">
        <title>Acerca de los Recursos</title>
        <para>
	    En Zend_Acl, crear un Recurso es muy sencillo. Zend_Acl proporciona el <code>Zend_Acl_Resource_Interface</code> para facilitar a los desarrolladores la creacci&#243;n de Recursos. Una clase solo necesita implementar su interfaz, la cual consiste en un metodo unico, <code>getResourceId()</code>, para que Zend_Acl considere el objeto como un Recurso. Adicionalmente, <code>Zend_Acl_Resource</code> se incluye con Zend_Acl como una implementacion principal de Recursos para los desarrolladores para extenderla hasta donde lo deseen.
	</para>
        <para>
	    Zend_Acl provee un estructura de &#225;rbol a la cual pueden ser agregados multiples Recursos (o "Areas con Controles de Acceso").Ya que los Recursos son almacenados en esta estructura de &#225;rbol, estos pueden ser organizados desde lo general (hacia la raiz del &#225;rbol) a lo espec&#237;fico (hacia las ramas del &#225;rbol). Consultas sobre un Recurso espec&#237;fico automaticamente buscar&#225;n en la jerarqu&#237;a del Recurso por reglas asignadas a Recursos anteriores a los que el Recurso actual haga referencia, permitiendo la herencia simple de reglas. Por ejemplo, si una regla por defecto se aplicar&#225; a cada edificio en una ciudad, uno simplemente podria asignar la regla a la ciudad, en lugar de asignar la misma regla a cada edificio. Algunos edificios pueden necesitar excepciones a la regla, sin embargo, y esto es facil de hacer en Zend_Acl asignando esta excepci&#243;n a cada edificio que necesite una excepci&#243;n a la regla. Un Recurso solo puede heredar de un Recurso padre, aunque este Recurso padre puede tener a la vez su propio Recurso padre, y as&#237; sucesivamente.
        </para>
        <para>
	    Zend_Acl tambien soporta privilegios sobre Recursos (ej. "crear","leer","actualizar", "borrar"), y el desarrollador puede asignar reglas que afecten o a todos los privilegios o a privilegios espec&#237;ficos sobre un Recurso.
        </para>
    </sect2>

    <sect2 id="zend.acl.introduction.roles">
        <title>Acerca de las Reglas</title>
        <para>
	    Al igual que los Recursos, la creaci&#243;n de un Rol tambien es muy simple. Zend_Acl proporciona <code>Zend_Acl_Role_Interface</code> para facilitar a los desarrolladores la creaci&#243;n de Roles. Una clase solo necesita la implementacion de su interfaz, la cual consiste en un metodo unico, <code>getRoleId()</code>, para que Zend_Acl considere que el objeto es un Rol. Adicionalmente, <code>Zend_Acl_Role</code> esta incluido con Zend_Acl como una implementacion principal del Rol para que los desarrolladores la extiendan hasta donde lo deseen.
        </para>
        <para>
	    En Zend_Acl, un Rol puede heredar de otro o mas Roles. Esto es para sportar herencia de reglas entre Roles. Por ejemplo, un Rol de usuario, como "sally", puede estar bajo uno o mas Roles padre, como "editor" y "administrador". El desarrollador puede asignar reglas a "editor" y "administrador" por separado, y "sally" puede heredar tales reglas de ambos, sin teher que asignar reglas directamente a "sally".
        </para>
        <para>
	    Dado que la habilidad de herencia desde multiples roles es muy util, multiples herencias tambien introduce cierto grado de complejidad. El siguiente ejemplo ilustra la condicion de ambiguedad y como Zend_Acl soluciona esto.
        </para>
        <example id="zend.acl.introduction.roles.example.multiple_inheritance">
	    <title>Herencia Multiple entre Roles</title>
            <para>
		El siguiente codigo define tres Roles principales - "<code>invitado</code>", "<code>miembro</code>", y "<code>admin</code>" - de los cuales otros Roles pueden heredar. Entonces, un Rol identificado como "<code>unUsuario</code>" es colocado y hereda de estos tres Roles. El orden en el cual estos Roles aparecen en el arreglo <code>$parents</code> es importante. Cuando es necesario, Zend_Acl busca por reglas de acceso definidas no solo para el Rol solicitado (aqui, "<code>unUsuario</code>"), sino tambien sobre los Roles heredados (aqui, "<code>invitado</code>", "<code>miembro</code>", y "<code>admin</code>"):
            </para>
            <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';
$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';
$acl->addRole(new Zend_Acl_Role('invitado'))
    ->addRole(new Zend_Acl_Role('miembro'))
    ->addRole(new Zend_Acl_Role('admin'));

$parents = array('invitado', 'miembro', 'admin');
$acl->addRole(new Zend_Acl_Role('unUsuario'), $parents);

require_once 'Zend/Acl/Resource.php';
$acl->add(new Zend_Acl_Resource('unRecurso'));

$acl->deny('invitado', 'unRecurso');
$acl->allow('miembro', 'unRecurso');

echo $acl->isAllowed('unUsuario', 'unRecurso') ? 'permitido' : 'denegado';]]>
            </programlisting>
            <para>
		Desde aqui no hay reglas especificamente definidas para el Rol "<code>unUsuario</code>" y "<code>unRecurso</code>", Zend_Acl debe buscar por reglas que pueden estar definidas para Roles "<code>unUsuario</code>" hereda. Primero, el rol "<code>admin</code>" es visitado, y aqui no hay regla de acceso definida para este. Luego, el rol "<code>miembro</code>" es visitado, y Zend_Acl encuentra que aqui hay una regla especificando que "<code>miembro</code>" tiene permiso para acceder a "<code>unRecurso</code>".
            </para>
            <para>
		Asi Zend_Acl va a seguir examinando las reglas definidas para otros Roles padre, sin embargo, encontraria que "<code>invitado</code>" tiene el acceso denegado a "<code>unRecurso</code>". Este hecho introduce una ambieguedad debido a que ahora "<code>unUsuario</code>" esta tanto denegado como permitido de acceder a "<code>unRecurso</code>", por la razon de tener un conflicto de reglas heredades de diferentes Roles padre.
            </para>
            <para>
		Zend_Acl resuelve esta ambiguedad completando la consulta cuando encuentra la primera regla que es directamente aplicable a la consulta. En este caso, dado que el Rol "<code>miembro</code>" es examinado antes que el Rol "<code>invitado</code>", el codigo de ejemplo  puede imprimir "<code>permitido</code>".
            </para>
        </example>
        <note>
            <para>
		Cuando se especifican multiples padres para un Rol, se debe tener en cuenta que el ultimo padre listado es el primero en ser buscado por reglas aplicables para una solicitud de autorizacion.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.creating">
	<title>Creando las Listas de Control de Acceso (ACL)</title>

        <para>
	    Una ACL puede representar cualquier grupo de objetos fisicos o virtuales que tu desees.
	    Para propositos de demostracion, sin embargo, crearemos un ACL basico para un Sistema de Administracion de Contenido que mantendra varias escalas de grupos sobre una amplia variedad de areas. Para crear un nuevo objeto ACL, iniciamos la ACL sin parametros:
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();]]>
        </programlisting>

        <note>
            <para>
		Mientras un desarrollador especifica una regla "permitido", Zend_Acl denega el acceso a cada privilegio sobre cada Recurso para cada Rol.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.acl.introduction.role_registry">
        <title>Registrando Roles</title>

        <para>
	    El Sistema de Administracion de Contenido, a la brevedad siempre necesita una jerarquia de permisos para determinar las capacidad de autoria de sus usuarios. Alli puede estar un grupo de 'Invitados' para permitir acceso limitado para demostraciones, un grupo de 'Personal' para la mayoria de usuarios del CMS quienes realizan la mayor parte de operaciones del dia a dia, un grupo 'Editores' para las responsabilidades de publicacion, revision, archivo y eliminacion de contenido, y finalmente un grupo 'Administradores' cuya tarea puede incluir todas las de los otros grupos y tambien el mantenimiento de la informacion sensible, manejo de usuarios, configuracion de los datos basicos y su respaldo/exportacion. Este grupo de permisos pueden ser representados en un registro de Roles, permitiendo a cada grupo heredar los privilegios de los grupos 'padre', al igual que proporcionando distintos privilegios solo para su grupo individual.
        </para>

        <table id="zend.acl.introduction.role_registry.table.example_cms_access_controls">
          <title>Controles de Acceso para un CMS de ejemplo</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Nombre</entry>
                <entry>Permisos Individuales</entry>
                <entry>Hereda permisos de</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Invitado</entry>
                <entry>Ver</entry>
                <entry>N/A</entry>
              </row>
              <row>
                <entry>Personal</entry>
                <entry>Editar, Enviar, Revisar</entry>
                <entry>Invitado</entry>
              </row>
              <row>
                <entry>Editor</entry>
                <entry>Publicar, Archivar, Eliminar</entry>
                <entry>Personal</entry>
              </row>
              <row>
                <entry>Administrador</entry>
                <entry>(Todos los accesos Permitidos)</entry>
                <entry>N/A</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
	    Para este ejemplo, se uso <code>Zend_Acl_Role</code>, pero cualquier objeto que implemente <code>Zend_Acl_Role_Interface</code> es aceptado. Estos grupos pueden ser agragados al registro de Roles de la siguiente manera:
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

// Agregar grupos al registro de Roles usando Zend_Acl_Role
require_once 'Zend/Acl/Role.php';

// Invitado no hereda controles de acceso
$rolInvitado = new Zend_Acl_Role('invitado');
$acl->addRole($rolInvitado);

// Personal hereda de Invitado
$acl->addRole(new Zend_Acl_Role('personal'), $rolInvitado);

/* alternativamente, lo de arriba puede ser escrito asi:
$rolInvitado = $acl->addRole(new Zend_Acl_Role('personal'), 'invitado');
//*/

// Editor hereda desde personal
$acl->addRole(new Zend_Acl_Role('editor'), 'personal');

// Administrador no hereda controles de acceso
$acl->addRole(new Zend_Acl_Role('administrador'));]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.acl.introduction.defining">
        <title>Definiendo Controles de Acceso</title>

        <para>
	    Ahora que la ACL contiene los Roles relevantes, reglas pueden ser hechas que definan como los Roles pueden acceder a los Recursos. Ten en cuenta que no definiremos ningun Recurso en particular para este ejemplo, el cual es simplificado para ilustrar que las reglas se aplican a todos los Recursos.
	    Zend_Acl proporciona una forma practica por la cual las reglas solo necesitan ser asignadas de lo general a lo especifico, minimizando el numero de reglas necesarias, porque los Recursos y Roles heredan reglas que estan definidas en sus padres.
        </para>

        <para>
	    Consecuentemente, podemos definir un grupo razonablemente complejo de reglas con un minimo de codigo.
	    Para aplicar estos permisos basicos como estan definidos arriba:
        </para>

        <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Acl.php';

$acl = new Zend_Acl();

require_once 'Zend/Acl/Role.php';

$rolInvitado = new Zend_Acl_Role('invitado');
$acl->addRole($rolInvitado);
$acl->addRole(new Zend_Acl_Role('personal'), $rolInvitado);
$acl->addRole(new Zend_Acl_Role('editor'), 'personal');
$acl->addRole(new Zend_Acl_Role('administrador'));

// Invitado solo puede ver el contenido
$acl->allow($rolInvitado, null, 'ver');

/* Lo de arriba puede ser escrito de la siguiente forma alternativa:
$acl->allow('invitado', null, 'ver');
//*/

// Personal hereda el privilegio de ver de invitado, pero tambien necesita privilegios adicionales
$acl->allow('personal', null, array('editar', 'enviar', 'revisar'));

// Editor hereda los privilegios de ver, editar, enviar, y revisar de personal, 
// pero tambien necesita privilegios adicionales
$acl->allow('editor', null, array('publicar', 'archivar', 'eliminar'));

// Administrador no hereda nada, pero tiene todos los privilegios permitidos
$acl->allow('administrador');]]>
        </programlisting>

        <para>
	    El valor <code>null</code> en las llamadas de <code>allow()</code> es usado para indicar que las reglas de permiso se aplican a todos los Recursos.
        </para>

    </sect2>

    <sect2 id="zend.acl.introduction.querying">
        <title>Consultando la ACL</title>

        <para>
	    Ahora tenemos una ACL flexible que puede ser usada para determinar que solicitantes tienen permisos para realizar funciones a traves de la aplicacion web. Ejecutando consultas es la forma mas simple de usar el metodo <code>isAllowed()</code>:
        </para>

        <programlisting role="php"><![CDATA[<?php
echo $acl->isAllowed('invitado', null, 'ver') ?
     "permitido" : "denegado"; // permitido

echo $acl->isAllowed('personal', null, 'publicar') ?
     "permitido" : "denegado"; // denegado

echo $acl->isAllowed('personal', null, 'revisar') ?
     "permitido" : "denegado"; // permitido

echo $acl->isAllowed('editor', null, 'ver') ?
     "permitido" : "denegado"; // permitido debido a la herencia de invitado

echo $acl->isAllowed('editor', null, 'actualizar') ?
     "permitido" : "denegado"; // denegado debido a que no hay regla de permiso para 'actualizar'

echo $acl->isAllowed('administrador', null, 'ver') ?
     "permitido" : "denegado"; // permitido porque administrador tiene permitidos todos los privilegios

echo $acl->isAllowed('administrador') ?
     "permitido" : "denegado"; // permitido porque administrador tiene permitidos todos los privilegios

echo $acl->isAllowed('administrador', null, 'actualizar') ?
     "permitido" : "denegado"; // permitido porque administrador tiene permitidos todos los privilegios]]>
        </programlisting>

    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
