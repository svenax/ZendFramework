<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 14844 -->
<sect1 id="zend.service.amazon.ec2.securitygroups">
    <title>Zend_Service_Amazon_Ec2: Sicherheitsgruppen</title>

    <para>
        Eine Sicherheitsgruppe ist eine benante Sammlung von Zugriffsregeln. Diese Zugriffsregeln
        spezifizieren welcher zufließende (z.B. hereinkommende) Netzwerkverkehr an die Instanz
        zugestellt werden soll. Jeder andere zufließende Verkehr wird weggeworfen.
    </para>
    <para>
        Man kann die Regeln für Gruppen jederzeit verändern. Die neuen Regeln werden automatisch
        für alle laufenden Instanzen, und Instanzen die in Zukunft gestartet werden, erzwungen.
    </para>
    <note>
        <title>Maximale Sicherheitsgruppen</title>
        <para>Man kann bis zu 100 Sicherheitsgruppen erstellen.</para>
    </note>

    <sect2 id="zend.service.amazon.ec2.securitygroups.maintenance">
        <title>Wartung von Sicherheitsgruppen</title>

        <example id="zend.service.amazon.ec2.securitygroups.maintenance.create">
            <title>Eine neue Sicherheitsgruppe erstellen</title>
            <para>
                <code>create</code> erstellt eine neue Sicherheitsgruppe. Jede Instanz wird in
                einer Sicherheitsgruppe gestartet. Wenn wärend dem Start keine Sicherheitsgruppe
                spezifiziert wurde, werden die Instanzen in der standardmäßigen sicherheitsgruppe
                gestartet. Instanzen mit der gleichen Sicherheitsgruppe haben untereinander
                unbegrenzten Netzwerkzugriff. Instanzen verhindern jeden Versuch eines
                Netzwerkzugriffs von anderen Instanzen aus unterschiedlichen Sicherheitsgruppen.
            </para>
            <para>
                <code>create</code> gibt ein boolsches true oder false zurück
            </para>

            <programlisting role="php"><![CDATA[
$ec2_sg = new Zend_Service_Amazon_Ec2_Securitygroups('aws_key',
                                                     'aws_secret_key');
$return = $ec2_sg->create('mygroup', 'my group description');
]]>
            </programlisting>
        </example>

        <example id="zend.service.amazon.ec2.securitygroups.maintenance.describe">
            <title>Eine Sicherheitsgruppe beschreiben</title>
            <para>
                <code>describe</code> gibt Informationen über die Sicherheitsgruppen zurück welche
                einem selbst gehören.
            </para>
            <para>
                Wenn Namen von Sicherheitsgruppen spezifiziert werden, werden Informationen über
                diese Sicherheitsgruppen zurückgegeben. Andernfalls, werden Informationen über
                alle Sicherheitsgruppen zurückgegeben. Wenn eine Gruppe spezifiziert wird, die
                nicht existiert wird ein Fehler zurückgegeben.
            </para>
            <para>
                <code>describe</code> gibt ein Array zurück das Informationen über
                Sicherheitsgruppen enthält welches ownerId, groupName, groupDescription und ein
                Array enthält das alle Regeln dieser Sicherheitsgruppe enthält.
            </para>

            <programlisting role="php"><![CDATA[
$ec2_sg = new Zend_Service_Amazon_Ec2_Securitygroups('aws_key',
                                                     'aws_secret_key');
$return = $ec2_ebs->describe('mygroup');
]]>
            </programlisting>
        </example>

        <example id="zend.service.amazon.ec2.securitygroups.maintenance.delete">
            <title>Eine Sicherheitsgruppe löschen</title>
            <para>
                <code>delete</code> will remove the security group. If you attempt to
                delete a security group that contains instances, a fault is returned.
                If you attempt to delete a security group that is referenced by another
                security group, a fault is returned. For example, if security group B
                has a rule that allows access from security group A, security group A
                cannot be deleted until the allow rule is removed.
            </para>
            <para>
                <code>delete</code> returns boolean true or false.
            </para>

            <programlisting role="php"><![CDATA[
$ec2_sg = new Zend_Service_Amazon_Ec2_Securitygroups('aws_key',
                                                     'aws_secret_key');
$return = $ec2_sg->delete('mygroup');
]]>
            </programlisting>
        </example>
    </sect2>

    <sect2 id="zend.service.amazon.ec2.securitygroups.authorize">
        <title>Authorizing Access</title>

        <example id="zend.service.amazon.ec2.securitygroups.authorize.ip">
            <title>Authorizing by IP</title>
            <para>
                <code>authorizeIp</code> Adds permissions to a security group based on
                an IP address, protocol type and port range.
            </para>
            <para>
                Permissions are specified by the IP protocol (TCP, UDP or ICMP), the
                source of the request (by IP range or an Amazon EC2 user-group pair),
                the source and destination port ranges (for TCP and UDP), and the
                ICMP codes and types (for ICMP). When authorizing ICMP, -1 can be used
                as a wildcard in the type and code fields.
            </para>
            <para>
                Permission changes are propagated to instances within the security group
                as quickly as possible. However, depending on the number of instances, a
                small delay might occur.
            </para>
            <para>
                <code>authorizeIp</code> returns boolean true or false
            </para>

            <programlisting role="php"><![CDATA[
$ec2_sg = new Zend_Service_Amazon_Ec2_Securitygroups('aws_key',
                                                     'aws_secret_key');
$return = $ec2_ebs->authorizeIp('mygroup',
                                'protocol',
                                'fromPort',
                                'toPort',
                                'ipRange');
]]>
            </programlisting>
        </example>

        <example id="zend.service.amazon.ec2.securitygroups.authorize.group">
            <title>Authorize By Group</title>
            <para>
                <code>authorizeGroup</code> Adds permissions to a security group.
            </para>
            <para>
                Permission changes are propagated to instances within the security group
                as quickly as possible. However, depending on the number of instances, a
                small delay might occur.
            </para>
            <para>
                <code>authorizeGroup</code> returns boolean true or false.
            </para>

            <programlisting role="php"><![CDATA[
$ec2_sg = new Zend_Service_Amazon_Ec2_Securitygroups('aws_key',
                                                     'aws_secret_key');
$return = $ec2_sg->authorizeGroup('mygroup', 'securityGruopName', 'ownerId');
]]>
            </programlisting>
        </example>
    </sect2>

    <sect2 id="zend.service.amazon.ec2.securitygroups.revoke">
        <title>Revoking Access</title>

        <example id="zend.service.amazon.ec2.securitygroups.revoke.ip">
            <title>Revoke by IP</title>
            <para>
                <code>revokeIp</code> Revokes permissions to a security group based on
                an IP address, protocol type and port range. The permissions used to revoke
                must be specified using the same values used to grant the permissions.
            </para>
            <para>
                Permissions are specified by the IP protocol (TCP, UDP or ICMP), the
                source of the request (by IP range or an Amazon EC2 user-group pair),
                the source and destination port ranges (for TCP and UDP), and the
                ICMP codes and types (for ICMP). When authorizing ICMP, -1 can be used
                as a wildcard in the type and code fields.
            </para>
            <para>
                Permission changes are propagated to instances within the security group
                as quickly as possible. However, depending on the number of instances, a
                small delay might occur.
            </para>
            <para>
                <code>revokeIp</code> returns boolean true or false
            </para>

            <programlisting role="php"><![CDATA[
$ec2_sg = new Zend_Service_Amazon_Ec2_Securitygroups('aws_key',
                                                     'aws_secret_key');
$return = $ec2_ebs->revokeIp('mygroup',
                             'protocol',
                             'fromPort',
                             'toPort',
                             'ipRange');
]]>
            </programlisting>
        </example>

        <example id="zend.service.amazon.ec2.securitygroups.revoke.group">
            <title>Revoke By Group</title>
            <para>
                <code>revokeGroup</code> Adds permissions to a security group. The permissions
                used to revoke must be specified using the same values used to grant the
                permissions.
            </para>
            <para>
                Permission changes are propagated to instances within the security group
                as quickly as possible. However, depending on the number of instances, a
                small delay might occur.
            </para>
            <para>
                <code>revokeGroup</code> returns boolean true or false.
            </para>

            <programlisting role="php"><![CDATA[
$ec2_sg = new Zend_Service_Amazon_Ec2_Securitygroups('aws_key',
                                                     'aws_secret_key');
$return = $ec2_sg->revokeGroup('mygroup', 'securityGruopName', 'ownerId');
]]>
            </programlisting>
        </example>
    </sect2>
</sect1>
