<!-- EN-Revision: 8786 -->
<sect1 id="zend.json.objects">
    <title>JSON Objects</title>
    <para>
        Bei der Kodierung von PHP Objekten nach JSON werden alle öffentlichen Eigenschaften dieses
        Objektes im JSON Objekt kodiert.
    </para>
    <para>
        JSON erlaubt keine Objektreferenzen, deshalb sollte dafür Sorge getragen werden, dass keine
        Objekte mit rekursiver Referenz kodiert werden. Wenn man Probleme mit Rekursion hat,
        erlauben <code>Zend_Json::encode()</code> und <code>Zend_Json_Encoder::encode()</code> die
        Angabe eines optionalen, zweiten Parameters, um auf Rekursion zu prüfen; wenn ein Objekt
        doppelt serialisiert wird, wird eine Ausnahme geworfen.
    </para>
    <para>
        Das Dekodieren von JSON Objekten stellt eine weitere Schwierigkeit dar, allerdings
        entsprechen Javascript Objekte sehr einem assoziativen Array in PHP. Einige schlagen vor,
        dass ein Klassenbezeichner übergeben werden soll und eine Objektinstanz dieser Klasse
        erstellt und mit den Schlüssel/Wert Paaren des JSON Objektes bestückt werden soll; andere
        denken, dies könnte ein erhebliches Sicherheitsrisiko darstellen.
    </para>
    <para>
        Standardmäßig wird <code>Zend_Json</code> die JSON Objekte als assoziative Arrays
        dekodieren. Wenn du allerdings wünscht, dass ein Objekt zurück gegeben wird, kannst du dies
        angeben:
    </para>
    <programlisting role="php"><![CDATA[<?php
// Dekodiere JSON Objekte als PHP Objekte
$phpNative = Zend_Json::decode($encodedValue, Zend_Json::TYPE_OBJECT);]]>
    </programlisting>
    <para>
        Jedes dekodierte Objekte wird als <code>StdClass</code> Objekt mit Eigenschaften
        entsprechend der Schlüssel/Wert Paare der JSON Notation zuürckgegeben.
    </para>
    <para>
        Die Empfehlung des Zend Framework ist, dass der einzelne Entwickler selber entscheiden
        sollte, wie er JSON Objekte dekodiert. Wenn ein Objekt eines bestimmten Typs erstellt werden
        soll, kann es im Code des Entwicklers erstellt werden und mit den dekodierten Werten unter
        Verwendung von <code>Zend_Json</code> bestückt werden.
    </para>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->