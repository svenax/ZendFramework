<!-- EN-Revision: 12158 -->
<sect1 id="zend.file.transfer.introduction">

    <title>Zend_File_Transfer</title>

    <para>
        <code>Zend_File_Transfer</code> ermöglicht es Entwicklern die Kontrolle über Dateiuploads sowie über
        Dateidownloads zu erhalten. Es erlaubt die Verwendung von eingebuaten Prüfungen für Dateizwecke und
        gibt sogar die Möglichkeit Dateien mit Filtern zu verändern. <code>Zend_File_Transfer</code> arbeitet
        mit Adaptern welche es erlauben die selbe API für unterschiedliche Transportprotokolle wie HTTP, FTP,
        WEBDAV und andere zu verwenden.
    </para>

    <note>
        <title>Einschränkungen</title>
        <para>
            Die aktuelle Implementation von <code>Zend_File_Transfer</code> die in 1.6.0 ausgeliefert wird,
            ist auf HTTP Post Uploads limitiert. Downloaden von Dateien und andere Adapter werden in einem
            kommenden Release hinzugefügt. Nicht implementierte Methoden werfen eine Ausnahme. Deswegen
            sollte aktuell eine Instanz von <code>Zend_File_Transfer_Adapter_Http</code> direkt verwendet
            werden. Das wird sich in Zukunft ändern, sobald mehrere Adapter vorhanden sind.
        </para>
    </note>

    <note>
        <title>Formulare</title>
        <para>
            Wenn man <code>Zend_Form</code> verwendet sollte man die Beispiele, die im Kapitel von
            <code>Zend_Form</code> zu finden sind, lesen und verwenden und <code>Zend_File_Transfer</code>
            nicht manuell verwenden. Aber die Information die man in diesem Kapitel lesen kann sind sehr
            nützlich, selbst wenn man Sie nicht direkt verwendet. Alle Annahmen, Beschreibungen und
            Lösungen sind die gleichen wenn man <code>Zend_File_Transfer</code> über <code>Zend_Form</code>
            verwendet.
        </para>
    </note>

    <para>
        Die Verwendung von <code>Zend_File_Transfer</code> ist recht einfach. Es besteht aus zwei Teilen.
        Dem HTTP Formular das den Upload durchführt, und der Behandlung der hochgeladenen Dateien mit
        <code>Zend_File_Transfer</code>. Siehe das folgende Beispiel:
    </para>

    <example id="zend.file.transfer.introduction.example">
        <title>Einfaches File-Upload Formular</title>
        <para>
            Dieses Beispiel zeigt einen einfachen Dateiupload welcher <code>Zend_File_Transfer</code>
            verwendet. Das erste Teil ist das Dateiformular. In unserem Beispiel gibt es nur eine Datei
            welche wir hochladen wollen.
        </para>

        <programlisting><![CDATA[
<form enctype="multipart/form-data" action="/file/upload" method="POST">
    <input type="hidden" name="MAX_FILE_SIZE" value="100000" />
        Choose a file to upload: <input name="uploadedfile" type="file" />
    <br />
    <input type="submit" value="Upload File" />
</form>
]]>
        </programlisting>

        <para>
            Es ist zu beachten das der Bequemlichkeit halber
            <link linkend="zend.form.standardElements.file">Zend_Form_Element_File</link> verwendet werden
            sollte statt das HTML manuell zu erstellen.
        </para>

        <para>
            Der nächste Schritt ist die Erstellung des Empfängers des Uploads. In unserem Beispiel ist der
            Empfänger <code>/file/upload</code>. Als nächstes erstellen wir also den Kontroller
            <code>file</code> mit der Aktion <code>upload</code>.
        </para>

        <programlisting role="php"><![CDATA[
$adapter = new Zend_File_Transfer_Adapter_Http();

$adapter->setDestination('C:\temp');

if (!$adapter->receive()) {
    $messages = $adapter->getMessages();
    echo implode("\n", $messages);
}
]]>
        </programlisting>

        <para>
            Wie man sieht besteht die einfachte Verwendung darin ein Ziel mit der <code>setDestination</code>
            Methode zu definieren und die <code>receive()</code> Methode aufzurufen. Wenn irgendwelche
            Uploadfehler vorhanden sind werden diese als Ausnahme zurückgegeben.
        </para>

    </example>

    <note>
        <title>Achtung</title>
        <para>
            Beachten Sie das das nur die einfachste Verwendung ist. Man sollte dieses Beispiel
            <emphasis role="strong">niemals</emphasis> in einer lebenden Umgebung einsetzen da es
            massive Sicherheitslücken aufweisst. Man sollte immer Prüfungen verwenden um die
            Sicherheit zu erhöhen.
        </para>
    </note>

    <sect2 id="zend.file.transfer.introduction.adapters">

        <title>Von Zend_File_Transfer unterstützte Adapter</title>

        <para>
            <code>Zend_File_Transfer</code> wurde erstellt um verschiedene Adapter und auch Richtungen zu
            unterstützen. Es wurde designt um das Hochladen, Herunterladen und sogar das Weiterleiten
            (Hochladen mit einem Adapter und Herunterladen mit einem anderen Adapter zur gleichen Zeit)
            von Dateien zu erlauben. Aber mit Zend Framework 1.6 ist aktuell nur ein Adapter vorhanden,
            der Http Adapter.
        </para>

        <para>
            Weil aktuell nur ein Adapter vorhanden ist, kann die Basisklasse aktuell noch nicht verwendet werden.
            Deshalb muß man, wenn man <code>Zend_File_Transfer</code> verwenden will, den Adapter direkt
            verwenden.
        </para>
    </sect2>

    <sect2 id="zend.file.transfer.introduction.options">

        <title>Optionen für Zend_File_Transfer</title>

        <para>
            <code>Zend_File_Transfer</code> und dessen Adapter unterstützen verschiedene Optionen. Alle Optionen
            können gesetzt werden indem Sie entweder dem Constructor übergeben werden, oder durch Verwendung  von
            <code>setOptions($options)</code>. <code>getOptions()</code> gibt die aktuell gesetzten Optionen
            zurück. Anbei ist eine Liste aller unterstützten Optionen zu finden.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="strong">ignoreNoFile</emphasis>: Wenn diese Option auf true gesetzt ist,
                    ignorieren alle Prüfer die Datei wenn Sie nicht vom Formular hochgeladen wurde. Diese
                    Option ist standardmäßig false, was heißt das ein Fehler geworfen wird, wenn die Datei
                    nicht angegeben wurde.
                </para>
            </listitem>
        </itemizedlist>
    </sect2>

    <sect2 id="zend.file.transfer.introduction.checking">

        <title>Prüfen von Dateien</title>

        <para>
            <code>Zend_File_Transfer</code> hat verschiedene Methoden die auf verschiedenste Annahmen
            prüfen welche nützlich sind wenn man Dateien bearbeiten will nachdem Sie empfangen wurden.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="strong">isValid($files = null)</emphasis>: Diese Methode prüft ob die
                    angegebene Datei gültig ist, basierend auf den Prüfungen welche dieser Datei
                    angehängt sind. Wenn keine Dateien angegeben wurden, werden alle Dateien geprüft.
                    Es ist zu beachten das diese Methode mindestens dann aufgerufen wird, wenn man die
                    Dateien empfängt.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">isUploaded($files = null)</emphasis>: Diese Methode prüft ob die
                    angegebene Datei vom Benutzer hochgeladen wurde. Das ist nützlich wenn man verschiedene
                    Dateien definiert hat die optional hochzuladen sind. Wenn keine Dateien angegeben wurden,
                    werden alle Dateien geprüft.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">isReceived($files = null)</emphasis>: Diese Methode prüft ob die
                    angegebene Datei bereits empfangen wurde. Wenn keine Dateien angegeben wurden, werden
                    alle Dateien geprüft.
                </para>
            </listitem>
        </itemizedlist>

        <example id="zend.file.transfer.introduction.checking.example">
            <title>Dateien prüfen</title>

            <programlisting role="php"><![CDATA[
$upload = new Zend_File_Transfer();

// Gibt alle bekannten internen Dateiinformationen zurück
$files = $upload->getFileInfo();

foreach ($files as $file => $info) {
    // Datei hochgeladen ?
    if (!$upload->isUploaded($file)) {
        print "Warum hast Du die Datei nicht hochgeladen ?";
        continue;
    }

    // Prüfungen sind ok ?
    if (!$upload->isValid($file)) {
        print "Sorry, aber die Datei ist nicht das was wir wollten";
        continue;
    }
}

$upload->receive();
]]>
            </programlisting>

        </example>
    </sect2>

    <sect2 id="zend.file.transfer.introduction.informations">

        <title>Zusätzliche Dateiinformationen</title>

        <para>
            <code>Zend_File_Transfer</code> kann verschiedene zusätzliche Informationen über Dateien
            zurückgeben. Die folgenden Methoden sind vorhanden:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="strong">getFileName($file = null, $path = true)</emphasis>: Diese Methode
                    gibt den wirklichen Namen der übertragenen Datei zurück.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">getFileInfo($file = null)</emphasis>: Diese Methode gibt die
                    internen Informationen für die angegebene übertragene Datei zurück.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="strong">getHash($hash = 'crc32', $files = null)</emphasis>: Diese Methode
                    gibt einen Hash des Inhalts einer angegebenen übertragenen Datei zurück.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            <code>getFileName()</code> akzeptiert den Namen des Elements als ersten Parameter. Wenn kein Name
            angegeben wird, werden alle bekannten Dateinamen in einem Array zurückgegeben. Wenn die Datei
            eine MultiDatei ist, wird auch ein Array zurückgegeben. Wenn nur eine einzelne Datei vorhanden ist
            wird nur ein String zurückgegeben.
        </para>

        <para>
            Standardmäßig werden Dateinamen mit Ihrem kompletten Pfad zurückgegeben. Wenn man nur den Dateinamen
            ohne Pfad benötigt, kann der zweite Parameter <code>$path</code> gesetzt werden, welcher den
            Dateinamen ausschneidet wenn er auf false gesetzt wird.
        </para>

        <example id="zend.file.transfer.introduction.informations.example1">
            <title>Den Dateinamen bekommen</title>

            <programlisting role="php"><![CDATA[
$upload = new Zend_File_Transfer();
$upload->receive();

// Gibt die Dateinamen aller Dateien zurück
$names = $upload->getFileName();

// Gibt den Dateinamen des Formularelements 'foo' zurück
$names = $upload->getFileName('foo');
]]>
            </programlisting>

        </example>

        <note>
            <para>
                Es ist zu beachten das sich der Dateinamen ändern kann wenn man die Datei empfängt (receive).
                Das kann geschehen durch den Fakt das beim Empfangen alle Filter ausgeführt werden.
                Deswegen sollte man <code>getFileName()</code> immer ausführen nachdem man die Dateien
                empfangen hat.
            </para>
        </note>

        <para>
            <code>getHash()</code> akzeptiert den Namen eines Hash Algorithmus als ersten Parameter. Für eine
            Liste von bekannten Algorithmen kann in
            <ulink url="http://php.net/hash_algos">PHP's hash_algos Methode</ulink> gesehen werden. Wenn kein
            Algorithmus angegeben wird, wird <code>crc32</code> als Standardalgorithmus verwendet.
        </para>

        <example id="zend.file.transfer.introduction.informations.example2">
            <title>Den Hash einer Datei erhalten</title>

            <programlisting role="php"><![CDATA[
$upload = new Zend_File_Transfer();
$upload->receive();

// Gibt die Hashes von allen Dateien als Array zurück wenn mehr als eine Datei hochgeladen wurde
$hash = $upload->getHash('md5');

// Gibt den Has für das 'foo' Formularelement zurück
$names = $upload->getHash('crc32', 'foo');
]]>
            </programlisting>

        </example>

        <note>
            <para>
                Es ist zu beachten das der zurückgegebene Wert ein Array ist, wenn die Datei oder der
                Formularname mehr als eine einzelne Datei enthält.
            </para>
        </note>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 tw=80 et:
-->
