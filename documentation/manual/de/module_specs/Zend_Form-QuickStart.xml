<!-- EN-Revision: 9524 -->
<sect1 id="zend.form.quickstart">
    <title>Schnellstart mit Zend_Form</title>

    <para>
        Diese Schnellstart Anleitung soll die Grundsätze der Erstellung, Validierung und
        Darstellung von Forms mit <code>Zend_Form</code> zeigen.
    </para>

    <sect2 id="zend.form.quickstart.create">
        <title>Ein Form Objekt erstellen</title>

        <para>
            Die Erstellung eines Form Objektes ist sehr einfach: nur <code>Zend_Form</code>
            instanziieren:
        </para>

        <programlisting role="php"><![CDATA[<?php
$form = new Zend_Form;
?>]]></programlisting>

        <para>
            Für fortgeschrittene Anwendungsfälle, kann man eine <code>Zend_Form</code> Subklasse
            erstellen, aber für einfache Forms, kann eine Form programmtechnisch mit einem
            <code>Zend_Form</code> erstellt werden.
        </para>

        <para>
            Wenn man eine Form Aktion und Methode spezifizieren will (immer eine gute Idee), kann
            das mit den <code>setAction()</code> und <code>setMethod()</code> Methoden gemacht
            werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
$form->setAction('/resource/process')
     ->setMethod('post');
?>]]></programlisting>

        <para>
            Der obige Code setzt die Form Aktion zu der partiellen URL "/resource/process" und die
            Form Methode zu HTTP POST. Das wird wärend der endgültigen Darstellung berücksichtigt.
        </para>

        <para>
            Man kann zusätzliche HTML Attribute für das <code>&lt;form&gt;</code> Tag setzen indem
            die setAttrib() oder setAttribs() MEthoden verwendet werden. Zum Beispiel wenn man die
            ID setzen will, setzt man das "id" Attribut:
        </para>

        <programlisting role="php"><![CDATA[<?php
$form->setAttrib('id', 'login');
?>]]></programlisting>
    </sect2>

    <sect2 id="zend.form.quickstart.elements">
        <title>Elemente einer Form hinzufügen</title>

        <para>
            Eine Form ist nichts ohne Ihre Elemente. <code>Zend_Form</code> kommt mit einigen
            Standardelementen die XHTML über <code>Zend_View</code> Helfer darstellen. Das sind
            die folgenden:
        </para>

        <itemizedlist>
            <listitem><para>
                button
            </para></listitem>

            <listitem><para>
                checkbox (oder viele Checkboxen auf einmal mit multiCheckbox)
            </para></listitem>

            <listitem><para>
                hidden
            </para></listitem>

            <listitem><para>
                image
            </para></listitem>

            <listitem><para>
                password
            </para></listitem>

            <listitem><para>
                radio
            </para></listitem>

            <listitem><para>
                reset
            </para></listitem>

            <listitem><para>
                select (beide, normale und mehrfach-select Typen)
            </para></listitem>

            <listitem><para>
                submit
            </para></listitem>

            <listitem><para>
                text
            </para></listitem>

            <listitem><para>
                textarea
            </para></listitem>
        </itemizedlist>

        <para>
            Es gibt zwei Optionen für das Hinzufügen von Elementen zu einer form: Man kann ein
            konkretes Element instanziieren und dieses dem Objekt übergeben, oder man kann einfach
            den Typ des Elements übergeben und <code>Zend_Form</code> ein Objekt des richtigen
            Typs für einen Instanziieren lassen.
        </para>

        <para>
            Einige Beispiele:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Ein Element instanziieren und an das Form Objekt übergeben:
$form->addElement(new Zend_Form_Element_Text('username'));

// Den Fyp des Form Elements dem Form Objekt übergeben:
$form->addElement('text', 'username');
?>]]></programlisting>

        <para>
            Standardmäßig haben diese keine Prüfer oder Filter. Das bedeutet das man eigene
            Elemente mit minimalen Prüfern und potentiellen Filtern konfigurieren muß. Man kann
            das entweder (a) vor der Übergabe des Elements an die Form machen, (b) über
            Konfigurationsoptionen die bei der Erstellung des Elements über <code>Zend_Form</code>
            angegeben werden, oder (c) durch ziehen des Elements vom Form Objekt und dessen
            Konfiguration im Nachhinein.
        </para>

        <para>
            Betrachten wir zuerst die Erstellung eines Prüfers für eine konkrete Instanz eines
            Elements. Es können entweder <code>Zend_Validate_*</code> Instanzen übergeben werden,
            oder der Name des Prüfers der verwendet werden soll:
        </para>

        <programlisting role="php"><![CDATA[<?php
$username = new Zend_Form_Element_Text('username');

// Ein Zend_Validate_* Objekt übergeben:
$username->addValidator(new Zend_Validate_Alnum());

// Den Namen des Prüfers übergeben:
$username->addValidator('alnum');
?>]]></programlisting>

        <para>
            Wenn die zweite Option verwendet wird kann, wenn der Prüfer Argumente im Konstruktor
            akzeptiert, diesem ein Array als dritter Parameter übergeben werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Ein Pattern übergeben
$username->addValidator('regex', false, array('/^[a-z]/i'));
?>]]></programlisting>

        <para>
            (Der zweite Parameter wird verwendet um anzuzeigen ob spätere Prüfer bei einem Fehler
            dieses Prüfers ausgeführt werden sollen oder nicht; standardmäßig ist er false.)
        </para>

        <para>
            Es kann auch gewünscht sein ein Element als benötigt zu spezifizieren. Das kann durch
            Verwendung eines Accessors getan werden oder durch die Übergabe einer Option bei der
            Erstellung des Elemetns. Im ersteren Fall:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Dieses Element als benötigt definieren:
$username->setRequired(true);
?>]]></programlisting>

        <para>
            Wenn ein Element benöigt wird, wird ein 'NotEmpty' Prüfer ganz oben in der Prüfkette
            definiert, um sicherzustellen das dieses Element einen Wert hat wenn er benötigt wird.
        </para>

        <para>
            Filter werden grundsätzlich auf dem gleichen Weg wie die Prüfer definiert. Zu
            Anschauungszwecken, wird ein Filter hinzugefügt der den endgültigen Wert
            klein schreibt:
        </para>

        <programlisting role="php"><![CDATA[<?php
$username->addFilter('StringtoLower');
?>]]></programlisting>

        <para>
            Das endgültige Setup des Elements könnte also wie folgt aussehen: 
        </para>

        <programlisting role="php"><![CDATA[<?php
$username->addValidator('alnum')
         ->addValidator('regex', false, array('/^[a-z]/'))
         ->setRequired(true)
         ->addFilter('StringToLower');

// oder kompakter:
$username->addValidators(array('alnum',
        array('regex', false, '/^[a-z]/i')
    ))
    ->setRequired(true)
    ->addFilters(array('StringToLower'));
?>]]></programlisting>


        <para>
            So einfach das ist, ist das für jedes einzelne Elemet in einer Form sehr aufwendig.
            Versuchen wir es also mit Option (b) von oben. Wenn wir ein neues Element erstellen
            wird <code>Zend_Form::addElement()</code> als Factory verwendet, und wir können
            optional Konfigurationsoptionen übergeben. Diese können Prüfer und Filter enthalten
            die angepasst werden können. Um also alles von oben implizit durchzuführen, versuchen
            wir folgendes:
        </para>

        <programlisting role="php"><![CDATA[<?php
$form->addElement('text', 'username', array(
    'validators' => array(
        'alnum',
        array('regex', false, '/^[a-z]/i')
    ),
    'required' => true,
    'filters'  => array('StringToLower'),
));
?>]]></programlisting>

        <note><para>
            Wenn man sieht das man Elemente konfiguriert die die gleichen Optionen in vielen
            Plätzen verwenden, kann es gewünscht sein eine eigene <code>Zend_Form_Element</code>
            Subklasse zu erstellen und diese Klasse stattdessen anzupassen; das spart viel
            Tipparbeit im weiteren Verlauf. 
        </para></note>
    </sect2>

    <sect2 id="zend.form.quickstart.render">
        <title>Eine Form darstellen</title>

        <para>
            Die Darstellung einer Form ist einfach. Die meisten Elemente verwendetn einen
            <code>Zend_View</code> Helfer um sich selbst darzustellen, und benötigen deshalb ein
            View Objekt um dargestellt zu werden. Anders als das, gibt es zwei Optionen: Die
            render() Methode der Form verwenden, oder einfaches echo.
        </para>

        <programlisting role="php"><![CDATA[<?php
// Explizit render() ausrufen und ein optionales View Objekt übergeben:
echo $form->render($view);

// Angenommen ein View Objekt wurde vorher über setView() gesetzt:
echo $form;
?>]]></programlisting>

        <para>
            Standardmäßig versuchen <code>Zend_Form</code> und <code>Zend_Form_Element</code> ein
            im <code>ViewRenderer</code> initialisiertes View Objekt zu verwenden, was bedeutet das
            die View nicht manuell gesetzt werden muß wenn das Zend Framework MVC verwendet wird.
            Die Darstellung einer Form in einem View Skript ist so einfach wie:
        </para>

        <programlisting role="php"><![CDATA[
<?= $this->form ?>
]]></programlisting>

        <para>
            Unter der Hand verwendet <code>Zend_Form</code> "Dekorators" um die Darstellung
            durchzuführen. Diese Dekoratore können Inhalte ersetzen, Inhalte anfügen oder
            Inhalte voranstellen, und haben eine volle Introspektive des Elements das Ihnen
            übergeben wurde. Als Ergebnis, können mehrere Dekoratore kombiniert werden um
            eigene Effekte zu ermöglichen. Standardmüßig kombiniert <code>Zend_Form_Element</code>
            View Dekoratore um seine Ausgaben zu erstellen; das Setup sieht ähnlich diesem aus:
        </para>

        <programlisting role="php"><![CDATA[<?php
$element->addDecorators(array(
    'ViewHelper',
    'Errors',
    array('HtmlTag', array('tag' => 'dd')),
    array('Label', array('tag' => 'dt')),
));
?>]]></programlisting>

        <para>
            (Wobei &lt;HELPERNAME&gt; der Name des View Helfers ist der verwendet wird, und
            variiert basierend auf dem Element.)
        </para>

        <para>
            Das obige erstellt eine Ausgabe ähnlich der folgenden:
        </para>

        <programlisting role="html"><![CDATA[
<dt><label for="username" class="required">Username</dt>
<dd>
    <input type="text" name="username" value="123-abc" />
    <ul class="errors">
        <li>'123-abc' has not only alphabetic and digit characters</li>
        <li>'123-abc' does not match against pattern '/^[a-z]/i'</li>
    </ul>
</dd>
]]></programlisting>

        <para>
            (Wenngleich nicht mit der gleichen Formatierung.)
        </para>

        <para>
            Die Dekoratore die von einem Element verwendet werden können geändert werden um eine
            andere Ausgabe zu erzeugen; diese das Kapitel über Dekoratore für mehr Informationen.
        </para>

        <para>
            Die Form selbst geht einfach alle Elemente durch, und fügt diese in eine HTML
            <code>&lt;form&gt;</code> ein. Die Aktion und Methode die bei der Erstellung der Form
            angegeben wurden werden dem <code>&lt;form&gt;</code> Tag angegeben, wie wenn Sie
            Attribute wären die über <code>setAttribs()</code> und ähnliche gesetzt werden.
        </para>

        <para>
            Elemente werden entweder in der Reihenfolge in der Sie registriert wurden durchlaufen,
            oder, wenn ein Element ein order Attribut enthält, in dieser Reihenfolge. Die
            Reihenfolge eines Elements kann wie folgt gesetzt werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
$element->setOrder(10);
?>]]></programlisting>

        <para>
            Oder bei der Erstellung des Elements durch Übergabe als Option: 
        </para>

        <programlisting role="php"><![CDATA[<?php
$form->addElement('text', 'username', array('order' => 10));
?>]]></programlisting>
    </sect2>

    <sect2 id="zend.form.quickstart.validate">
        <title>Prüfen ob ein Form gültig ist</title>

        <para>
            Nachdem eine Form übermittelt wurde, muss diese geprüft werden um zu sehen ob Sie alle
            Prüfungen besteht. Jedes Element wird gegen die angegebenen Daten geprüft; wenn ein
            Schlüssel der dem Elementnamen entspricht nicht vorhanden ist, und das Teil als
            benötigt markiert ist, werden die Prüfungen mit einem null Wert ausgeführt.
        </para>

        <para>
            Wo kommen die Daten her? Man kann <code>$_POST</code> oder <code>$_GET</code>
            verwenden, oder jede andere Datenquelle die man bei der Hand hat (Web Service Anfragen
            zum Beispiel):
        </para>

        <programlisting role="php"><![CDATA[<?php
if ($form->isValid($_POST)) {
    // erfolgreich!
} else {
    // fehlgeschlagen!
}
?>]]></programlisting>

        <para>
            Mit AJAX Anfragen kann man manchmal davon abgehen einzelne Elemente oder Gruppen von
            Elementen zu prüfen. <code>isValidPartial()</code> prüft eine Teilform. Anders als
            <code>isValid()</code> werden, wenn ein spezieller Schlüssel nicht vorhanden ist,
            Prüfungen für dieses spezielle Element nicht durchgeführt:
        </para>

        <programlisting role="php"><![CDATA[<?php
if ($form->isValidPartial($_POST)) {
    // Elemente hat alle Prüfungen bestanden
} else {
    // Ein oder mehrere getestete Elemente haben die Prüfung nicht bestanden
}
?>]]></programlisting>

        <para>
            Eine zusätzliche Methode, <code>processAjax()</code>, kann auch dafür verwendet werden
            um Teilformen zu prüfen. Anders als <code>isValidPartial()</code> gibt Sie einen
            JSON-formatierten String zurück der bei einem Fehler die Fehlermeldungen enthält.
        </para>

        <para>
            Angenommen die Prüfungen sind durchgeführt worden, dann können jetzt die gefilterten
            Werte geholt werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
$values = $form->getValues();
?>]]></programlisting>

        <para>
            Wenn an irgendeinem Punkt die ungefilterten Werte benötigt werden kann man folgendes
            verwenden:
        </para>

        <programlisting role="php"><![CDATA[<?php
$unfiltered = $form->getUnfilteredValues();
?>]]></programlisting>
    </sect2>

    <sect2 id="zend.form.quickstart.errorstatus">
        <title>Fehlerstatus holen</title>

        <para>
            So, die Form hat also die Prüfungen nicht bestanden? In den meisten Fällen kann die
            Form einfach neu dargestellt werden, und Fehler werden angezeigt wenn Standardekoratore
            verwendet werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
if (!$form->isValid($_POST)) {
    echo $form;

    // oder dem View Obejekt zuordnen und eine View darstellen...
    $this->view->form = $form;
    return $this->render('form');
}
?>]]></programlisting>

        <para>
            Wenn die Fehler inspiziert werden sollen gibt es zwei Methoden.
            <code>getErrors()</code> gibt ein assoziatives Array von Elementnamen / Codes zurück
            (wobei Codes ein Array von Fehlercodes ist). <code>getMessages()</code> gibt ein
            assoziatives Array von Elementnamen / Nachrichten zurück (wobei Nachrichten ein
            assoziatives Array von Fehlercodes / Fehlernachrichten Paaren ist). Wenn ein gegebenes
            Element keinen Fehler hat, wird es nicht im Array inkludiert.
        </para>
    </sect2>

    <sect2 id="zend.form.quickstart.puttingtogether">
        <title>Alles zusammenfügen</title>

        <para>
            Bauen wir also ein einfaches Login Form. Es benötigt Elemente die folgendes
            repräsentieren:
        </para>

        <itemizedlist>
            <listitem><para>username</para></listitem>
            <listitem><para>password</para></listitem>
            <listitem><para>submit</para></listitem>
        </itemizedlist>

        <para>
            Für unsere Zwecke nehmen wir an das ein gültiger Benutzername nur alphanumerische
            Zeichen enthalten soll mit einem Buchstaben beginnt, eine Mindestlänge von 6 und
            eine Maximallänge von 20 hat; er wird zu Kleinschreibung normalisiert. Passwörter
            müssen mindestens 6 Zeichen lang sein. Der submit Wert wird einfach ignoriert wenn
            wir fertig sind, er kann also ungeprüft bleiben.
        </para>

        <para>
            Wir verwenden die Stärke von <code>Zend_Form</code>'s Konfigurationsoptionen um die
            Form zu erstellen:
        </para>

        <programlisting role="php"><![CDATA[<?php


$form = new Zend_Form();
$form->setAction('/user/login')
     ->setMethod('post');

// Ein username Element erstellen und konfigurieren:
$username = $form->createElement('text', 'username');
$username->addValidator('alnum')
         ->addValidator('regex', false, array('/^[a-z]+/'))
         ->addValidator('stringLength', false, array(6, 20))
         ->setRequired(true)
         ->addFilter('StringToLower');

// Ein Passwort Element erstellen und konfigurieren:
$password = $form->createElement('password', 'password');
$password->addValidator('StringLength', false, array(6))
         ->setRequired(true);

// Elemente der Form hinzufügen:
$form->addElement($username)
     ->addElement($password)
     // addElement() als Factory verwenden um den 'Login' Button zu erstellen:
     ->addElement('submit', 'login', array('label' => 'Login'));
?>]]></programlisting>

        <para>
            Als nächstes wird ein Controller erstellt der das behandelt:
        </para>

        <programlisting role="php"><![CDATA[<?php
class UserController extends Zend_Controller_Action
{
    public function getForm()
    {
        // Form wie oben erstellen
        return $form;
    }

    public function indexAction()
    {
        // user/form.phtml darstellen
        $this->view->form = $this->getForm();
        $this->render('form');
    }

    public function loginAction()
    {
        if (!$this->getRequest()->isPost()) {
            return $this->_forward('index');
        }
        $form = $this->getForm();
        if (!$form->isValid($_POST)) {
            // Fehlgeschlagene Prüfung; Form wieder anzeigen
            $this->view->form = $form;
            return $this->render('form');
        }
        
        $values = $form->getValues();
        // Jetzt versuchen zu Authentifizieren...
    }
}
?>]]></programlisting>

        <para>
            Und ein View Skript für die Darstellung der Form:
        </para>

<programlisting role="php"><![CDATA[
<h2>Bitte anmelden:</h2>
<?= $this->form ?>
]]></programlisting>

        <para>
            Wie man im Controller Code sieht, gibt es mehr Arbeit zu tun: Wärend die Übertragung
            gültig sein muß, kann es trotzdem notwendig sein, zum Beispiel, Authentifizierung mit
            Hilfe von <code>Zend_Auth</code> durchzuführen.
        </para>
    </sect2>

    <sect2 id="zend.form.quickstart.config">
        <title>Ein Zend_Config Objekt verwenden</title>

        <para>
            Alle <code>Zend_Form</code> sind konfigurierbar indem <code>Zend_Config</code>
            verwendet wird; es kann entweder ein <code>Zend_Config</code> Objekt an den Kontruktor
            oder es kann über <code>setConfig()</code> übergeben werden. Sehen wir uns an wie die
            obige Form erstellt werden können indem eine INI Datei verwendet wird. Zuerst folgen
            wir den Notwendigkeiten und platzieren die Konfigurationen in Sektionen die den Ort
            des Releases reflektieren, und fokusieren auf die 'development' Sektion. Als nächstes
            wird eine Sektion für den gegebenen Controller ('user') definiert und ein Schlüssel für
            die Form ('login'):
        </para>

        <programlisting role="ini"><![CDATA[
[development]
; general form metainformation
user.login.action = "/user/login"
user.login.method = "post"

; username element
user.login.elements.username.type = "text"
user.login.elements.username.options.validators.alnum.validator = "alnum"
user.login.elements.username.options.validators.regex.validator = "regex"
user.login.elements.username.options.validators.regex.options.pattern = "/^[a-z]/i"
user.login.elements.username.options.validators.strlen.validator = "StringLength"
user.login.elements.username.options.validators.strlen.options.min = "6"
user.login.elements.username.options.validators.strlen.options.max = "20"
user.login.elements.username.options.required = true
user.login.elements.username.options.filters.lower.filter = "StringToLower"

; password element
user.login.elements.password.type = "password"
user.login.elements.password.options.validators.strlen.validator = "StringLength"
user.login.elements.password.options.validators.strlen.options.min = "6"
user.login.elements.password.options.required = true

; submit element
user.login.elements.submit.type = "submit"
]]></programlisting>

        <para>
            Das kann dann an den Contruktor der Form übergeben werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
$config = new Zend_Config_Ini($configFile, 'development');
$form   = new Zend_Form($config->user->login);
?>]]></programlisting>

        <para>
            und die komplette Form wird definiert werden.
        </para>
    </sect2>

    <sect2 id="zend.form.quickstart.conclusion">
        <title>Schlussfolgerung</title>

        <para>
            Hoffentlich ist mit diesem kleinen Tutorial jetzt der Weg klar um die Leistung und
            Flexibilität von <code>Zend_Form</code> einzusetzen. Für detailiertere Informationen
            lesen Sie weiter!
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
