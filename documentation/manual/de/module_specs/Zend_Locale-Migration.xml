<!-- EN-Revision: 12014 -->
<sect1 id="zend.locale.migration">

    <title>Migrieren von vorhergehenden Versionen</title>

    <para>
        Die API von <code>Zend_Locale</code> wurde von Zeit zu Zeit verändert. Wenn man begonnen hat
        <code>Zend_Locale</code> und seine Unterkomponenten in früheren Versionen dann sollte man
        den unteren Richtlinien folgen um die Skripte so zu migrieren das sie die neue API verwenden.
    </para>

    <sect2 id="zend.locale.migration.fromonesixtooneseven">
        <title>Migrieren von 1.6 oder 1.7 zu neueren</title>
        <sect3 id="zend.locale.migration.fromonesixtooneseven.islocale">
            <title>Änderungen bei der Verwendung von isLocale()</title>

            <para>
                Bezugnehmend auf den Codingstandard mußte isLocale() so geändert werden das es ein
                Boolean zurückgibt. In vorhergehenden Releases wurde im Erfolgsfall ein String zurückgegeben.
                Für das Release 1.7 wurde ein Kompatibilitätsmodus hinzugefügt der es erlaubt das alte
                Verhalten, das ein String zurückgegeben wird, zu verwenden, aber das triggert auch eine
                User Warning die darauf hinweist das man auf das neue Verhalten wechseln sollte. Das
                Rerouting welches das alte Verhalten von isLocale() durchgeführt hätte ist nicht länger
                notwendig, da alle I18N Komponenten jetzt das Rerouting selbst durchführen.
            </para>

            <para>
                Um die Skripte auf die neue API zu migrieren muß die Methode einfach wie anbei gezeigt
                verwendet werden.
            </para>

            <example id="zend.locale.migration.fromonesixtooneseven.example">
                <title>Wie man isLocale() von 1.6 nach 1.7 ändern muß</title>

                <programlisting role="php"><![CDATA[
// Beispiel für 1.6
if ($locale = Zend_Locale::isLocale($locale)) {
    // mach was
}

// Selbes Beispiel für 1.7

// Man sollte den Kompatibilitätsmodus ändern um User Warnings zu verhindern
// Aber man kann das in der Bootstrap tun
Zend_Locale::$compatibilityMode = false;

if (Zend_Locale::isLocale($locale)) {
}
]]>
                </programlisting>

                <para>
                    Es ist zu beachten das man den zweiten Parameter verwendet kann um zu sehen ob das
                    Gebietsschema richtig ist ohne das ein Rerouting durchgeführt wird.
                </para>

                <programlisting role="php"><![CDATA[
// Beispiel für 1.6
if ($locale = Zend_Locale::isLocale($locale, false)) {
    // mach was
}

// Selbes Beispiel für 1.7

// Man sollte den Kompatibilitätsmodus ändern um User Warnings zu verhindern
// Aber man kann das in der Bootstrap tun
Zend_Locale::$compatibilityMode = false;

if (Zend_Locale::isLocale($locale, false)) {
    if (Zend_Locale::isLocale($locale, true)) {
        // gar kein Gebietsschema
    }

    // Original String ist kein Gebietsschema, kann aber Reroutet werden    
}
]]>
                </programlisting>

            </example>

            <note>
                <para>
                    Standardmäßig ist das alte Verhalten trotzdem noch aktiv, wirft aber eine
                    User Warning. Wenn man den Code auf das neue Verhalten ändert sollte man auch
                    den Kompatibilitätsmodus auf false ändern damit keine Warnungen mehr geworfen werden.
                </para>
            </note>

        </sect3>
    </sect2>
</sect1>
