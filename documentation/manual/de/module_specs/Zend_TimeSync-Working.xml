<!-- EN-Revision: 10934 -->
<sect1 id="zend.timesync.working">

    <title>Arbeiten mit Zend_TimeSync</title>

    <para>
        <code>Zend_TimeSync</code> kann die aktuelle Zeit von jedem angegebenen
        <emphasis role="strong">NTP</emphasis> oder <emphasis role="strong">SNTP</emphasis>
        Zeitserver zurückgeben. Es kann automatisch mehrere Server handhaben und bietet ein
        einfaches Interface.
    </para>

    <note>
        <para>
            In allen Beispielen in diesem Kapitel verwenden wir einen der vorhandenen öffentlichen
            generellen Zeitserver. In unserem Fall
            <emphasis role="strong">0.europe.pool.ntp.org</emphasis>. Für die eigene Umgebung ist
            am besten das der näheste öffentliche generelle Zeitserver verwendet wird der am
            nähesten zur eigenen Position des Servers steht. Siehe
            <ulink url="http://www.pool.ntp.org">http://www.pool.ntp.org</ulink> für Details.
        </para>
    </note>

    <sect2 id="zend.timesync.working.generic">

        <title>Generelle Anfragen von Zeitserver</title>

        <para>
            Die Anfrage der Zeit von einem Zeitserver ist recht einfach. Alles was angegeben
            werden muß ist der Zeitserver von dem man die Zeit haben will.
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_TimeSync('0.pool.ntp.org');

print $server->getDate()->getIso();
]]>
        </programlisting>

        <para>
            Was passiert also im Hintergrund von <code>Zend_TimeSync</code>? Zuerst wird der
            Syntax des angegebenen Servers geprüft. In unserem Beispiel wird also
            '<code>0.pool.ntp.org</code>' geprüft und als möglicherweise richtige Adresse für einen
            Zeitserver erkannt. Wenn jetzt <code>getDate()</code> aufgerufen wird, wird der aktuell
            gesetzte Zeitserver angefragt und er gibt seine eigene Zeit zurück.
            <code>Zend_TimeSync</code> berechnet darauf die Differenz zur aktuellen Zeit des
            Servers auf dem das Skript läuft und gibt ein <code>Zend_Date</code> Objekt mit der
            aktuellen korrigierten Zeit zurück.
        </para>

        <para>
            Für Details über <code>Zend_Date</code> und dessen Methoden kann unter
            <link linkend="zend.date.introduction">Zend_Date</link> nachgesehen werden.
        </para>

    </sect2>

    <sect2 id="zend.timesync.working.multiple">

        <title>Mehrere Zeitserver</title>

        <para>
            Nicht alle Zeitserver sind immer erreichbar und geben Ihr Zeit zurück. Server haben
            eine Zeit in der Sie nicht erreichbar sind, zum Beispiel wärend Ihrer Wartung. In
            solchen Fällen, wenn die Zeit nicht von einem Zeitserver angefragt werden kann, würde
            man eine Ausnahme erhalten.
        </para>

        <para>
            Als einfache Lösung kann <code>Zend_TimeSync</code> mehrere Zeitserver behandeln und
            unterstützt einen automatischen Fallback Mechanismus. Es gibt zwei unterstützte Wege.
            Man kann entweder ein Array von Zeitserver angeben wenn die Instanz erstellt wird. Oder
            man kan zusätzliche Zeitserver im Nachhinein mit der <code>addServer()</code> Methode
            hinzufügen.
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_TimeSync(array('0.pool.ntp.org',
                                  '1.pool.ntp.org',
                                  '2.pool.ntp.org'));
$server->addServer('3.pool.ntp.org');

print $server->getDate()->getIso();
]]>
        </programlisting>

        <para>
            Es gibt keine Begrenzung in der Anzahl an Zeitservern die hinzugefügt werden können.
            Wenn ein Zeitserver nicht erreicht werden kann, dann fällt <code>Zend_TimeSync</code>
            zurück und versucht den nächsten angegebenen Zeitserver zu erreichen.
        </para>

        <para>
            Wenn man mehr als einen Zeitserver angibt, was das Standardverhalten sein sollte, dann
            sollte man die Server benennen. Man kann entweder die Server mit dem Arrayschlüssel
            benennen, aber das geht auch mit dem zweiten Parameter wärend der Initiierung oder
            dem Hinzufügen von anderen Zeitservern.
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_TimeSync(array('generic'  => '0.pool.ntp.org',
                                  'fallback' => '1.pool.ntp.org',
                                  'reserve'  => '2.pool.ntp.org'));
$server->addServer('3.pool.ntp.org', 'additional');

print $server->getDate()->getIso();
]]>
        </programlisting>

        <para>
            Die Benennung der Zeitserver gibt die Möglichkeit das ein spezieller Zeitserver
            angefragt werden kann wie man später in diesem Kapitel sieht.
        </para>

    </sect2>

    <sect2 id="zend.timesync.working.protocol">

        <title>Protokolle von Zeitservern</title>

        <para>
            Es gibt verschiedene Typen von Zeitservern. Die meisten öffentlichen Zeitserver
            verwenden <emphasis role="strong">NTP</emphasis> als Protokoll. Aber es gibt auch
            andere mögliche Prtokolle.
        </para>

        <para>
            Man kann das richtige Prokoll mit der Adresse des Zeitservers setzen. Aktuell gibt
            es zwei Prokolle die von <code>Zend_TimeSync</code> unterstützt werden. Das
            Standardprotokoll ist <emphasis role="strong">NTP</emphasis>. Wenn man nur NTP
            verwendet kann das Protkoll in der Adresse unterdrückt werden wie im vorher gezeigten
            Beispiel.
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_TimeSync(array('generic'  => 'ntp:\\0.pool.ntp.org',
                                  'fallback' => 'ntp:\\1.pool.ntp.org',
                                  'reserve'  => 'ntp:\\2.pool.ntp.org'));
$server->addServer('sntp:\\internal.myserver.com', 'additional');

print $server->getDate()->getIso();
]]>
        </programlisting>

        <para>
            <code>Zend_TimeSync</code> ist fähig gemischte Zeitserver handzuhaben. Man ist also
            nicht auf ein einzelnes Prokoll beschränkt, aber man kann jeden Zeitserver unabhängig
            von seinem Protokoll hinzufügen.
        </para>

    </sect2>

    <sect2 id="zend.timesync.working.ports">

        <title>Ports für Zeitserver verwenden</title>

        <para>
            Wie jedes Protkoll im World Wide Web, verwenden das
            <emphasis role="strong">NTP</emphasis> und <emphasis role="strong">SNTP</emphasis>
            Protokoll Standardports. Für beide Protokolle ist das der Port
            <emphasis role="strong">123</emphasis>.
        </para>

        <para>
            Aber manchmal unterscheidet sich der Port vom Standard. Der zu verwendende Port kann
            mit der Adresse für jeden Server definiert werden. Es muß nur die Nummer des Ports
            hinter der Adresse hinzugefügt werden. Wenn kein Port definiert wurde, dann verwendet
            <code>Zend_TimeSync</code> den Standardport.
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_TimeSync(array('generic'  => 'ntp:\\0.pool.ntp.org:200',
                                  'fallback' => 'ntp:\\1.pool.ntp.org'));
$server->addServer('sntp:\\internal.myserver.com:399', 'additional');

print $server->getDate()->getIso();
]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.timesync.working.options">

        <title>Optionen für Zeitserver</title>

        <para>
            Aktuell gibt es nur eine Option in <code>Zend_TimeSync</code> die intern verwendet
            wird. Aber man kann selbstdefinierte Optionen verwendetn wenn man will und diese auch
            Abfragen.
        </para>

        <para>
            Die Option <emphasis role="strong">timeout</emphasis> definiert die Anzahl an Sekunden
            nach der eine Verbindung als Abgebrochen erkannt wird wenn keine Antwort kommt. Der
            Standardwert ist <emphasis role="strong">1</emphasis>, was bedeutet das
            <code>Zend_TimeSync</code> auf den nächsten Zeitserver zurückfällt wenn der aktuell
            angefragte Server nicht in einer Sekunde antwortet.
        </para>

        <para>
            Mit der <code>setOptions()</code> Methode kann jede Option gesetzt werden. Sie
            akzeptiert ein Array wobei die Schlüssel die zu setzende Option sind und der Wert der
            Wert dieser Option. Jede vorher gesetzte Option wird mit dem neuen Wert überschrieben.
            Wenn man wissen will welche Optionen gesetzt sind, kann die <code>getOptions()</code>
            Methode verwendet werden. Sie akzeptiert entweder einen Schlüssel welcher die gegebene
            Option zurückgibt wenn diese gesetzt ist, oder, wenn kein Schlüssel angegeben wird, gibt
            Sie alle gesetzten Optionen zurück.
        </para>

        <programlisting role="php"><![CDATA[
Zend_TimeSync::setOptions(array('timeout' => 3, 'myoption' => 'timesync'));
$server = new Zend_TimeSync(array('generic'  => 'ntp:\\0.pool.ntp.org',
                                  'fallback' => 'ntp:\\1.pool.ntp.org'));
$server->addServer('sntp:\\internal.myserver.com', 'additional');

print $server->getDate()->getIso();
print_r(Zend_TimeSync::getOptions();
print "Timeout = " . Zend_TimeSync::getOptions('timeout');
]]>
        </programlisting>

        <para>
            Wie man sieht sind die Optionen für <code>Zend_TimeSync</code> statisch, was bedeutet
            das jede Instanz von <code>Zend_TimeSync</code> mit den gleichen Optionen arbeitet.
        </para>

    </sect2>

    <sect2 id="zend.timesync.working.different">

        <title>Verschiedene Zeitserver verwenden</title>

        <para>
            Das Standardverhlaten für die Anfrage einer Zeit ist diese vom ersten gegebenen Server
            anzufragen. Manchmal ist es aber sinnvoll einen anderen Zeitserver zu setzen von dem
            die Zeit abgefragt werden soll. Das kann mit der <code>setServer()</code> Methode
            getan werden. Um den zu verwendenden Zeitserver zu definieren muß einfach der Alias
            als Parameter in dieser Methode gesetzt werden. Und um den aktuell verwendeten
            Zeitserver zu erhalten kann die <code>getServer()</code> Methode aufgerufen werden.
            Wenn kein Parameter angegeben wird, wird der aktuelle Zeitserver zurückgegeben.
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_TimeSync(array('generic'  => 'ntp:\\0.pool.ntp.org',
                                  'fallback' => 'ntp:\\1.pool.ntp.org'));
$server->addServer('sntp:\\internal.myserver.com', 'additional');

$actual = $server->getServer();
$server = $server->setServer('additional');
]]>
        </programlisting>

    </sect2>

    <sect2 id="zend.timesync.working.informations">

        <title>Informationen von Zeitservern</title>

        <para>
            Zeitserver bieten nicht nur die Zeit selbst sondern auch zusätzliche Informationen.
            Man kann diese Informationen mit der <code>getInfo()</code> Methode erhalten.
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_TimeSync(array('generic'  => 'ntp:\\0.pool.ntp.org',
                                  'fallback' => 'ntp:\\1.pool.ntp.org'));

print_r ($server->getInfo());
]]>
        </programlisting>

        <para>
            Die zurückgegebenen Informationen unterscheiden sich im verwendeten Protokoll und sie
            unterscheiden sich auch im verwendeten Server.
        </para>

    </sect2>

    <sect2 id="zend.timesync.working.exceptions">

        <title>Auf Ausnahmen achtgeben</title>

        <para>
            Ausnahmen werden für alle Zeitserver gesammelt und werden als Array zurückgegeben. Es
            ist also möglich durch alle geworfenen Ausnahmen zu laufen wie im folgenden Beispiel
            gezeigt:
        </para>

        <programlisting role="php"><![CDATA[
$serverlist = array(
        // invalid servers
        'invalid_a'  => 'ntp://a.foo.bar.org',
        'invalid_b'  => 'sntp://b.foo.bar.org',
);

$server = new Zend_TimeSync($serverlist);

try {
    $result = $server->getDate();
    echo $result->getIso();
} catch (Zend_TimeSync_Exception $e) {

    $exceptions = $e->get();

    foreach ($exceptions as $key => $myException) {
        echo $myException->getMessage();
        echo '<br />';
    }
}]]>
        </programlisting>
    </sect2>
</sect1>