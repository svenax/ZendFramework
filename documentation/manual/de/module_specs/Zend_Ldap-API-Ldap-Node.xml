<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 17230 -->
<!-- Reviewed: no -->
<sect3 id="zend.ldap.api.reference.zend-ldap-node">
    <title>Zend_Ldap_Node</title>

    <para>
        <classname>Zend_Ldap_Node</classname> includes the magic propery accessors
        <methodname>__set()</methodname>, <methodname>__get()</methodname>,
        <methodname>__unset()</methodname> and <methodname>__isset()</methodname> to access the
        attributes by their name. They proxy to
        <methodname>Zend_Ldap_Node::setAttribute()</methodname>,
        <methodname>Zend_Ldap_Node::getAttribute()</methodname>,
        <methodname>Zend_Ldap_Node::deleteAttribute()</methodname> and
        <methodname>Zend_Ldap_Node::existsAttribute()</methodname> respectively. Furthermore the
        class implements <code>ArrayAccess</code> for array-style-access to the attributes.
        <classname>Zend_Ldap_Node</classname> also implements <code>Iterator</code> and
        <code>RecursiveIterato</code> to allow for recursive tree-traversal.
    </para>

    <table id="zend.ldap.api.reference.zend-ldap-node.table">
        <title>Zend_Ldap_Node API</title>

        <tgroup cols="2">
            <thead>
                <row>
                    <entry>Method</entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><code>Zend_Ldap getLdap()</code></entry>
                    <entry>
                        Returns the current <acronym>LDAP</acronym> connection. Throws
                        <classname>Zend_Ldap_Exception</classname> if current node is in detached
                        mode (not connected to a <classname>Zend_Ldap</classname> instance).
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node attachLdap(Zend_Ldap
                        $ldap)</code>
                    </entry>
                    <entry>
                        Attach the current node to the <varname>$ldap</varname>
                        <classname>Zend_Ldap</classname> instance. Throws
                        <classname>Zend_Ldap_Exception</classname> if <varname>$ldap</varname> is
                        not responsible for the current node (node is not a child of the
                        <varname>$ldap</varname> base DN).
                    </entry>
                </row>
                <row>
                    <entry><code>Zend_Ldap_Node detachLdap()</code></entry>
                    <entry>Detach node from <acronym>LDAP</acronym> connection.</entry>
                </row>
                <row>
                    <entry><code>boolean isAttached()</code></entry>
                    <entry>
                        Checks if the current node is attached to a <acronym>LDAP</acronym>
                        connection.
                    </entry>
                </row>
                <row>
                    <entry>
                        <emphasis><code>Zend_Ldap_Node
                        create(string|array|Zend_Ldap_Dn $dn, array $objectClass)</code>
                        </emphasis>
                    </entry>
                    <entry>
                        Factory method to create a new detached
                        <classname>Zend_Ldap_Node</classname> for a given DN. Creates a new
                        <classname>Zend_Ldap_Node</classname> with the DN <varname>$dn</varname> and
                        the object-classes <varname>$objectClass</varname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <emphasis><code>Zend_Ldap_Node
                        fromLdap(string|array|Zend_Ldap_Dn $dn, Zend_Ldap $ldap)</code>
                        </emphasis>
                    </entry>
                    <entry>
                        Factory method to create an attached
                        <classname>Zend_Ldap_Node</classname> for a given DN. Loads an existing
                        <classname>Zend_Ldap_Node</classname> with the DN <varname>$dn</varname>
                        from the <acronym>LDAP</acronym> connection <varname>$ldap</varname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <emphasis><code>Zend_Ldap_Node fromArray((array $data,
                        boolean $fromDataSource)</code> </emphasis>
                    </entry>
                    <entry>
                        Factory method to create a detached
                        <classname>Zend_Ldap_Node</classname> from array data
                        <varname>$data</varname>. if <varname>$fromDataSource</varname> is
                        <constant>TRUE</constant> (<constant>FALSE</constant> by default), the data is treated as
                        beeing present in a <acronym>LDAP</acronym> tree.
                    </entry>
                </row>
                <row>
                    <entry><code>boolean isNew()</code></entry>
                    <entry>
                        Tells if the node is consiedered as new (not present on the
                        server). Please note, that this doesn't tell if the node is really
                        present on the server. Use <methodname>Zend_Ldap_Node::exists()</methodname>
                        to see if a node is already there.
                    </entry>
                </row>
                <row>
                    <entry><code>boolean willBeDeleted()</code></entry>
                    <entry>
                        Tells if this node is going to be deleted once
                        <methodname>Zend_Ldap_Node::update()</methodname> is called.
                    </entry>
                </row>
                <row>
                    <entry><code>Zend_Ldap_Node delete()</code></entry>
                    <entry>
                        Marks this node as to be deleted. Node will be deleted on
                        calling <methodname>Zend_Ldap_Node::update()</methodname> if
                        <methodname>Zend_Ldap_Node::willBeDeleted()</methodname> is true.
                    </entry>
                </row>
                <row>
                    <entry><code>boolean willBeMoved()</code></entry>
                    <entry>
                        Tells if this node is going to be moved once
                        <methodname>Zend_Ldap_Node::update()</methodname> is called.
                    </entry>
                </row>
                <row>
                    <entry><code>Zend_Ldap_Node update(Zend_Ldap $ldap)</code></entry>
                    <entry>
                        Sends all pending changes to the <acronym>LDAP</acronym> server. If
                        <varname>$ldap</varname> is omitted the current <acronym>LDAP</acronym>
                        connection is used. If the current node is detached from a
                        <acronym>LDAP</acronym> connection a
                        <classname>Zend_Ldap_Exception</classname> will be thrown. If
                        <varname>$ldap</varname> is provided the current node will be attached to
                        the given <acronym>LDAP</acronym> connection.
                    </entry>
                </row>
                <row>
                    <entry><code>Zend_Ldap_Dn getCurrentDn()</code></entry>
                    <entry>
                        Gets the current DN of the current node as a Zend_Ldap_Dn.
                        This does not reflect possible rename-operations.
                    </entry>
                </row>
                <row>
                    <entry><code>Zend_Ldap_Dn getDn()</code></entry>
                    <entry>
                        Gets the original DN of the current node as a Zend_Ldap_Dn.
                        This reflects possible rename-operations.
                    </entry>
                </row>
                <row>
                    <entry><code>string getDnString(string $caseFold)</code></entry>
                    <entry>
                        Gets the original DN of the current node as a string. This
                        reflects possible rename-operations.
                    </entry>
                </row>
                <row>
                    <entry><code>array getDnArray(string $caseFold)</code></entry>
                    <entry>
                        Gets the original DN of the current node as an array. This
                        reflects possible rename-operations.
                    </entry>
                </row>
                <row>
                    <entry><code>string getRdnString(string $caseFold)</code></entry>
                    <entry>
                        Gets the <acronym>RDN</acronym> of the current node as a string. This
                        reflects possible rename-operations.
                    </entry>
                </row>
                <row>
                    <entry><code>array getRdnArray(string $caseFold)</code></entry>
                    <entry>
                        Gets the <acronym>RDN</acronym> of the current node as an array. This
                        reflects possible rename-operations.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node setDn(Zend_Ldap_Dn|string|array
                        $newDn)</code>
                    </entry>
                    <entry>
                        Sets the new DN for this node effectively moving the node
                        once <methodname>Zend_Ldap_Node::update()</methodname> is called.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node move(Zend_Ldap_Dn|string|array
                        $newDn)</code>
                    </entry>
                    <entry>
                        This is an alias for
                        <methodname>Zend_Ldap_Node::setDn()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node rename(Zend_Ldap_Dn|string|array
                        $newDn)</code>
                    </entry>
                    <entry>
                        This is an alias for
                        <methodname>Zend_Ldap_Node::setDn()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry><code>array getObjectClass()</code></entry>
                    <entry>Returns the objectClass of the node.</entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node setObjectClass(array|string
                        $value)</code>
                    </entry>
                    <entry>Sets the objectClass attribute.</entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node appendObjectClass(array|string
                        $value)</code>
                    </entry>
                    <entry>Appends to the objectClass attribute.</entry>
                </row>
                <row>
                    <entry><code>string toLdif(array $options)</code></entry>
                    <entry>
                        Returns a <acronym>LDIF</acronym> representation of the current node.
                        <varname>$options</varname> will be passed to the
                        <classname>Zend_Ldap_Ldif_Encoder</classname>.
                    </entry>
                </row>
                <row>
                    <entry><code>array getChangedData()</code></entry>
                    <entry>
                        Gets changed node data. The array contains all changed
                        attributes. This format can be used in
                        <methodname>Zend_Ldap::add()</methodname> and
                        <methodname>Zend_Ldap::update()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry><code>array getChanges()</code></entry>
                    <entry>Returns all changes made.</entry>
                </row>
                <row>
                    <entry><code>string toString()</code></entry>
                    <entry>
                        Returns the DN of the current node - proxies to
                        <methodname>Zend_Ldap_Dn::getDnString()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry><code>string __toString()</code></entry>
                    <entry>
                        Casts to string representation - proxies to
                        <methodname>Zend_Ldap_Dn::toString()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>array toArray(boolean
                        $includeSystemAttributes)</code>
                    </entry>
                    <entry>
                        Returns an array representation of the current node. If
                        <varname>$includeSystemAttributes</varname> is <constant>FALSE</constant>
                        (defaults to <constant>TRUE</constant>) the system specific attributes are
                        stripped from the array. Unlike
                        <methodname>Zend_Ldap_Node::getAttributes()</methodname> the resulting array
                        contains the DN with key <code>'dn'</code>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>string toJson(boolean
                        $includeSystemAttributes)</code>
                    </entry>
                    <entry>
                        Gibt eine <acronym>JSON</acronym> Repräsentation des aktuellen Nodes  zurück
                        wobei <methodname>Zend_Ldap_Node::toArray()</methodname> verwendet wird.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>array getData(boolean
                        $includeSystemAttributes)</code>
                    </entry>
                    <entry>
                        Gibt die Attribute des Nodes zurück. Das Array enthält alle Attribute in Ihrem
                        internen Format (keine Konvertierung).
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>boolean existsAttribute(string $name, boolean
                        $emptyExists)</code>
                    </entry>
                    <entry>
                        Prüft ob ein angegebenes Attribut existiert. Wenn
                        <varname>$emptyExists</varname> <constant>FALSE</constant> ist werden leere
                        Attrbute (welche nur array() enthalten) als nicht-existent betrachtet und es
                        wird <constant>FALSE</constant> zurückgegeben. Wenn
                        <varname>$emptyExists</varname> true ist werden leere Attribute als existent
                        betrachtet und es wird <constant>TRUE</constant> zurückgegeben. In diesem
                        Fall gibt die Methode nur dann <constant>FALSE</constant> zurck wenn der
                        Name des Attributs in der Sammlung der Schlüssel fehlt.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>boolean attributeHasValue(string $name, mixed|array
                        $value)</code>
                    </entry>
                    <entry>
                        Prüft ob die angegebenen Werte im Attribut existieren. Die Methode gibt nur
                        dann <constant>TRUE</constant> zurück wenn alle Werte von
                        <varname>$value</varname> im Attribut vorhanden sind. Der Vergleich wird
                        strikt durchgeführt (er respektiert den Datentyp).
                    </entry>
                </row>
                <row>
                    <entry><code>integer count()</code></entry>
                    <entry>
                        Gibt die Anzahl der Attribute im Node zurück. Implementiert Countable.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>mixed getAttribute(string $name, integer|null
                        $index)</code>
                    </entry>
                    <entry>
                        Holt ein <acronym>LDAP</acronym> Attribut. Die Datenkonvertierung wird
                        angewendet durch Verwendung von
                        <methodname>Zend_Ldap_Attribute::getAttribute()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>array getAttributes(boolean
                        $includeSystemAttributes)</code>
                    </entry>
                    <entry>
                        Holt alle Attribute des Nodes. Wenn
                        <varname>$includeSystemAttributes</varname> <constant>FALSE</constant> ist
                        (der Standardwert ist <constant>TRUE</constant>) dann werden die System
                        spezifischen Attribute vom Array entfernt.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node setAttribute(string $name, mixed
                        $value)</code>
                    </entry>
                    <entry>
                        Setzt ein <acronym>LDAP</acronym> Attribut. Die Datenkonvertierung wird
                        angewendet durch Verwendung von
                        <methodname>Zend_Ldap_Attribute::setAttribute()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node appendToAttribute(string $name, mixed
                        $value)</code>
                    </entry>
                    <entry>
                        Hängt etwas an ein <acronym>LDAP</acronym> Attribut an. Die
                        Datenkonvertierung wird angewendet durch Verwendung von
                        <methodname>Zend_Ldap_Attribute::setAttribute()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>array|integer getDateTimeAttribute(string $name,
                        integer|null $index)</code>
                    </entry>
                    <entry>
                        Holt ein <acronym>LDAP</acronym> Date/Time Attribut. Die Datenkonvertierung
                        wird angewendet durch Verwendung von
                        <methodname>Zend_Ldap_Attribute::setDateTimeAttribute()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node setDateTimeAttribute(string $name,
                        integer|array $value, boolean $utc)</code>
                    </entry>
                    <entry>
                        Setzt ein <acronym>LDAP</acronym> Date/Time Attribut. Die Datenkonvertierung
                        wird angewendet durch Verwendung von
                        <methodname>Zend_Ldap_Attribute::setDateTimeAttribute()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node appendToDateTimeAttribute(string $name,
                        integer|array $value, boolean $utc)</code>
                    </entry>
                    <entry>
                        Hängt etwas an ein <acronym>LDAP</acronym> Date/Time Attribut an. Die
                        Datenkonvertierung wird angewendet durch Verwendung von
                        <methodname>Zend_Ldap_Attribute::setDateTimeAttribute()</methodname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node setPasswordAttribute(string $password,
                        string $hashType, string $attribName)</code>
                    </entry>
                    <entry>
                        Setzt ein <acronym>LDAP</acronym> Passwort bei
                        <varname>$attribName</varname> (der Standardwert ist
                        <code>'userPassword'</code>) auf <varname>$password</varname> mit dem
                        Hashtyp <varname>$hashType</varname> (der Standardwert ist
                        <constant>Zend_Ldap_Attribute::PASSWORD_HASH_MD5</constant>).
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node deleteAttribute(string
                        $name)</code>
                    </entry>
                    <entry>Löscht ein <acronym>LDAP</acronym> Attribut.</entry>
                </row>
                <row>
                    <entry>
                        <code>void removeDuplicatesFromAttribute(string
                        $name)</code>
                    </entry>
                    <entry>
                        Entfernt doppelte Werte von einem <acronym>LDAP</acronym> Attribut.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>void removeFromAttribute(string $attribName,
                        mixed|array $value)</code>
                    </entry>
                    <entry>
                        Entfernt die angegebenen Werte von einem <acronym>LDAP</acronym> Attribut.
                    </entry>
                </row>
                <row>
                    <entry><code>boolean exists(Zend_Ldap $ldap)</code></entry>
                    <entry>
                        Prüft ob der aktuelle Node im angegebenen <acronym>LDAP</acronym> Server
                        existiert (der aktuelle Server wird verwendet wenn
                        <constant>NULL</constant> übergeben wird).
                    </entry>
                </row>
                <row>
                    <entry><code>Zend_Ldap_Node reload(Zend_Ldap $ldap)</code></entry>
                    <entry>
                        Lädt die Attribute des aktuellen Nodes nochmalig vom angegebenen
                        <acronym>LDAP</acronym> Server (der aktuelle Server wird verwendet wenn
                        <constant>NULL</constant> übergeben wird).
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node_Collection
                        searchSubtree(string|Zend_Ldap_Filter_Abstract $filter, integer
                        $scope, string $sort)</code>
                    </entry>
                    <entry>
                        Sucht den Unterbaum des Nodes mit dem angegebenen <varname>$filter</varname>
                        und den angegebenen Suchparametern ab. Siehe
                        <methodname>Zend_Ldap::search()</methodname> für Details über die
                        Parameter <varname>$scope</varname> und <varname>$sort</varname>.
                    </entry>
                </row>
                <row>
                    <entry>
                        <code>integer countSubtree(string|Zend_Ldap_Filter_Abstract
                        $filter, integer $scope)</code>
                    </entry>
                    <entry>
                        Zählt die Elemente des Unterbaums vom Node welche dem angegebenen
                        <varname>$filter</varname> entsprechen und dem angegebenen Suchbereich.
                        Siehe <methodname>Zend_Ldap::search()</methodname> für Details über den
                        <varname>$scope</varname> Parameter.
                    </entry>
                </row>
                <row>
                    <entry><code>integer countChildren()</code></entry>
                    <entry>Zählt die Kinder des Nodes.</entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node_Collection
                        searchChildren(string|Zend_Ldap_Filter_Abstract $filter, string
                        $sort)</code>
                    </entry>
                    <entry>
                        Sucht nach Kindern des Nodes die dem angegebenen <varname>$filter</varname>
                        entsprechen. Siehe <methodname>Zend_Ldap::search()</methodname> für Details
                        über den <varname>$sort</varname> Parameter.
                    </entry>
                </row>
                <row>
                    <entry><code>boolean hasChildren()</code></entry>
                    <entry>Gibt zurück ob der aktuelle Node Kinder hat.</entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node_ChildrenIterator
                        getChildren()</code>
                    </entry>
                    <entry>Gibt alle Kinder des aktuellen Nodes zurück.</entry>
                </row>
                <row>
                    <entry>
                        <code>Zend_Ldap_Node getParent(Zend_Ldap
                        $ldap)</code>
                    </entry>
                    <entry>
                        Gibt den Elternteil des aktuellen Nodes zurück wobei die
                        <acronym>LDAP</acronym> Verbindung <varname>$ldap</varname> verwendet wird
                        (verwendet die aktuelle <acronym>LDAP</acronym> Verbindung wenn diese nicht
                        angegeben wird).
                    </entry>
                </row>
            </tbody>
        </tgroup>
    </table>
</sect3>
