<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 15617 -->
<!-- Reviewed: no -->
<sect1 id="zend.console.getopt.configuration">
    <title>Konfigurieren von Zend_Console_Getopt</title>

    <sect2 id="zend.console.getopt.configuration.addrules">
        <title>Regeln für das Hinzufügen von Optionen</title>
        <para>
            Man kann mehr Optionsregeln hinzufügen, zusätzlich zu denen die
            schon im <classname>Zend_Console_Getopt</classname> Constructor definiert wurden,
            durch Verwendung der <code>addRules()</code> Methode. Das Argument für
            <code>addRules()</code> ist das gleiche wie das erste Argument für den
            Constructor der Klasse. Es ist entweder eine Zeichenkette im Format der
            kurzen Syntax wie für das Definieren für Optionen definiert, oder ein
            assoziatives Array im Format der langen Syntax wie für das Definieren
            für Optionen definiert. Siehe
            <link linkend="zend.console.getopt.rules">Definieren von GetOpt Regeln</link>
            für Details über die Syntax für die Definition von Optionen.
        </para>
        <example id="zend.console.getopt.configuration.addrules.example">
            <title>Verwenden von addRules()</title>
            <programlisting language="php"><![CDATA[
$opts = new Zend_Console_Getopt('abp:');
$opts->addRules(
  array(
    'verbose|v' => 'Druckt zusätzliche Ausgaben'
  )
);
]]></programlisting>
        </example>
        <para>
            Das obige Beispiel zeigt das hinzufügen der "<code>--verbose</code>"
            Option mit einem Alias von "<code>-v</code>" zu einem Set von Optionen
            welche bereits im Aufruf durch den Constructor definiert wurden.
            Man kann kurze Format Optionen und lange Format Optionen in der
            gleichen Instanz von <classname>Zend_Console_Getopt</classname> vermischen.
        </para>
    </sect2>

    <sect2 id="zend.console.getopt.configuration.addhelp">
        <title>Hilfstexte hinzufügen</title>
        <para>
            Zusätzlich zum Definieren von Hilfstexten bei der Definition
            von Optionsregeln im langen Format, können Hilfstexte
            mit Optionsregeln verknüpft werden durch Verwendung der
            <code>setHelp()</code> Methode. Das Argument für die
            <code>setHelp()</code> Methode ist ein assoziatives Array, in welchen der
            Schlüssel ein Flag ist, und der Wert der betreffende Hilfetext.
        </para>
        <example id="zend.console.getopt.configuration.addhelp.example">
            <title>Verwenden von setHelp()</title>
            <programlisting language="php"><![CDATA[
$opts = new Zend_Console_Getopt('abp:');
$opts->setHelp(
    array(
        'a' => 'Apfel Option, ohne Parameter',
        'b' => 'Bananen Option, mit benötigtem Integer Parameter',
        'p' => 'Pfirsich Option, mit optionalem Zeichenketten Parameter'
    )
);
]]></programlisting>
        </example>
        <para>
            Wenn Optionen mit Aliasen definiert wurden, kann jeder dieser Aliase
            als Schlüssel für das assizoative Array verwendet werden.
        </para>
        <para>
            Die <code>setHelp()</code> Methode ist der einzige Weg um einen
            Hilfetext zu definieren wenn die Optionen mit der kurzen Syntax definiert
            wurden.
        </para>
    </sect2>

    <sect2 id="zend.console.getopt.configuration.addaliases">
        <title>Aliase für Optionen hinzufügen</title>
        <para>
            Aliase für Optionen können mit der <code>setAliases</code> Methode
            definiert werden. Das Argument ist ein assoziatives Array, dessen
            Schlüssel ein zuvor definiertes Flag, und dessen Wert ein neuer
            Alias für dieses Flag ist. Diese Aliase werden mit jedem existierenden
            Alias für dieses Flag gemischt. Mit anderen Worten, die zuvor definierten
            Aliase sind noch immer in Verwendung.
        </para>
        <para>
            Ein Alias kann nur einmal definiert werden. Wenn versucht wird einen Alias nochmals zu
            definieren wird eine <classname>Zend_Console_Getopt_Exception</classname> geworfen.
        </para>
        <example id="zend.console.getopt.configuration.addaliases.example">
            <title>Verwenden von setAliases()</title>
            <programlisting language="php"><![CDATA[
$opts = new Zend_Console_Getopt('abp:');
$opts->setAliases(
    array(
        'a' => 'apple',
        'a' => 'apfel',
        'p' => 'pfirsich'
    )
);
]]></programlisting>
        </example>
        <para>
            Im obigen Beispiel sind, nach Definition der Aliase, "<code>-a</code>",
            "<code>--apple</code>" und "<code>--apfel</code>" Aliase füreinander.
            Auch "<code>-p</code>" und "<code>--pfirsich</code>" sind füreinander
            Aliase.
        </para>
        <para>
            Die <code>setAliases()</code> Methode ist der einzige Weg um Aliase
            zu definieren wenn die Optionen mit der kurzen Syntax definiert wurden.
        </para>
    </sect2>

    <sect2 id="zend.console.getopt.configuration.addargs">
        <title>Argument Listen hinzufügen</title>
        <para>
            Standardmäßig verwendet <classname>Zend_Console_Getopt</classname>
            <code>$_SERVER['argv']</code> für die Analyse des Arrays von
            Kommandozeilen Argumenten. Alternativ kann das Array mit Argumenten
            als zweites Argument dem Constructor angegeben werden. Letztendlich
            können zusätzliche Argumente zu den bereits in Verwendung befindlichen
            hinzugefügt werden, durch Verwendung der <code>addArguments()</code> Methode,
            oder es kann das aktuelle Array von Argumenten
            ersetzt werden mit Hilfe der <code>setArguments()</code> Methode.
            In beiden Fällen ist der Parameter für diese Methoden ein einfaches
            Array von Zeichenketten, und die letztere Methode substituiert das Array für
            seine aktuellen Argumente.
        </para>
        <example id="zend.console.getopt.configuration.addargs.example">
            <title>Verwenden von addArguments() und setArguments()</title>
            <programlisting language="php"><![CDATA[
// Normalerweise verwendet der Constructor $_SERVER['argv']
$opts = new Zend_Console_Getopt('abp:');

// Ein Array zu den bestehenden Argumenten hinzufügen
$opts->addArguments(array('-a', '-p', 'p_parameter', 'non_option_arg'));

// Ein neues Array als Ersatz für die bestehenden Argumente
$opts->setArguments(array('-a', '-p', 'p_parameter', 'non_option_arg'));
]]></programlisting>
        </example>
    </sect2>

    <sect2 id="zend.console.getopt.configuration.config">
        <title>Konfiguration hinzufügen</title>
        <para>
            Der dritte Parameter des <classname>Zend_Console_Getopt</classname> Constructors
            ist ein Array von Optionen zur Konfiguration welche das Verhalten der
            zurückgegebenen Objektinstanz beeinflusst. Es können auch durch Verwendung
            der <code>setOptions()</code> Optionen für die Konfiguration definiert werden,
            oder es können auch individuelle Optionen mit der <code>setOption()</code>
            Methode verwendet werden.
        </para>
        <note>
            <title>Klarstellung des Ausdrucks "Option"</title>
            <para>
                Der Ausdruck "Option" wird für die Konfiguration der
                <classname>Zend_Console_Getopt</classname> Klasse verwendet um der Terminologie zu
                folgen die überall im Zend Framework benutzt wird. Das ist nicht das selbe wie die
                Kommandozeilen Optionen die von der <classname>Zend_Console_Getopt</classname>
                Klasse analysiert werden.
            </para>
        </note>
        <para>
            Die aktuell unterstützten Optionen sind durch Konstanten in der Klasse definiert.
            Diese Optionen, bzw deren konstanter Bezeichner (mit wörtlichem Wert in
            Großschreibweise) sind anbei gelistet:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <classname>Zend_Console_Getopt::CONFIG_DASHDASH</classname> ("dashDash"),
                    wenn aktiviert, ermöglicht dieses spezielle Flag "<code>--</code>"
                    das Ende von Flags zu signieren. Kommendozeilen Argumente welche
                    dem Doppel-Bindestrich Zeichen folgen werden nicht als Option
                    interpretiert selbst wenn das Argument mit einem Bindestrich
                    beginnt. Diese Konfigurationsoption ist standardmäßig aktiviert.
                </para>
            </listitem>
            <listitem>
                <para>
                    <classname>Zend_Console_Getopt::CONFIG_IGNORECASE</classname> ("ignoreCase"),
                    wenn aktiviert, werden Flags als Aliase voneinander betrachtet
                    wenn Sie sich nur in der Groß-/Kleinschreibung unterscheiden.
                    Das bedeutet das "<code>-a</code>" und "<code>-A</code>" als
                    gleiche Flags angesehen werden. Diese Konfigurationsoption ist
                    standardmäßig deaktiviert.
                </para>
            </listitem>
            <listitem>
                <para>
                    <classname>Zend_Console_Getopt::CONFIG_RULEMODE</classname> ("ruleMode") kann
                    die Werte <classname>Zend_Console_Getopt::MODE_ZEND</classname> ("zend") und
                    <classname>Zend_Console_Getopt::MODE_GNU</classname> ("gnu") haben. Diese Option
                    sollte nicht verwendet werden ausser die Klasse wird erweiter um zusätzliche
                    Syntax Formen zu unterstützen. Die zwei Modi die in der Basisklasse
                    <classname>Zend_Console_Getopt</classname> unterstützt werden sind
                    eindeutig. Wenn die Angabe eine Zeichenkette ist, nimmt die Klasse
                    <code>MODE_GNU</code> an, sonst wird <code>MODE_ZEND</code> angenommen.
                    Aber wenn die Klasse erweitert wird, und zusätzliche Syntaxformen hinzugefügt
                    werden, kann der Modus durch Verwendung dieser Option definiert werden.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Zusätzliche Konfigurationsoptionen können in zukünftigen Versionen dieser
            Klasse hinzugefügt werden.
        </para>
        <para>
            Die zwei Argumente der <code>setOption()</code> Methode sind ein Name einer
            Konfigurationsoption und ein Wert für die Option.
        </para>
        <example id="zend.console.getopt.configuration.config.example.setoption">
            <title>Verwenden von setOption()</title>
            <programlisting language="php"><![CDATA[
$opts = new Zend_Console_Getopt('abp:');
$opts->setOption('ignoreCase', true);
]]></programlisting>
        </example>
        <para>
            Das Argument für die <code>setOptions()</code> Methode ist ein
            assoziatives Array. Die Schlüssel dieses Arrays sind die Namen der
            Konfigurationsoptionen, und die Werte sind die Konfigurationswerte.
            Das ist also das Array Format welches auch im Constructor der Klasse
            verwendet wird. Die definierten Konfigurationswerte werden mit der
            aktuellen Konfiguration zusammengefügt; es müssen also nicht alle
            Optionen angegeben werden.
        </para>
        <example id="zend.console.getopt.configuration.config.example.setoptions">
            <title>Verwenden von setOptions()</title>
            <programlisting language="php"><![CDATA[
$opts = new Zend_Console_Getopt('abp:');
$opts->setOptions(
    array(
        'ignoreCase' => true,
        'dashDash'   => false
    )
);
]]></programlisting>
        </example>
    </sect2>

</sect1>
