<!-- EN-Revision: 10130 -->
<sect1 id="zend.dojo.form" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Dojo Form Elemente und Dekoratore</title>

    <para>
        Aufbauend auf den <link linkend="zend.dojo.view.dijit">Dijit View Helfern</link> bietet die Familie der
        <code>Zend_Dojo_Form</code> Klassen die Möglichkeit Dijits nativ in eigenen Formularen anzupassen.
    </para>

    <para>
        Es gibt drei Optionen für die Anpassung der Dojo Formularelemente in eigenen Formularen:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                Verwenden von <code>Zend_Dojo::enableForm()</code>. Das fügt Pluginpfade für Dekoratore und
                Elemente in allen hinzugefügten Formularelementen, rekursiv,  hinzu. Zusätzlich macht es
                die Viewobjekte dojo-verwendbar. Trotzdem ist zu beachten das jedes Unterformular das
                <emphasis>nach</emphasis> diesem Aufruf angefügt wird, auch an
                <code>Zend_Dojo::enableForm()</code> übergeben wird.
            </para>
        </listitem>

        <listitem>
            <para>
                Verwenden der Dojo-spezifischen Formular und Unterformular Implementationen,
                <code>Zend_Dojo_Form</code> und <code>Zend_Dojo_Form_SubForm</code>. Diese können als
                sofort verwendbarer Ersatz für <code>Zend_Form</code> und <code>Zend_Form_SubForm</code>
                verwendet werden, enthalten alle notwendigen Dekorator und Elementpfade, setzen die
                Dojo-spezifische Standard-DisplayGroup-Klasse, und machen die View dojo-verwendbar. 
            </para>
        </listitem>

        <listitem>
            <para>
                Als letztes, und weitschweifigstes, kan man die notwendigen Dekorator und Elementpfade selbst
                setzen, die Standard-DisplayGroup-Klasse setzen, und die View dojo-verwendbar machen. Da
                <code>Zend_Dojo::enableForm()</code> das bereits macht, gibt es nur sehr wenig Gründe diesen
                Weg zu nehmen.
            </para>
        </listitem>
    </itemizedlist>

    <example id="zend.dojo.form.enable">
        <title>Aktivieren von Dojo in bestehenden Formularen</title>

        <para>
            "Warte mal,", wird man sagen; "Ich erweitere bereits Zend_Form mit meiner eigenen Formularklasse!
            Wie kann ich Sie Dojo-verwendbar machen?'"
        </para>

        <para>
            Als erstes, und einfachstes, muß einfach die Erweiterung von <code>Zend_Form</code> so geändert
            werden das <code>Zend_Dojo_Form</code> erweitert wird, und alle Plätze in denen man
            <code>Zend_Form_SubForm</code> instanziert so aktualisiert werden das
            <code>Zend_Dojo_Form_SubForm</code> instanziert wird.
        </para>

        <para>
            Ein zweiter Weg ist der Aufruf von <code>Zend_Dojo::enableForm()</code> in der eigenen
            <code>init()</code> Methode des Formulars; wenn die Fomulardefinition komplett ist, muß durch
            alle Unterformulare iteriert werden um Sie für Dojo zu aktivieren:
        </para>

        <programlisting role="php"><![CDATA[
class My_Form_Custom extends Zend_Form
{
    public function init()
    {
        // Das Formular Dojo-aktivieren:
        Zend_Dojo::enableForm($this);

        // ... die Fomulardefinition hier weiterführen

        // Alle Unterformulare für Dojo aktivieren:
        foreach ($this->getSubForms() as $subForm) {
            Zend_Dojo::enableForm($subForm);
        }
    }
}
]]></programlisting>
    </example>

    <para>
        Die Verwendung der Dijit-spezifischen Formulardekoratoren und Elemente ist wie die Verwendung von
        anderen Formulardekoratoren oder Element.
    </para>

    <xi:include href="Zend_Dojo-Form-Decorators.xml" />
    <xi:include href="Zend_Dojo-Form-Elements.xml" />
    <xi:include href="Zend_Dojo-Form-Examples.xml" />
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
