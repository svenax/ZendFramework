<sect1 id="zend.auth.adapter.dbtable">

    <title>Datenbanktabellen Authentifizierung</title>

    <sect2 id="zend.auth.adapter.dbtable.introduction">

        <title>Einführung</title>

        <para>
            <code>Zend_Auth_Adapter_DbTable</code> bietet die Möglichkeit sich gegenüber Zeugnissen zu
            authentifizieren die in einer Datenbank Tabelle gespeichert sind. Weil
            <code>Zend_Auth_Adapter_DbTable</code> eine Instanz von <code>Zend_Db_Adapter_Abstract</code>
            benötigt, die an den Konstruktor übergeben wird, ist jede Instanz an eine spezielle Datenbank
            Verbindung verknüpft. Andere Konfigurationsoptionen können durch den Konstruktor gesetzt werden und
            durch die Methoden der Instanz. Eine für jede Option.
        </para>

        <para>
            Die vorhandenen Konfigurationsoptionen beinhalten:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>tableName</code>: Das ist der Name der Datenbanktabelle welche die Authentifikations
                        Zeugnisse enthält, und gegen die die Datenbank Authentifikations Abfrage durchgeführt
                        wird.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>identityColumn</code>: Ist der Name der Spalte der Datenbanktabelle die die
                        Identität repräsentiert. Die Spalte der Identität muß eindeutige und einmalige Werte
                        enthalten, wie einen Benutzernamen oder eine Email Adresse.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>credentialColumn</code>: Das ist der Name der Spalte der Datenbanktabelle die
                        verwendet wird um die Zeugnisse zu repräsentieren. Bei einem einfachen Identitäts und
                        Passwort-Authentifizierungs Schema korrespondieren die Zeugnisse mit dem Passwort. Siehe
                        auch die <code>credentialTreatment</code> Option.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>credentialTreatment</code>: In vielen Fällen sind Passwörter und andere sensitive
                        Daten verschlüsselt, gehasht, kodiert, verschleiert oder auf andere Weise durch irgendeine
                        Funktion oder einen Algorithmus behandelt. Durch die Spezifikation eines
                        parametrisierbaren Behandlungsstrings mit dieser Methode, wie <code>'MD5(?)'</code>
                        oder <code>'PASSWORD(?)'</code>, könnte ein Entwickler beliebiges SQL an den Eingabe-
                        Zeugnis-Daten anwenden. Da diese Funktionen der darunter liegenden RDBMS speziell
                        gehören, sollte das Handbuch der Datenbank auf das Vorhandensein solcher Funktionen
                        im eigenen Datenbank System geprüft werden.
                    </para>
                </listitem>
            </itemizedlist>
        </para>

        <example id="zend.auth.adapter.dbtable.introduction.example.basic_usage">

            <title>Grundsätzliche Verwendung</title>

            <para>
                Wie bereits in der Einführung beschrieben benötigt der <code>Zend_Auth_Adapter_DbTable</code>
                Konstruktor eine Instanz von <code>Zend_Db_Adapter_Abstract</code> die als Datenbank Verbindung
                fungiert zu welcher die Instanz des Authentifizierungs-Adapters gebunden ist. Zuerst sollte die
                Datenbankverbindung erstellt werden. 
            </para>

            <para>
                Der folgende Code erstellt eien Adapter für eine In-Memory Datenbank, erstellt ein einfaches
                Datenbankschema, und fügt eine Zeile ein gegen die später eine Authentifizierungs-Abfrage
                durchgeführt werden kann. Dieses Beispiel benötigt die SQLite Erweiterung:

                <programlisting role="php"><![CDATA[<?php
// Erstellt eine In-Memory SQLite Datenbankverbindung
require_once 'Zend/Db/Adapter/Pdo/Sqlite.php';
$dbAdapter = new Zend_Db_Adapter_Pdo_Sqlite(array('dbname' => ':memory:'));

// Erstellt eine einfache Datenbank-Erstellungs-Abfrage
$sqlCreate = 'CREATE TABLE [users] ( '
           . '[id] INTEGER  NOT NULL PRIMARY KEY, '
           . '[username] VARCHAR(50) UNIQUE NOT NULL, '
           . '[password] VARCHAR(32) NULL, '
           . '[real_name] VARCHAR(150) NULL)';

// Erstellt die Tabelle für die Authentifizierungs Zeugnisse
$dbAdapter->query($sqlCreate);

// Erstellt eine Abfrage um eine Zeile einzufügen für die eine Authentifizierung erfolgreich sein kann
$sqlInsert = 'INSERT INTO users (username, password, real_name) '
           . 'VALUES ("my_username", "my_password", "My Real Name")';

// Daten einfügen
$dbAdapter->query($sqlInsert);]]>
                </programlisting>

            </para>

            <para>
                Mit der Datenbankverbindung und den vorhandenen Tabellendaten, kann eine Instanz von
                <code>Zend_Auth_Adapter_DbTable</code> erstellt werden. Die Werte der Konfigurationsoptionen
                können dem Konstruktor übergeben werden, oder als Parameter der setzenden Methoden nach der
                Instanziierung:

                <programlisting role="php"><![CDATA[<?php
require_once 'Zend/Auth/Adapter/DbTable.php';

// Die Instanz mit Konstruktor Parametern konfiurieren...
$authAdapter = new Zend_Auth_Adapter_DbTable($dbAdapter, 'users', 'username', 'password');

// ...oder die Instanz mit den setzenden Methoden konfigurieren
$authAdapter = new Zend_Auth_Adapter_DbTable($dbAdapter);
$authAdapter->setTableName('users')
            ->setIdentityColumn('username')
            ->setCredentialColumn('password');]]>
                </programlisting>

            </para>

            <para>
                An diesem Punkt ist die Instanz des Authentifizierungsadapters bereit um Authentifierungsabfragen
                zu akzeptieren. Um eine Authentifierungsabfrage zu formulieren, werden die Eingabezeugnis Werte
                dem Adapter vor dem Aufruf der <code>authenticate()</code> Methode, übergeben:

                <programlisting role="php"><![CDATA[<?php
// Die Eingabezeugnis Werte setzen (z.B. von einem Login Formular)
$authAdapter->setIdentity('my_username')
            ->setCredential('my_password');

// Die Authentifizierungsabfrage durchführen, das Ergebnis speichern
$result = $authAdapter->authenticate();]]>
                </programlisting>

            </para>

            <para>
                Zusätzlich zum Vorhandensein der <code>getIdentity()</code> Methode über das Authentifizierungs
                Ergebnisobjekt, unterstützt <code>Zend_Auth_Adapter_DbTable</code> auch das empfangen der
                Tabellenzeile wenn die Authentifizierung erfolgeich war:

                <programlisting role="php"><![CDATA[<?php
// Die Identität ausgeben
echo $result->getIdentity() . "\n\n";

// Die Ergebniszeile ausgeben
print_r($identity);

/* Ausgabe:
my_username

Array
(
    [id] => 1
    [username] => my_username
    [password] => my_password
    [real_name] => My Real Name
)
*/]]>
                </programlisting>

                Da die Zeile der Tabelle die Zeugnis Daten enthält ist es wichtig diese Werte gegenüber
                unberechtigten Versuchen abzusichern.
            </para>

        </example>

    </sect2>

    <sect2 id="zend.auth.adapter.dbtable.advanced.storing_result_row">

        <title>Fortgeschrittene Verwendung: Ein DbTable Ergebnis Objekt dauerhaft machen</title>

        <para>
            Standardmäßig gibt <code>Zend_Auth_Adapter_DbTable</code> die unterstützte Identität an das
            Auth Objekt bei erfolgreicher Authentifizierung zurück. Ein anderes Verwendungs-Szenario, bei dem
            Entwickler ein Identitäts Objekt, welches andere nützliche Informationen enthält, in den dauerhaften
            Speichermechanismus von <code>Zend_Auth</code> abspeichern wollen, wird durch die Verwendung der
            <code>getResultRowObject()</code> Methode gelöst die ein <code>stdClass</code> Objekt zurück gibt.
            Der folgende Code Abschnitt zeigt diese Verwendung:

            <programlisting role="php"><![CDATA[<?php
// Mit Zend_Auth_Adapter_DbTable authentifizieren
$result = $this->_auth->authenticate($adapter);

if ($result->isValid()) {

    // Die Identität als Objekt speichern wobei nur der Benutzername und der echte Name zurückgegeben werden
    $this->_auth->getStorage()->write($adapter->getResultRowObject(array('username', 'real_name')));

    // Die Identität als Objekt speichern wobei die Passwort Spalte unterdrückt wird
    $this->_auth->getStorage()->write($adapter->getResultRowObject(null, 'password'));

    /* ... */

} else {

    /* ... */

}]]>
            </programlisting>

        </para>

    </sect2>

    <sect2 id="zend.auth.adapter.dbtable.advanced.advanced_usage">
        <title>Forgeschrittene Verwendung durch Beispiele</title>

        <para>
            Wärend der primäre Zweck von Zend_Auth (und konsequenter Weise
            Zend_Auth_Adapter_DbTable) die <emphasis role="strong">Authentifizierung</emphasis> und
            nicht die <emphasis role="strong">Authorisierung</emphasis> ist, gibt es ein paar
            Instanzen und Probleme auf dem Weg welche Art besser passt. Abhängig davon wie man sich
            entscheidet ein Problem zu beschreiben, macht es manchmal Sinn, das was wie ein
            Authorisierungsproblem aussieht im Authentifizierungs-Adapter zu lösen.
        </para>

        <para>
            Mit dieser kurzen Definition, hat Zend_Auth_Adapter_DbTable einige eingebaute
            Mechanismen die so angepasst werden können das zusätzliche Checks wärend der
            Authentifizierungszeit hinzugefügt werden können, um einige übliche Benutzerprobleme
            zu lösen.

            <programlisting role="php"><![CDATA[<?php
// Der Feldwert des Status eines Accounts ist nicht gleich "compromised"
$adapter = new Zend_Auth_Adapter_DbTable($db, 'users', 'username', 'password', 'MD5(?) AND status != "compromised"');

// Der aktive Feldwert des Accounts ist gleich "TRUE"
$adapter = new Zend_Auth_Adapter_DbTable($db, 'users', 'username', 'password', 'MD5(?) AND active = "TRUE"');

]]>
            </programlisting>

        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->