<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 16720 -->
<!-- Reviewed: no -->
<sect1 id="zend.dojo.build-layers">
    <title>Support für den Build Layer von Zend_Dojo</title>

    <sect2 id="zend.dojo.build-layers.introduction">
        <title>Einführung</title>

        <para>
            Dojo Build Layer bieten einen reinen Pfad von der Entwicklung zur Produktion wenn Dojo
            für den eigenen UI Layer verwendet wird. In der Entwicklung kann man auf-Wunsch laden,
            und schnelles Anwendungs Prototyping erhalten; ein Build Layer nimmt alle Abhängigkeiten
            von Dojo und kompiliert diese in eine einzelne Datei, wobei optional Leerzeichen und
            Kommentare herausgenommen werden, führt Code Heuristiken durch um weitere
            Minimalisierungen von Variablennamen zu erlauben. Zusätzlich kann es auch
            <acronym>CSS</acronym> Minimalisierungen durchführen.
        </para>

        <para>
            Um einen Build Layer zu erstellen würde man traditioneller Weise eine JavaScript Datei
            erstellen die <code>dojo.require</code> Anweisungen für jede Abhängigkeit hat, und
            optional einigen zusätzlichen Code den man ausführen will wen das Skript geladen wird.
            Als Beispiel:
        </para>

        <programlisting language="javascript"><![CDATA[
dojo.provide("custom.main");

dojo.require("dijit.layout.TabContainer");
dojo.require("dijit.layout.ContentPane");
dojo.require("dijit.form.Form");
dojo.require("dijit.form.Button");
dojo.require("dijit.form.TextBox");
]]></programlisting>

        <para>
            Auf dieses Skript wird generell als "layer" Skript referiert.
        </para>

        <para>
            Im eigenen Anwendungs Layer, würde man dann Dojo instruieren dieses Modul zu laden:
        </para>

        <programlisting language="html"><![CDATA[
<html>
<head>
    <script type="text/javascript" src="/js/dojo/dojo.js"></script>
    <script type="text/javascript">
        dojo.registerModulePath("custom", "../custom/");
        dojo.require("custom.main");
    </script>
]]></programlisting>

        <para>
            Wenn man <classname>Zend_Dojo</classname> verwendet um das zu tun, würde man das
            folgende durchführen:
        </para>

        <programlisting language="php"><![CDATA[
$view->dojo()->registerModulePath('custom', '../custom/')
             ->requireModule('custom.main');
]]></programlisting>

        <para>
            Aber da <classname>Zend_Dojo</classname> die verschiedenen <code>dojo.require</code>
            Anweisungen zusammenfügt, wie kann man das eigene Layer Skript erstellen? Man könnte
            jede Seite öffnen, die erstellten <code>dojo.require</code> Anweisungen anschauen und
            Sie herausschneiden und in eine Layer Skript Datei manuell einfügen.
        </para>

        <para>
            Trotzdem existiert eine bessere Lösung: Da <classname>Zend_Dojo</classname> diese
            Informationen bereits zusammenfügt, kann man diese Information einfach herausziehen und
            die eigene Layer Datei erstellen. Das ist der Sinn von
            <classname>Zend_Dojo_BuildLayer</classname>.
        </para>
    </sect2>

    <sect2 id="zend.dojo.build-layers.usage">
        <title>Erstellen eigener Modul Layer mit Zend_Dojo_BuildLayer</title>

        <para>
            Am einfachsten kann man einfach <classname>Zend_Dojo_BuildLayer</classname>
            instanziieren, es dem View Objekt zusammen mit dem Namen des eigenen Modul Layers
            füttern, und es den Inhalt der Layer Datei erstellen lassen; es liegt an einem selbst
            diese anschließend auf die Festplatte zu schreiben.
        </para>

        <para>
            Nehmen wir als Beispiel an das man den Modul Layer "custom.main"  erstellen will.
            Angenommen man folgt der vorgeschlagenen Projekt Verzeichnisstruktur, und man
            will JavaScript Dateien unter <filename>public/js/</filename> speichern, dann
            könnte man das folgende tun:
        </para>

        <programlisting language="php"><![CDATA[
$build = new Zend_Dojo_BuildLayer(array(
    'view'      => $view,
    'layerName' => 'custom.main',
));

$layerContents = $build->generateLayerScript();
$filename      = APPLICATION_PATH . '/../public/js/custom/main.js';
if (!dir_exists(dirname($filename))) {
    mkdir(dirname($filename));
}
file_put_contents($filename, $layerContents);
]]></programlisting>

        <para>
            Wann sollte man das obige durchführen? Damit es korrekt arbeitet, muß man es nach
            der Darstellung aller View Skripte und des Layouts tun um sicherzustellen das der
            <methodname>dojo()</methodname> Helfer vollständig bestückt wurde. Ein einfacher
            Weg um das zu tun ist die Verwendung des Front Controller Plugins, mit einem
            <methodname>dispatchLoopShutdown()</methodname> Hook:
        </para>

        <programlisting language="php"><![CDATA[
class App_Plugin_DojoLayer extends Zend_Controller_Plugin_Abstract
{
    public $layerScript = APPLICATION_PATH . '/../public/js/custom/main.js';
    protected $_build;

    public function dispatchLoopShutdown()
    {
        if (!file_exists($this->layerScript)) {
            $this->generateDojoLayer();
        }
    }

    public function getBuild()
    {
        if (null === $this->_build) {
            $this->_build = new Zend_Dojo_BuildLayer(array(
                'view'      => $view,
                'layerName' => 'custom.main',
            ));
        }
        return $this->_build;
    }

    public function generateDojoLayer()
    {
        $build = $this->getBuild();
        $layerContents = $build->generateLayerScript();
        if (!dir_exists(dirname($this->layerScript))) {
            mkdir(dirname($this->layerScript));
        }
        file_put_contents($this->layerScript, $layerContents);
    }
}
]]></programlisting>

        <note>
            <title>Den Layer nicht in jeder Seite erstellen</title>

            <para>
                Es ist verführerisch das Layer Skript auf jeder einzelnen Seite zu erstellen.
                Aber das ist Ressourcen intensiv da hierbei für jede Seite auf die Festplatte
                geschrieben werden muß. Zusätzlich erhält man keine Vorteile von Client seitigem
                Cachen, da mtime von der Datei sich jedesmal ändert. Die Datei sollte nur
                einmal geschrieben werden.
            </para>
        </note>

        <sect3 id="zend.dojo.build-layers.usage.options">
            <title>Optionen für BuildLayer</title>

            <para>
                Die obige Funktionalität wird in den meisten Situationen ausreichen. Für jene die
                weitere Anpassungen benötigen, können eine Vielzahl von Optionen verwendet werden.
            </para>

            <sect4 id="zend.dojo.build-layers.usage.options.view">
                <title>Setzen des View Objekts</title>

                <para>
                    Wärend das View Objekt wärend der Instanzierung übergeben werden kann, kann es
                    einer Instanz auch über die <methodname>setView()</methodname> Methode
                    übergeben werden:
                </para>

                <programlisting language="php"><![CDATA[
$build->setView($view);
]]></programlisting>
            </sect4>

            <sect4 id="zend.dojo.build-layers.usage.options.layername">
                <title>Setzen des Namen eines Layers</title>

                <para>
                    Wärend der Name des Layers wärend Instanzierung übergeben werden kann, kann er
                    der Instanz auch über die <methodname>setLayerName()</methodname> Methode
                    übergeben werden:
                </para>

                <programlisting language="php"><![CDATA[
$build->setLayerName("custom.main");
]]></programlisting>
            </sect4>

            <sect4 id="zend.dojo.build-layers.usage.options.onload">
                <title>Einfügen von onLoad Events im erstellten Layer</title>

                <para>
                    <code>dojo.addOnLoad</code> is a useful utility for
                    specifying actions that should trigger when the <acronym>DOM</acronym> has
                    finished loading. The <methodname>dojo()</methodname> view helper can
                    create these statements via its
                    <methodname>addOnLoad()</methodname> and
                    <methodname>onLoadCapture*()</methodname> methods. In some
                    cases, it makes sense to push these into your layer file
                    instead of rendering them via your view scripts.
                </para>

                <para>
                    By default, these are not rendered; to enable them, pass the
                    <property>consumeOnLoad</property> configuration key during
                    instantiation:
                </para>

                <programlisting language="php"><![CDATA[
$build = new Zend_Dojo_BuildLayer(array(
    'view'          => $view,
    'layerName'     => 'custom.main',
    'consumeOnLoad' => true,
));
]]></programlisting>

                <para>
                    Alternately, you can use the
                    <methodname>setConsumeOnLoad()</methodname> method after
                    instantiation:
                </para>

                <programlisting language="php"><![CDATA[
$build->setConsumeOnLoad(true);
]]></programlisting>
            </sect4>

            <sect4 id="zend.dojo.build-layers.usage.options.javascript">
                <title>Including captured JavaScript in the generated layer</title>

                <para>
                    The <methodname>dojo()</methodname> view helper includes methods for
                    capturing arbitrary JavaScript to include in the
                    &lt;script&gt; tag containing the various
                    <code>dojo.require</code> and <code>dojo.addOnLoad</code>
                    statements. This can be useful when creating default data
                    stores or globally scoped objects used throughout your
                    application.
                </para>

                <para>
                    By default, these are not rendered; to enable them, pass the
                    <property>consumeJavascript</property> configuration key during
                    instantiation:
                </para>

                <programlisting language="php"><![CDATA[
$build = new Zend_Dojo_BuildLayer(array(
    'view'              => $view,
    'layerName'         => 'custom.main',
    'consumeJavascript' => true,
));
]]></programlisting>

                <para>
                    Alternately, you can use the
                    <methodname>setConsumeJavascript()</methodname> method after
                    instantiation:
                </para>

                <programlisting language="php"><![CDATA[
$build->setConsumeJavascript(true);
]]></programlisting>
            </sect4>
        </sect3>
    </sect2>

    <sect2 id="zend.dojo.build-layers.profiles">
        <title>Generating Build Profiles with Zend_Dojo_BuildLayer</title>

        <para>
            One of the chief benefits of a Dojo module layer is that it
            facilitates the creation of a custom build.
            <classname>Zend_Dojo_BuildLayer</classname> has functionality for
            generate build profiles.
        </para>

        <para>
            The simplest use case is to utilize the
            <methodname>generateBuildProfile()</methodname> method and send the
            output to a file:
        </para>

        <programlisting language="php"><![CDATA[
$build = new Zend_Dojo_BuildLayer(array(
    'view'      => $view,
    'layerName' => 'custom.main',
));

$profile   = $build->generateBuildProfile();
$filename  = APPLICATION_PATH . '/../misc/scripts/custom.profile.js';
file_put_contents($filename, $profile);
]]></programlisting>

        <para>
            Just like generating layers, you may want to automate this via a
            <methodname>dispatchLoopShutdown()</methodname> plugin hook; you
            could even simply modify the one shown for generating layers to read
            as follows:
        </para>

        <programlisting language="php"><![CDATA[
class App_Plugin_DojoLayer extends Zend_Controller_Plugin_Abstract
{
    public $layerScript  = APPLICATION_PATH
                         . '/../public/js/custom/main.js';
    public $buildProfile = APPLICATION_PATH
                         . '/../misc/scripts/custom.profile.js';
    protected $_build;

    public function dispatchLoopShutdown()
    {
        if (!file_exists($this->layerScript)) {
            $this->generateDojoLayer();
        }
        if (!file_exists($this->buildProfile)) {
            $this->generateBuildProfile();
        }
    }

    public function generateDojoLayer() { /* ... */ }

    public function generateBuildProfile()
    {
        $profile = $this->getBuild()->generateBuildProfile();
        file_put_contents($this->buildProfile, $profile);
    }

}
]]></programlisting>

        <para>
            As noted, with module layers, you should only create the file once.
        </para>

        <sect3 id="zend.dojo.build-layers.profiles.options">
            <title>Build Profile options</title>

            <para>
                The above functionality will suffice for most situations. The
                only way to customize build profile generation is to provide
                additional build profile options to utilize.
            </para>

            <para>
                As an example, you may want to specify what type of
                optimizations should be performed, whether or not to optimize
                <acronym>CSS</acronym> files in the layer, whether or not to copy tests into the
                build, etc. For a listing of available options, you should read
                the <ulink url="http://docs.dojocampus.org/build/index">Dojo
                    Build documentation</ulink> and <ulink
                    url="http://www.dojotoolkit.org/book/dojo-book-0-9/part-4-meta-dojo/package-system-and-custom-builds">accompanying
                documentation</ulink>.
            </para>

            <para>
                Das Setzen dieser Optionen ist trivial: Verwendung der
                <methodname>addProfileOption()</methodname>,
                <methodname>addProfileOptions()</methodname>, oder
                <methodname>setProfileOptions()</methodname> Methoden. Die erste Methode fügt einen
                einzelnes Schlüssel und Werte Options Paar hinzu, die zweite fügt mehrere hinzu,
                und die dritte überschreibt alle Optionen in der Liste von Schlüssel und Werte
                Paaren angegeben sind.
            </para>

            <para>
                Standardmäßig werden die folgenden Optionen gesetzt:
            </para>

            <programlisting language="javascript"><![CDATA[
{
    action:        "release",
    optimize:      "shrinksafe",
    layerOptimize: "shrinksafe",
    copyTests:     false,
    loader:        "default",
    cssOptimize:   "comments"
}
]]></programlisting>

            <para>
                Man kann jegliche Schlüssel und Werte Paare übergeben; das Dojo Build Skript
                ignoriert jene die es nict versteht.
            </para>

            <para>
                Als Beispiel für das Setzen von Optionen:
            </para>

            <programlisting language="php"><![CDATA[
// Eine einzelne Option:
$build->addProfileOption('version', 'zend-1.3.1');

// Mehrere Optionen:
$build->addProfileOptions(array(
    'loader'   => 'xdomain',
    'optimize' => 'packer',
));

// Oder Optionen überschreiben:
$build->setProfileOptions(array(
    'version'  => 'custom-1.3.1',
    'loader'   => 'shrinksafe',
    'optimize' => 'shrinksafe',
));
]]></programlisting>
        </sect3>
    </sect2>
</sect1>
