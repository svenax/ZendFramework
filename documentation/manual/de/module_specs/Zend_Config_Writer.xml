<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 13910 -->
<sect1 id="zend.config.writer.introduction">
    <title>Zend_Config_Writer</title>
    <para>
        <code>Zend_Config_Writer</code> gibt einem die Möglichkeit Configdateien aus <code>Zend_Config</code>
        Objekten heraus zu schreiben. Es arbeitet mit einem Adapter-artigen System und ist deswegen sehr
        einfach zu verwenden. Standardmäßig wird <code>Zend_Config_Writer</code> mit drei Adaptern
        ausgeliefert, die alle gleich funktionieren. Der Writer wird mit speziellen Optionen instanziert,
        welche <code>filename</code> und <code>config</code> sein können. Dann wird die <code>write()</code>
        Methode des Writers aufgerufen und die Configdatei wird erstellt. Man kann <code>$filename</code>
        und <code>$config</code> auch direkt an die <code>write()</code> Methode übergeben. Aktuell werden
        die folgenden Writer mit <code>Zend_Config_Writer</code> ausgeliefert:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <code>Zend_Config_Writer_Array</code>
            </para>
        </listitem>
        <listitem>
            <para>
                <code>Zend_Config_Writer_Ini</code>
            </para>
        </listitem>
        <listitem>
            <para>
                <code>Zend_Config_Writer_Xml</code>
            </para>
        </listitem>
    </itemizedlist>

    <para>
        Als Ausnahme hat <code>Zend_Config_Writer_Ini</code> einen zusätzlichen optionalen Parameter
        <code>nestSeparator</code>, welche definiert mit welchem Zeichen die einzelnen Nodes getrennt werden.
        Der Standard ist ein einzelner Punkt, wie er standardmäßig von <code>Zend_Config_Ini</code>
        akzeptiert wird.
    </para>

    <para>
        Wenn ein <code>Zend_Config</code> Objekt geändert oder erstellt wird, muß man einige Dinge wissen.
        Um einen Wert zu erstellen oder zu ändern muß einfach der Parameter des <code>Zend_Config</code>
        Objektes über den Zugriffsaccessor (<code>-&gt;</code>) gesetzt werden. Um eine Sektion im Root
        oder im Branch zu erstellen muß einfach ein neues Aray erstellt werden
        (<code>$config-&gt;branch = array();</code>). Um zu definieren welche Sektion eine andere
        erweitert, muß die <code>setExtend()</code> Methode am Root <code>Zend_Config</code> Objekt
        aufgerufen werden.
    </para>

    <example id="zend.config.writer.example.using">
        <title>Verwenden von <code>Zend_Config_Writer</code></title>
        <para>
            Dieses Beispiel zeigt die grundsätzliche Verwendung von <code>Zend_Config_Writer_Xml</code>
            um eine neue Konfigurationsdatei zu erstellen:
        </para>
        <programlisting role="php"><![CDATA[
// Ein neues Config Objekt erstellen
$config = new Zend_Config(array(), true);
$config->production = array();
$config->staging    = array();

$config->setExtend('staging', 'production');

$config->production->db = array();
$config->production->db->hostname = 'localhost';
$config->production->db->username = 'production';

$config->staging->db = array();
$config->staging->db->username = 'staging';

// Die Config Datei auf einem der folgenden Wege schreiben:
// a)
$writer = new Zend_Config_Writer_Xml(array('config'   => $config,
                                           'filename' => 'config.xml'));
$writer->write();

// b)
$writer = new Zend_Config_Writer_Xml();
$writer->setConfig($config)
       ->setFilename('config.xml')
       ->write();

// c)
$writer = new Zend_Config_Writer_Xml();
$writer->write('config.xml', $config);
]]>
        </programlisting>
        <para>
            Das erstellt eine XML Config Datei mit den Sektionen production und staging, wobei staging
            production erweitert.
        </para>
    </example>

    <example id="zend.config.writer.modifying">
        <title>Eine bestehende Config ändern</title>
        <para>
            Dieses Beispiel zeigt wie eine bestehende Config Datei bearbeitet werden kann.
        </para>
        <programlisting role="php"><![CDATA[
// Lädt alle Sektionen einer bestehenden Config Datei, und überspringt
// alle Erweiterungen
$config = new Zend_Config_Ini('config.ini',
                              null,
                              array('skipExtends'        => true,
                                    'allowModifications' => true));

// Ändere einen Wert
$config->production->hostname = 'foobar';

// Schreibe die Config Datei
$writer = new Zend_Config_Writer_Ini(array('config'   => $config,
                                           'filename' => 'config.ini'));
$writer->write();
]]>
        </programlisting>
    </example>

    <note>
        <title>Laden einer Config Datei</title>
        <para>
            Beim Laden einer bestehenden Config Datei für eine Änderung ist es sehr wichtig  das alle
            Sektionen geladen werden und die Erweiterungen übersprungen werden, sodas keine Werte
            zusammengefügt werden. Das wird durch die Übergabe von <code>skipExtends</code> als Option
            an den Constructor durchgeführt.
        </para>
    </note>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
