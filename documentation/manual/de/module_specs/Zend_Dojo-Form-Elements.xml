<!-- EN-Revision: 10130 -->
<sect2 id="zend.dojo.form.elements">
    <title>Dijit-Specifische Fomularelemente</title>

    <para>
        Jedes Formular-Dijit für welches ein Viewhelfer vorhanden ist hat ein korrespondierendes
        <code>Zend_Form</code> Element. Alle von Ihnen bieten die folgenden Methoden für die Manipulation
        von Dijit Parametern an:
    </para>

    <itemizedlist>
        <listitem><para>
                <code>setDijitParam($key, $value)</code>: Setzt einen einzelnen Dijit Parameter. Wenn der
                Dijit Parmeter bereits existiert wird er überschrieben.
        </para></listitem>

        <listitem><para>
                <code>setDijitParams(array $params)</code>: Setzt mehrere Dijit Parameter auf einmal. Jeder
                übergebene Parameter der bereits existierenden entspricht wird überschrieben.
        </para></listitem>

        <listitem><para>
                <code>hasDijitParam($key)</code>: Ob ein angegebener Dijit Parameter definiert und vorhanden
                ist oder nicht.
        </para></listitem>

        <listitem><para>
                <code>getDijitParam($key)</code>: Gibt den angegebenen Dijit Parameter. Wenn er nicht
                vorhanden ist, wird ein null Wert zurückgegeben.
        </para></listitem>

        <listitem><para>
                <code>getDijitParams()</code>: Gibt alle Dijit Parameter zurück.
        </para></listitem>

        <listitem><para>
                <code>removeDijitParam($key)</code>: Entfernt den angegebenen Dijit Parameter. 
        </para></listitem>

        <listitem><para>
                <code>clearDijitParams()</code>: Löscht alle aktuell definierten Dijit Parameter. 
        </para></listitem>
    </itemizedlist>

    <para>
        Dijit Parameter werden in der öffentlichen <code>dijitParams</code> Eigenschaft gespeichert.
        Deshalb kann ein existierendes Formularelement einfach dijit-aktiviert werden indem diese
        Eigenschaft auf dem Element gesetzt wird; man hat in diesem Fall nur nicht die Zugriffsmethoden um
        die Parameter zu manipulieren.
    </para>

    <para>
        Zusätzlich implementieren Dijit-spezifische Element eine andere Liste von Dekoratoren, die dem
        folgenden entsprechen:
    </para>

    <programlisting role="php"><![CDATA[
$element->addDecorator('DijitElement')
        ->addDecorator('Errors')
        ->addDecorator('HtmlTag', array('tag' => 'dd'))
        ->addDecorator('Label', array('tag' => 'dt'));
]]></programlisting>

    <para>
        Effektiv wird der DijitElement Dekorator statt dem standardmäßigen ViewHelper Dekorator verwendet.
    </para>

    <para>
        Letztendlich stellt das Basis-Dijitelement sicher das der Dojo Viewhelfer Pfad in der View gesetzt ist.
    </para>

    <para>
        Eine Variante von DijitElement, DijitMulti, bietet die Funktionalität des abstrakten <code>Multi</code>
        Formularelements, das es Entwicklern erlaubt 'multiOptions' zu spezifizieren -- typischerweise
        Select-Optionen oder Radio-Optionen.
    </para>

    <para>
        Die folgenden Dijitelemente werden in der standardmäßigen Zend Framework Distribution ausgeliefert.
    </para>

    <sect3 id="zend.dojo.form.elements.button">
        <title>Button</title>

        <para>
            Wärend es nicht vom <link linkend="zend.form.standardElements.submit">standardmäßigen Submit
            Element</link> abgeleitet ist, implementiert es die gleiche Funktionalität, und kann als
            Drop-In Ersatz für das standardmäßige <link linkend="zend.form.standardElements.button">Button
            Element</link>  verwendet werden. Die folgende Funktionalität wird zur Verfügung gestellt:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>getLabel()</code> verwendet den Elementnamen als Label für den Button wenn kein
                Name angegeben wurde. Zusätzlich übersetzt es den Namen wenn ein Übersetzungsadapter mit
                einer passenden übersetzten Meldung vorhanden ist.
            </para></listitem>

            <listitem><para>
                <code>isChecked()</code> ermittelt ob der übermittelte Wert zum Label passt; wenn das der
                Fall ist wird true zurückgegeben. Das ist für die Erkennung, welcher Button verwendet wurde
                als das Formular übermittelt wurde, nützlich.
            </para></listitem>
        </itemizedlist>

        <para>
            Zusätzlich werden nur die Dekoratore <code>DijitElement</code> und <code>DtDdWrapper</code>
            für Buttonelemente benutzt.
        </para>

        <example id="zend.dojo.form.elements.button.example">
            <title>Beispiel für die Verwendung des Button Dijit Elements</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'Button',
    'foo',
    array(
        'label' => 'Button Label',
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.checkBox">
        <title>CheckBox</title>

        <para>
            Wärend es nicht vom <link linkend="zend.form.standardElements.checkbox">standardmäßigen Checkbox
            Element</link> abgeleitet ist, implementiert es die gleiche Funktionalität. Das bedeutet das die
            folgenden Methoden zur Verfügung gestellt werden:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setCheckedValue($value)</code>: Setzt den Wert der verwendet werden soll wenn das
                Element angehakt ist.
            </para></listitem>

            <listitem><para>
                <code>getCheckedValue()</code>: Gibt den Wert des Elements zurück der verwendet wird wenn
                das Element angehakt ist.
            </para></listitem>

            <listitem><para>
                <code>setUncheckedValue($value)</code>: Setzt den Wert des Elements der verwendet wird wenn
                das Element nicht angehakt ist.
            </para></listitem>

            <listitem><para>
                <code>getUncheckedValue()</code>: Gibt den Wert des Elements zurück der verwendet wird wenn
                das Element nicht angehakt ist.
            </para></listitem>

            <listitem><para>
                <code>setChecked($flag)</code>: Markiert das Element als angehakt oder nicht angehakt.
            </para></listitem>

            <listitem><para>
                <code>isChecked()</code>: Ermittelt ob das Element aktuell angehakt ist.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.checkBox.example">
            <title>Beispiel für die Verwendung des CheckBox Dijit Elements</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'CheckBox',
    'foo',
    array(
        'label'          => 'Eine Checkbox',
        'checkedValue'   => 'foo',
        'uncheckedValue' => 'bar',
        'checked'        => true,
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.comboBox">
        <title>ComboBox</title>

        <para>
            Wie in der ComboBox <link linkend="zend.dojo.view.dijit.form">Dijit Viewhelfer Dokumentation</link>
            beschrieben, sind Comboboxen ein Hybrid zwischen Select und Texteingaben, erlauben automatische
            Vervollständigung und die Fähigkeit eine Alternative zu den angebotenen Optionen zu spezifizieren.
        </para>

        <para>
            Das ComboBox Formularelement bietet Zugriffsmethoden und Mutatoren für das Ermitteln und Setzen
            von Selectoptionen sowie des ComboBox dojo.data Datenspeichers (wenn er verwendet wird). Es
            erweitert DijitMulti, welches es erlaubt Selectoptionen über die Methoden
            <code>setMultiOptions()</code> und <code>setMultiOption()</code> zu spezifizieren. Zusätzlich
            stehen die folgenden Methoden zur Verfügung:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>getStoreInfo()</code>: Gibt alle aktuell gesetzten Informationen des Datenspeichers
                zurück. Gibt ein leeres Array zurück wenn aktuell keine Daten gesetzt sind.
            </para></listitem>

            <listitem><para>
                <code>setStoreId($identifier)</code>: Setzt die Identifikatorvariable des Speichers
                (normalerweise wird darauf durch das Attribut 'jsId' in Dojo referiert). Das sollte
                ein gültiger Name für eine Javascriptvariable sein. 
            </para></listitem>

            <listitem><para>
                <code>getStoreId()</code>: Gibt den Namen der Identifikatorvariable des Speichers zurück.
            </para></listitem>

            <listitem><para>
                <code>setStoreType($dojoType)</code>: Setzt die Datenspeicherklasse die verwendet werden
                soll; z.B., "dojo.data.ItemFileReadStore".
            </para></listitem>

            <listitem><para>
                <code>getStoreType()</code>: Gibt die Dojo Datenspeicherklasse zurück die verwendet werden soll.
            </para></listitem>

            <listitem><para>
                <code>setStoreParams(array $params)</code>: Setzt jeden verwendeten Parameter um das
                Datenspeicherobjekt zu konfigurieren. Als Beispiel würde der
                dojo.data.ItemFileReadStore Datenspeicher einen 'url' Parameter erwarten der auf einen Ort
                zeigt der das dojo.data Objekt zurückgibt.
            </para></listitem>

            <listitem><para>
                <code>getStoreParams()</code>: Gibt alle aktuell gesetzten Datenspeicher Parameter zurück;
                wenn keiner gesetzt ist, wird ein leeres Array zurückgegeben.
            </para></listitem>

            <listitem><para>
                <code>setAutocomplete($flag)</code>: Zeigt ob das selektierte Element verwendet wird oder nicht
                wenn der Benutzer das Element verlässt.
            </para></listitem>

            <listitem><para>
                <code>getAutocomplete()</code>: Gibt den Wert des autocomplete Flags zurück.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.comboBox.selectExample">
            <title>Das ComboBox Dijit Element als Select Eingabe verwenden</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'ComboBox', 
    'foo', 
    array(
        'label'        => 'ComboBox (select)',
        'value'        => 'blue',
        'autocomplete' => false,
        'multiOptions' => array(
            'red'    => 'Rouge',
            'blue'   => 'Bleu',
            'white'  => 'Blanc',
            'orange' => 'Orange',
            'black'  => 'Noir',
            'green'  => 'Vert',
        ),
    )
);
]]></programlisting>
        </example>

        <example id="zend.dojo.form.elements.comboBox.datastoreExample">
            <title>Das ComboBox Dijit Element mit einem Datenspeicher verwenden</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'ComboBox', 
    'foo', 
    array(
        'label'       => 'ComboBox (datastore)',
        'storeId'     => 'stateStore',
        'storeType'   => 'dojo.data.ItemFileReadStore',
        'storeParams' => array(
            'url' => '/js/states.txt',
        ),
        'dijitParams' => array(
            'searchAttr' => 'name',
        ),
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.currencyTextBox">
        <title>CurrencyTextBox</title>

        <para>
            Die CurrencyTextBox ist primär für die Unterstützung von Währungseingaben. Die Währung kann
            lokalisiert werden, und unterstützt sowohl Kommazahlen als auch ganze Zahlen.
        </para>

        <para>
            Intern ist die CurrencyTextBox abgeleitet von 
            <link linkend="zend.dojo.form.elements.numberTextBox">NumberTextBox</link>,
            <link linkend="zend.dojo.form.elements.validationTextBox">ValidationTextBox</link>,
            und <link linkend="zend.dojo.form.elements.textBox">TextBox</link>; alle vorhandenen
            Methoden dieser Klassen sind vorhanden. Zusätzlich können die folgenden bedingten Methoden
            verwendet werden:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setCurrency($currency)</code>: Setzt den Typ der Währung die verwendet werden sol;
                sollte der <ulink url="http://en.wikipedia.org/wiki/ISO_4217">ISO-4217</ulink> Spezifikation
                folgen.
            </para></listitem>

            <listitem><para>
                <code>getCurrency()</code>: Gibt den aktuellen Währungstyp zurück.
            </para></listitem>

            <listitem><para>
                <code>setSymbol($symbol)</code>: Setzt das 3-buchstabige
                <ulink url="http://en.wikipedia.org/wiki/ISO_4217">ISO-4217</ulink> Symbol der Währung
                das verwendet werden soll.
            </para></listitem>

            <listitem><para>
                <code>getSymbol()</code>: Gibt das aktuelle Währungssymbol zurück.
            </para></listitem>

            <listitem><para>
                <code>setFractional($flag)</code>: Setzt ob für die Währung Kommazahlen oder ganze Zahlen
                verwendet werden dürfen.
            </para></listitem>

            <listitem><para>
                <code>getFractional()</code>: Gibt den Status des Kommazahlen Flags zurück.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.currencyTextBox.example">
            <title>Beispiel für die Verwendung des CurrencyTextBox Dijit Elements</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'CurrencyTextBox', 
    'foo', 
    array(
        'label'          => 'Währung:',
        'required'       => true,
        'currency'       => 'USD',
        'invalidMessage' => 'Ungültiger Wert. Es müssen das Dollarzeichen, ein Komma und Cents enthalten sein.',
        'fractional'     => false,
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.dateTextBox">
        <title>DateTextBox</title>

        <para>
            DateTextBox bietet einen Kalender Drop-Down für die Auswahl eines Datums, sowie einer Clientseitigen
            Überprüfung und Formatierung.
        </para>

        <para>
            Intern ist DateTextBox abgeleitet von
            <link linkend="zend.dojo.form.elements.validationTextBox">ValidationTextBox</link> und
            <link linkend="zend.dojo.form.elements.textBox">TextBox</link>; alle vorhandenen Methoden dieser
            Klassen sind vorhanden. Zusätzlich können die folgenden Methoden verwendet werden um individuelle
            Abhängigkeiten zu setzen:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setAmPm($flag)</code> and <code>getAmPm()</code>: Ob in der Zeit AM/PM Strings
                verwendet werden sollen oder nicht.
            </para></listitem>

            <listitem><para>
                <code>setStrict($flag)</code> und <code>getStrict()</code>: Ob Reguläre Ausdrücke strikt
                passen müssen oder nicht. Wenn es false ist, was der Standardwert ist, wird es nicht über
                Leerzeichen und einige Abkürzungen lamentieren.
            </para></listitem>

            <listitem><para>
                <code>setLocale($locale)</code> und <code>getLocale()</code>: Setzt und gibt die Locale zurück
                die mit diesem speziellen Element verwendet werden soll.
            </para></listitem>

            <listitem><para>
                <code>setDatePattern($pattern)</code> und <code>getDatePattern()</code>: Bietet und gibt den
                <ulink url="http://www.unicode.org/reports/tr35/#Date_Format_Patterns">Unicode Pattern des
                Datumsformats</ulink> für die Formatierung des Datums zurück.
            </para></listitem>

            <listitem><para>
                <code>setFormatLength($formatLength)</code> und <code>getFormatLength()</code>: Bietet und
                gibt den Formatlänge Typ der verwendet werden soll zurück; sollte "long", "short", "medium"
                oder "full" sein.
            </para></listitem>

            <listitem><para>
                <code>setSelector($selector)</code> und <code>getSelector()</code>: Bietet und gibt den Stil
                des Selektors zurück; sollte entweder "date" oder "time" sein.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.dateTextBox.example">
            <title>Beispiel der Verwendung des DateTextBox Dijit Elements</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'DateTextBox', 
    'foo', 
    array(
        'label'          => 'Datum:',
        'required'       => true,
        'invalidMessage' => 'Ungültiges Datum spezifiziert.',
        'formatLength'   => 'long',
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.horizontalSlider">
        <title>HorizontalSlider</title>

        <para>
            HorizontalSlider bietet ein Schieber UI Widget für die Auswahl eines nummerischen Wertes in einem
            Bereich. Intern, setzt es den Wert eines versteckten Elements welches vom Formular übermittelt wird.
        </para>

        <para>
            HorizontalSlider ist vom <link linkend="zend.dojo.form.elements.slider">abstrakten Slider Dijit
            Element</link> abgeleitet. Zusätzlich hat es eine Vielzahl von Methoden für das Setzen und
            Konfigurieren der Schieberregeln und Regel Labels.
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>setTopDecorationDijit($dijit)</code> und <code>setBottomDecorationDijit($dijit)</code>:
                    Setzt den Namen des Dijits das entweder oberhalb oder unterhalb des Schiebers verwendet
                    werden soll. Es darf nicht den "dijit.form." Präfix enthalten, sondern nur den endgültigen
                    Namen -- entweder "HorizontalRule" oder "HorizontalRuleLabels".
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setTopDecorationContainer($container)</code> und
                    <code>setBottomDecorationContainer($container)</code>: Spezifiziert den Namen der für das
                    Containerelement der Regeln verwendet werden soll; z.B. 'topRule', 'topContainer', usw.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setTopDecorationLabels(array $labels)</code> und 
                    <code>setBottomDecorationLabels(array $labels)</code>: Setzt die Labels die für eine der
                    RuleLabel Dijit Typen verwendet werden sollen. Diese sollten ein indiziertes Array sein;
                    spezifiziere eine einzelnes Leerzeichen um eine gegebene Labelposition zu überspringen
                    (wie beim Beginn oder dem Ende).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setTopDecorationParams(array $params)</code> und 
                    <code>setBottomDecorationParams(array $params)</code>: Dijit Parameter die verwendet
                    werden sollen wenn die gegebene Rule oder RuleLabels Dijits konfiguriert werden
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setTopDecorationAttribs(array $attribs)</code> und
                    <code>setBottomDecorationAttribs(array $attribs)</code>: HTML Attribute die für die
                    gegebene Rule oder RuleLabels HTML Elementcontainer spezifiziert werden.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getTopDecoration()</code> und <code>getBottomDecoration()</code>: Geben alle
                    Metadaten für eine gegebene Rule oder RuleLabels Definition zurück, wie von den obigen
                    Mutatoren geliefert.
                </para>
            </listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.horizontalSlider.example">
            <title>Beispiel der Verwendung des HorizontalSlider Dijit Elements</title>

            <para>
                Das folgende erzeugt eine horizontale Schieberauswahl mit Integerwerten die von -10 bis 10
                reichen. Oben sind Labels bei den 20%, 40%, 60% und 80% Marken. Unten sind Regeln bei 0, 50%
                und 100%. Jedesmal wenn der Wert geändert wird, wird das versteckte Element das den Wert
                speichert aktualisiert. 
            </para>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'HorizontalSlider', 
    'horizontal', 
    array(
        'label'                     => 'HorizontalSlider',
        'value'                     => 5,
        'minimum'                   => -10,
        'maximum'                   => 10,
        'discreteValues'            => 11,
        'intermediateChanges'       => true,
        'showButtons'               => true,
        'topDecorationDijit'        => 'HorizontalRuleLabels',
        'topDecorationContainer'    => 'topContainer',
        'topDecorationLabels'       => array(
                ' ',
                '20%',
                '40%',
                '60%',
                '80%',
                ' ',
        ),
        'topDecorationParams'      => array(
            'container' => array(
                'style' => 'height:1.2em; font-size=75%;color:gray;',
            ),
            'list' => array(
                'style' => 'height:1em; font-size=75%;color:gray;',
            ),
        ),
        'bottomDecorationDijit'     => 'HorizontalRule',
        'bottomDecorationContainer' => 'bottomContainer',
        'bottomDecorationLabels'    => array(
                '0%',
                '50%',
                '100%',
        ),
        'bottomDecorationParams'   => array(
            'list' => array(
                'style' => 'height:1em; font-size=75%;color:gray;',
            ),
        ),
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.numberSpinner">
        <title>NumberSpinner</title>

        <para>
            Ein Nummernkreisel (Number Spinner) ist ein Textelement für die Eingabe von nummerischen Werten;
            es enthält auch Elemente für das inkrementieren und dekrementieren des Wertes mit einer
            gesetzten Anzahl.
        </para>

        <para>
            Die folgenden Methoden sind vorhanden:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setDefaultTimeout($timeout)</code> und <code>getDefaultTimeout()</code>: Setzt und gibt
                den Standardtimeout, in Millisekunden, zurück der zwischen dem gedrückt halten des Buttons
                und der Änderung des Wertes ist.
            </para></listitem>
            
            <listitem><para>
                <code>setTimeoutChangeRate($rate)</code> und <code>getTimeoutChangeRate()</code>: Setzt und
                gibe die Rate, in Millisekunden, zurück mit der Änderungen durchgeführt werden wenn ein
                Button gedrückt gehalten wird.
            </para></listitem>
            
            <listitem><para>
                <code>setLargeDelta($delta)</code> und <code>getLargeDelta()</code>: Setzt und gibt die
                Menge zurück mit welcher der nummerische Wert geändert werden soll wenn ein Button
                gedrückt gehalten wird.
            </para></listitem>
            
            <listitem><para>
                <code>setSmallDelta($delta)</code> und <code>getSmallDelta()</code>: Setzt und gibt das
                Delta zurück mit dem die Nummer geändert werden soll wenn ein Button einmal gedrückt wird.
            </para></listitem>
            
            <listitem><para>
                <code>setIntermediateChanges($flag)</code> und <code>getIntermediateChanges()</code>:
                Setzt un gibt das Flag zurück das anzeigt ob jede Änderung des Werte angezeigt werden soll
                wenn der Button gedrückt gehalten wird, oder nicht.
            </para></listitem>
            
            <listitem><para>
                <code>setRangeMessage($message)</code> und <code>getRangeMessage()</code>: Setzt und gibt
                die Nachricht zurück die den Bereich der möglichen Werte anzeigt.
            </para></listitem>
            
            <listitem><para>
                <code>setMin($value)</code> und <code>getMin()</code>: Setzt und gibt den mindesten möglichen
                Wert zurück.
            </para></listitem>
            
            <listitem><para>
                <code>setMax($value)</code> und <code>getMax()</code>: Setzt und gibt den maximalen möglichen
                Wert zurück.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.numberSpinner.example">
            <title>Beispiel der Verwendung des NumberSpinner Dijit Elements</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'NumberSpinner', 
    'foo', 
    array(
        'value'             => '7',
        'label'             => 'NumberSpinner',
        'smallDelta'        => 5,
        'largeDelta'        => 25,
        'defaultTimeout'    => 500,
        'timeoutChangeRate' => 100,
        'min'               => 9,
        'max'               => 1550,
        'places'            => 0,
        'maxlength'         => 20,
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.numberTextBox">
        <title>NumberTextBox</title>

        <para>
            Ein Nummernkreisel ist ein Textelement für die Eingabe von nummerischen Werten; anders als beim
            NummerSpinner, werden Nummern manuell eingegeben. Prüfungen und Abhängigkeiten können angegeben
            werden um sicherzustellen das die Nummer immer in einem bestimmten Bereich oder Format ist.
        </para>

        <para>
            Intern wird NumberTextBox abgeleitet von
            <link linkend="zend.dojo.form.elements.validationTextBox">ValidationTextBox</link> und
            <link linkend="zend.dojo.form.elements.textBox">TextBox</link>; alle in diesen Klassen vorhandenen
            Methoden sind vorhanden. Zusätzlich können die folgenden Methoden verwendet werden um individuelle
            Abhängigkeiten zu setzen:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setLocale($locale)</code> und <code>getLocale()</code>: Spezifiziert und gibt ein
                spezifisches oder alternatives Gebietsschema zurück das mit diesem Dijit verwendet werden soll. 
            </para></listitem>

            <listitem><para>
                <code>setPattern($pattern)</code> und <code>getPattern()</code>: Setzt und gibt ein
                <ulink url="http://www.unicode.org/reports/tr35/#Number_Format_Patterns">Nummern Patternformat</ulink>
                zurück das verwendet wird um eine Nummer zu formatieren.
            </para></listitem>

            <listitem><para>
                <code>setType($type)</code> und <code>getType()</code>: Setzt und gibt eine nummerischen
                Formattyp zurück der verwendet wird (sollte 'decimal', 'percent' oder 'currency' sein).
            </para></listitem>

            <listitem><para>
                <code>setPlaces($places)</code> und <code>getPlaces()</code>: Setzt und gibt die Anzahl der
                Dezimalstellen die unterstützt werden sollen zurück.
            </para></listitem>

            <listitem><para>
                <code>setStrict($flag)</code> und <code>getStrict()</code>: Setzt und gibt den Wert des
                Strictflags zurück, welches anzeigt wieviel Ungenauigkeit in Bezug auf Leerzeichen und
                nicht-nummerische Zeichen erlaubt ist.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.numberTextBox.example">
            <title>Beispiel der Verwendung des NumberTextBox Dijit Elements</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'NumberTextBox', 
    'elevation', 
    array(
        'label'          => 'NumberTextBox',
        'required'       => true,
        'invalidMessage' => 'Ungültige Eingabe.',
        'places'         => 0,
        'constraints'    => array(
            'min'    => -20000,
            'max'    => 20000,
        ),
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.radioButton">
        <title>RadioButton</title>

        <para>
            RadioButton umschließt ein standard Radio-Input Element um ein konsistentes Look and Feel mit
            den anderen Dojo Dijits zu bieten.
        </para>

        <para>
            RadioButton erweitert DijitMulti, welches es erlaubt Selectoptionen über die
            <code>setMultiOptions()</code> und <code>setMultiOption()</code> Methoden zu spezifizieren.
        </para>

        <example id="zend.dojo.form.elements.radioButton.example">
            <title>Beispiel der Verwendung des RadioButton Dijit Elements</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'RadioButton', 
    'foo', 
    array(
        'label' => 'RadioButton',
        'multiOptions'  => array(
            'foo' => 'Foo',
            'bar' => 'Bar',
            'baz' => 'Baz',
        ),
        'value' => 'bar',
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.slider">
        <title>Abstraktes Slider Element</title>

        <para>
            Slider ist ein abstraktes Element welches abgeleitet ist von 
            <link linkend="zend.dojo.form.elements.horizontalSlider">HorizontalSlider</link> und
            <link linkend="zend.dojo.form.elements.verticalSlider">VerticalSlider</link>. Es bietet
            eine Anzahl von üblichen Methoden für die Konfiguration von Slidern an, inklusive:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setClickSelect($flag)</code> und <code>getClickSelect()</code>: Setzt und gibt das
                Flag zurück das anzeigt ob das Klicken auf den Slider den Wert ändert oder nicht.
            </para></listitem>

            <listitem><para>
                <code>setIntermediateChanges($flag)</code> und <code>getIntermediateChanges()</code>:
                Setzt und gibt das Flag zurück das anzeigt ob das Dijit eine Benachrichtigung bei jedem
                Slider-Event schickt oder nicht.
            </para></listitem>

            <listitem><para>
                <code>setShowButtons($flag)</code> und <code>getShowButtons()</code>: Setzt und gibt das
                Flag zurück das anzeigt ob Buttons an den Enden angezeigt werden oder nicht; wenn ja, dann
                kann der Benutzer diese anklicken und damit den Wert des Sliders ändern.
            </para></listitem>

            <listitem><para>
                <code>setDiscreteValues($value)</code> und <code>getDiscreteValues()</code>: Setzt und gibt
                die Anzahl an diskreten Werte zurück die vom Slider repräsentiert werden.
            </para></listitem>

            <listitem><para>
                <code>setMaximum($value)</code> und <code>getMaximum()</code>: Setzt den maximalen Wert des
                Sliders.
            </para></listitem>

            <listitem><para>
                <code>setMinimum($value)</code> und <code>getMinimum()</code>: Setzt den minimalen Wert des
                Sliders.
            </para></listitem>

            <listitem><para>
                <code>setPageIncrement($value)</code> und <code>getPageIncrement()</code>: Setzt den Wert um den
                sich der Slider auf Tastaturereignisse ändert. 
            </para></listitem>
        </itemizedlist>

        <para>
            Ein Beispiel der Verwendung wird mit jeder konkreten Klasse angegeben die diese Klasse erweitert.
        </para>
    </sect3>

    <sect3 id="zend.dojo.form.elements.textBox">
        <title>TextBox</title>

        <para>
            TextBox is included primarily to provide a text input with
            consistent look-and-feel to the other dijits. However, it also
            includes some minor filtering and validation capabilities,
            represented in the following methods:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setLowercase($flag)</code> and
                <code>getLowercase()</code>: set and retrieve the flag
                indicating whether or not input should be cast to lowercase.
            </para></listitem>

            <listitem><para>
                <code>setPropercase($flag)</code> and
                <code>getPropercase()</code>: set and retrieve the flag
                indicating whether or not the input should be cast to Proper
                Case.
            </para></listitem>

            <listitem><para>
                <code>setUppercase($flag)</code> and <code>getUppercase()</code>: set and retrieve the flag indicating whether or not the input should be cast to UPPERCASE.
            </para></listitem>

            <listitem><para>
                <code>setTrim($flag)</code> and <code>getTrim()</code>: set and
                retrieve the flag indicating whether or not leading or trailing
                whitespace should be stripped.
            </para></listitem>

            <listitem><para>
                <code>setMaxLength($length)</code> and
                <code>getMaxLength()</code>: set and retrieve the maximum
                length of input.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.textBox.example">
            <title>Example TextBox dijit element usage</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'TextBox', 
    'foo', 
    array(
        'value'      => 'some text',
        'label'      => 'TextBox',
        'trim'       => true,
        'propercase' => true,
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.textarea">
        <title>Textarea</title>

        <para>
            Textarea acts primarily like a standard HTML textarea. However, it
            does not support either the rows or cols settings. Instead, the
            textarea width should be specified using standard CSS measurements;
            rows should be omitted entirely. The textarea will then grow
            vertically as text is added to it.
        </para>

        <example id="zend.dojo.form.elements.textarea.example">
            <title>Example Textarea dijit element usage</title>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'Textarea', 
    'textarea', 
    array(
        'label'    => 'Textarea',
        'required' => true,
        'style'    => 'width: 200px;',
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.timeTextBox">
        <title>TimeTextBox</title>

        <para>
            TimeTextBox is a text input that provides a drop-down for selecting
            a time. The drop-down may be configured to show a certain window of
            time, with specified increments.
        </para>

        <para>
            Internally, TimeTextBox derives from <link
                linkend="zend.dojo.form.elements.dateTextBox">DateTextBox</link>,
            <link
                linkend="zend.dojo.form.elements.validationTextBox">ValidationTextBox</link>
            and <link linkend="zend.dojo.form.elements.textBox">TextBox</link>;
            all methods available to those classes are available. In addition,
            the following methods can be used to set individual constraints:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setTimePattern($pattern)</code> and
                <code>getTimePattern()</code>: set and retrieve the <ulink
                    url="http://www.unicode.org/reports/tr35/#Date_Format_Patterns">unicode
                    time format pattern</ulink> for formatting the time.
            </para></listitem>

            <listitem><para>
                <code>setClickableIncrement($format)</code> and
                <code>getClickableIncrement()</code>: set the <ulink
                    url="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</ulink>
                string representing the amount by which every clickable element
                in the time picker increases.
            </para></listitem>

            <listitem><para>
                <code>setVisibleIncrement($format)</code> and
                <code>getVisibleIncrement()</code>: set the increment visible
                in the time chooser; must follow ISO-8601 formats.
            </para></listitem>

            <listitem><para>
                <code>setVisibleRange($format)</code> and
                <code>getVisibleRange()</code>: set and retrieve the range of
                time visible in the time chooser at any given moment; must
                follow ISO-8601 formats.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.timeTextBox.example">
            <title>Example TimeTextBox dijit element usage</title>

            <para>
                The following will create a TimeTextBox that displays 2 hours
                at a time, with increments of 10 minutes.
            </para>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'TimeTextBox', 
    'foo', 
    array(
        'label'              => 'TimeTextBox',
        'required'           => true,
        'visibleRange'       => 'T04:00:00',
        'visibleIncrement'   => 'T00:10:00',
        'clickableIncrement' => 'T00:10:00',
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.validationTextBox">
        <title>ValidationTextBox</title>

        <para>
            ValidationTextBox provides the ability to add validations and constraints to a text input. Internally, it derives from <link linkend="zend.dojo.form.elements.textBox">TextBox</link>, and adds the following accessors and mutators for manipulating dijit parameters:
        </para>

        <itemizedlist>
            <listitem><para>
                <code>setInvalidMessage($message)</code> and
                <code>getInvalidMessage()</code>: set and retrieve the tooltip
                message to display when the value does not validate.
            </para></listitem>

            <listitem><para>
                <code>setPromptMessage($message)</code> and
                <code>getPromptMessage()</code>: set and retrieve the tooltip
                message to display for element usage.
            </para></listitem>

            <listitem><para>
                <code>setRegExp($regexp)</code> and <code>getRegExp()</code>:
                set and retrieve the regular expression to use for validating
                the element. The regular expression does not need boundaries
                (unlike PHP's preg* family of functions).
            </para></listitem>

            <listitem><para>
                <code>setConstraint($key, $value)</code> and
                <code>getConstraint($key)</code>: set and retrieve additional
                constraints to use when validating the element; used primarily
                with subclasses. Constraints are stored in the 'constraints'
                key of the dijit parameters.
            </para></listitem>

            <listitem><para>
                <code>setConstraints(array $constraints)</code> and
                <code>getConstraints()</code>: set and retrieve individual
                constraints to use when validating the element; used primarily
                with subclasses.
            </para></listitem>

            <listitem><para>
                <code>hasConstraint($key)</code>: test whether a given
                constraint exists.
            </para></listitem>

            <listitem><para>
                <code>removeConstraint($key)</code> and
                <code>clearConstraints()</code>: remove an individual or all
                constraints for the element.
            </para></listitem>
        </itemizedlist>

        <example id="zend.dojo.form.elements.validationTextBox.example">
            <title>Example ValidationTextBox dijit element usage</title>

            <para>
                The following will create a ValidationTextBox that requires a
                single string consisting solely of word characters (i.e., no
                spaces, most punctuation is invalid).
            </para>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'ValidationTextBox', 
    'foo', 
    array(
        'label'          => 'ValidationTextBox',
        'required'       => true,
        'regExp'         => '[\w]+',
        'invalidMessage' => 'Invalid non-space text.',
    )
);
]]></programlisting>
        </example>
    </sect3>

    <sect3 id="zend.dojo.form.elements.verticalSlider">
        <title>VerticalSlider</title>

        <para>
            VerticalSlider is the sibling of <link
                linkend="zend.dojo.form.elements.horizontalSlider">HorizontalSlider</link>,
            and operates in every way like that element. The only real
            difference is that the 'top*' and 'bottom*' methods are replaced by
            'left*' and 'right*', and instead of using HorizontalRule and
            HorizontalRuleLabels, VerticalRule and VerticalRuleLabels should be
            used.
        </para>

        <example id="zend.dojo.form.elements.verticalSlider.example">
            <title>Example VerticalSlider dijit element usage</title>

            <para>
                The following will create a vertical slider selection with
                integer values ranging from -10 to 10. The left will have labels
                at the 20%, 40%, 60%, and 80% marks. The right will have rules
                at 0, 50%, and 100%. Each time the value is changed, the hidden
                element storing the value will be updated.
            </para>

            <programlisting role="php"><![CDATA[
$form->addElement(
    'VerticalSlider', 
    'foo', 
    array(
        'label'                    => 'VerticalSlider',
        'value'                    => 5,
        'style'                    => 'height: 200px; width: 3em;',
        'minimum'                  => -10,
        'maximum'                  => 10,
        'discreteValues'           => 11,
        'intermediateChanges'      => true,
        'showButtons'              => true,
        'leftDecorationDijit'      => 'VerticalRuleLabels',
        'leftDecorationContainer'  => 'leftContainer',
        'leftDecorationLabels'     => array(
                ' ',
                '20%',
                '40%',
                '60%',
                '80%',
                ' ',
        ),
        'rightDecorationDijit' => 'VerticalRule',
        'rightDecorationContainer' => 'rightContainer',
        'rightDecorationLabels' => array(
                '0%',
                '50%',
                '100%',
        ),
    )
);
]]></programlisting>
        </example>
    </sect3>
</sect2>
<!--
vim:se ts=4 sw=4 et:
-->
