<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 14978 -->
<!-- Reviewed: no -->
<sect1 id="zend.mime.message">
    <title>Zend_Mime_Message</title>

    <sect2 id="zend.mime.message.introduction">
        <title>Einführung</title>

        <para>
            <code>Zend_Mime_Message</code> repräsentiert eine Mime konforme Nachricht,
            welche einen oder mehrere Abschnitte (Repräsentiert durch
            <link linkend="zend.mime.part"><code>Zend_Mime_Part</code></link> Objekte) beinhalten
            kann. Mit MimeMessage können Mime konforme Nachrichten, durch die Klasse, erstellt
            werden. Verschlüsselungs- und BoundaryGrenzbehandlung werden transparent durch die Klasse
            behandelt. MimeMessage Objekte können auch durch übergebene Strings rekonstruiert
            werden (Experimentell). Verwendet durch <link linkend="zend.mail"><code>Zend_Mail</code></link>.
        </para>
    </sect2>

    <sect2 id="zend.mime.message.instantiation">
        <title>Instanziierung</title>
        <para>
            Es gibt keinen expliziten Konstruktor für <code>Zend_Mime_Message</code>.
        </para>
    </sect2>

    <sect2 id="zend.mime.message.addparts">
        <title>MIME Abschnitte hinzufügen</title>

        <para>
            <link linkend="zend.mime.part"><code>Zend_Mime_Part</code></link>
            Objekte können zu einem bestehenden <code>Zend_Mime_Message</code> Objekt
            hinzugefügt werden durch aufruf von
            <code>->addPart($part)</code>
        </para>

        <para>
            Ein Array mit allen <code>Zend_Mime_Part</code> Objekten der
            <code>Zend_Mime_Message</code> wird von der Methode
            <code>->getParts()</code> zurück gegeben. Das Zend_Mime_Part Objekt
            kann dann geändert werden, da es im Array als Referenz gespeichert wird.
            Wenn Abschnitte zum Array hinzugefügt werden oder die Sequenz geändert wird,
            muß das Array dem <code>Zend_Mime_Message</code> Objekt zurückgegeben werden,
            durch Aufruf von <code>->setParts($partsArray)</code>
        </para>

        <para>
            Die Funktion <code>->isMultiPart()</code> gibt true zurück, wenn mehr
            als ein Abschnitt im <code>Zend_Mime_Message</code> Objekt registriert wurde,
            und das Objekt deshalb bei der Erstellung des aktuellen Outputs eine
            Multipart-Mime-Message erstellen würde.
        </para>
    </sect2>

    <sect2 id="zend.mime.message.bondary">
        <title>Grenzbehandlung</title>

        <para>
            <code>Zend_Mime_Message</code> erzeugt und verwendet normalerweise sein
            eigenes <code>Zend_Mime</code> Objekt zur Erstellung einer Grenze. Wenn eine eigene
            Grenze erstellt wird, oder das das Verhalten des <code>Zend_Mime</code> Objekts
            geändert werden muß, welches von <code>Zend_Mime_Message</code> verwendet wird,
            kann ein eigenes Zend Mime Objekt instanziiert und bei <code>Zend_Mime_Message</code>
            registriert werden. Normalerweise muß das nicht gemacht werden.
            <code>->setMime(Zend_Mime $mime)</code> setzt eine spezielle Instanz von
            <code>Zend_Mime</code> welche durch diese <code>Zend_Mime_Message</code> verwendet wird.
        </para>

        <para>
            <code>->getMime()</code> gibt eine Instanz von
            <code>Zend_Mime</code> zurück, welche zur Wiedergabe der Nachricht verwendet wird,
            wenn <code>generateMessage()</code> aufgerufen wird.
        </para>

        <para>
            <code>->generateMessage()</code> gibt den <code>Zend_Mime_Message</code>
            Inhalt in einem String wieder.
        </para>
    </sect2>

    <sect2 id="zend.mime.message.parse">
        <title>Parst einen String um ein Zend_Mime_Message Objekt zu erstellen (Experimentell)</title>

        <para>
            Eine übergebene MIME konforme Nachricht in einem String kann dazu verwendet
            werden, um daraus ein <code>Zend_Mime_Message</code> Objekt wieder herzustellen.
            <code>Zend_Mime_Message</code> hat eine statische Factory Methode um den String zu
            parsen und gibt ein <code>Zend_Mime_Message</code> Objekt zurück.
        </para>

        <para>
            <code>Zend_Mime_Message::createFromMessage($str, $boundary)</code>
            entschlüsselt einen übergebenen String und gibt ein <code>Zend_Mime_Message</code>
            Objekt zurück welches anschließend durch <code>->getParts()</code> überprüft werden kann.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->