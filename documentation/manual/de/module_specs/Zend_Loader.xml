<!-- EN-Revision: 7194 -->
<sect1 id="zend.loader.load">

    <title>Dynamisches Laden von Dateien und Klassen</title>

    <para>
        Die Zend_Loader Klasse enthält Methoden die helfen Dateien dynamisch zu laden.
    </para>

    <tip>
        <title>Zend_Loader vs. require_once()</title>
        <para>
            Die <code>Zend_Loader</code> Methoden werden am Besten verwendet wenn der Dateiname
            der Verwendet wird variabel ist. Wenn er zum Beispiel auf einem Parameter
            einer Benutzereinfabe oder eines Arguments einer Methode basiert. Wenn
            eine Datei oder eine Klasse geladen werden soll deren Name konstant ist,
            gibt es keinen Vorteil durch die Verwendung von <code>Zend_Loader</code> gegenüber
            traditionellen PHP Funktionen wie
            <ulink url="http://php.net/require_once"><code>require_once()</code></ulink>.
        </para>
    </tip>

    <sect2 id="zend.loader.load.file">

        <title>Dateien laden</title>

        <para>
            Die statische Methode <code>Zend_Loader::loadFile()</code> lädt eine
            PHP Datei. Die geladene Datei kann jeden PHP Code enthalten.
            Diese Methode ist ein Wrapper für die PHP Funktion
            <ulink url="http://php.net/include"><code>include()</code></ulink>.
            Diese Methode wirft bei einem Fehler eine <code>Zend_Exception</code>,
            zum Beispiel wenn die definierte Datei nicht existiert.
        </para>

        <example id="zend.loader.load.file.example">
            <title>Beispiel der loadFile() Methode</title>
            <programlisting role="php"><![CDATA[<?php
Zend_Loader::loadFile($filename, $dirs=null, $once=false);]]>
            </programlisting>
    </example>

        <para>
            Das <code>$filename</code> Argument definert den Dateinamen der geladen
            werden soll, und der keine Verzeichnis Informationen enthalten darf.
            Eine Sicherheitsprüfung wird auf <code>$filename</code>
            durchgeführt. Das <code>$filename</code> Argument darf nur
            Alphanumerische Zeichen enthalten, Bindestriche ("-"), Unterstriche ("_")
            oder Punkte ("."). Das <code>$dirs</code> Argument hat keine dieser
            Einschränkungen.
        </para>

        <para>
            Das <code>$dirs</code> Argument definiert das Verzeichnis in welchem
            nach der Datei gesucht werden soll. Wenn es <code>NULL</code> ist, wird
            nur anhand vom <code>include_path</code> gesucht. Wenn eine Zeichenkette
            oder ein Array angegeben wurde, wird das definierte Verzeichnis oder
            die Verzeichnisse durchsucht, und anschließend der <code>include_path</code>.
        </para>

        <para>
            Das <code>$once</code> Argument ist Boolean. Wenn es <code>TRUE</code>
            ist, verwendet <code>Zend_Loader::loadFile()</code> die PHP Funktion
            <ulink url="http://php.net/include"><code>include_once()</code></ulink>
            für das Laden der Datei, andernfalls wird die PHP Funktion
            <ulink url="http://php.net/include_once"><code>include()</code></ulink>
            verwendet.
        </para>

    </sect2>

    <sect2 id="zend.loader.load.class">

        <title>Klassen laden</title>

        <para>
            Die statische Methode <code>Zend_Loader::loadClass($class, $dirs)</code>
            lädt eine PHP Datei und prüft anschließend ob die Klasse existiert.
        </para>

        <example id="zend.loader.load.class.example">
            <title>Beispiel der loadClass() Methode</title>
            <programlisting role="php"><![CDATA[<?php
Zend_Loader::loadClass('Container_Tree',
    array(
        '/home/production/mylib',
        '/home/production/myapp'
    )
);]]>
            </programlisting>
        </example>

        <para>
            Die Zeichenkette die die Klasse definiert, wird in einen relativen Pfad
            umgewandelt durch die Annahme das Verzeichnisse mit Unterstrichen
            getrennt werden und anfügen von '.php'. Im obigen Beispiel wird
            'Container_Tree' zu 'Container/Tree.php'.
        </para>

        <para>
            Wenn <code>$dirs</code> eine Zeichenkette oder ein Array ist, durchsucht
            <code>Zend_Loader::loadClass()</code> die Verzeichnisse in der
            angegebenen Reihenfolge. Die erste passende Datei wird geladen. Wenn die
            Datei in den definierten Verzeichnissen <code>$dirs</code> nicht existiert
            wird der <code>include_path</code> der PHP Umgebung durchsucht.
        </para>

        <para>
            Wenn die Datei nicht gefunden wird, oder die Klasse nach dem Laden nicht
            existiert, wirft <code>Zend_Loader::loadClass()</code> eine <code>Zend_Exception</code>.
        </para>

        <para>
            <code>Zend_Loader::loadFile()</code> wird für das Laden verwendet, deswegen
            darf der Klassenname nur Alphanumerische Zeichen, den Bindestrich ('-'),
            den Unterstrich ('_') und den Punkt ('.') enthalten.
        </para>

    </sect2>

    <sect2 id="zend.loader.load.isreadable">

        <title>Testen ob eine Datei gelesen werden kann</title>

        <para>
            Die statische Methode <code>Zend_Loader::isReadable($pathname)</code>
            gibt <code>TRUE</code> zurück wenn eine Datei im angegebenen Pfadnamen
            existiert und lesbar ist, andernfalls <code>FALSE</code>.
        </para>

        <example id="zend.loader.load.isreadable.example">
            <title>Beispiel der isReadable() Methode</title>
            <programlisting role="php"><![CDATA[<?php
if (Zend_Loader::isReadable($filename)) {
    // Mach was mit $filename
}]]>
            </programlisting>
        </example>

        <para>
            Das <code>$filename</code> Argument definiert den Dateinamen der
            geprüft werden soll. Er darf Pfadinformationen enthalten. Diese Methode
            ist ein Wrapper für die PHP Funktion
            <ulink url="http://php.net/is_readable"><code>is_readable()</code></ulink>.
            Diese PHP Funktion durchsucht den <code>include_path</code> nicht, wärend
            <code>Zend_Loader::isReadable()</code> dies macht.
        </para>

    </sect2>

    <sect2 id="zend.loader.load.autoload">

        <title>Verwenden von Autoloaders</title>

        <para>
            Die <code>Zend_Loader</code> Klasse enthält eine Methode die im PHP SPL Autoloader
            registriert werden kann. <code>Zend_Loader::autoload()</code> ist die
            Callback Methode. Als Vereinfachung bietet <code>Zend_Loader</code> die
            <code>registerAutoload()</code> Funktion welche die
            <code>autoload()</code> Methode registriert. Wenn die
            <code>spl_autoload</code> Erweiterung in der PHP Umgebung nicht
            vorhanden ist wird die <code>registerAutoload()</code> Methode eine
            <code>Zend_Exception</code> werfen.
        </para>

        <example id="zend.loader.load.autoload.example">
            <title>Beispiel für das registrieren der Autoloader Callback Methode</title>
            <programlisting role="php"><![CDATA[<?php
Zend_Loader::registerAutoload();]]>
            </programlisting>
        </example>

        <para>
            Nach dem registrieren des Zend Framework Autoload Callbacks, können
            die Klassen des Zend Frameworks referenziert werden ohne das sie
            explizit geladen werden müssen. Die <code>autoload()</code> Methode
            verwendet automatisch <code>Zend_Loader::loadClass()</code> wenn eine
            Klasse referenziert wird.
        </para>

        <para>
            Wenn die <code>Zend_Loader</code> Klasse erweitert wird, kann ein optionales Argument
            für <code>registerAutoload()</code> angegeben werden, um die Klasse zu
            definieren von welcher die <code>autoload()</code> Methode registriert
            werden soll.
        </para>

        <example id="zend.loader.load.autoload.example-extended">
            <title>
                Beispiel für das registrieren der Autoload Callback Methode von einer
                erweiterten Klasse
            </title>
            <para>
                Wegen der Semantik der Referenzen von statischen Funktionen in PHP,
                muß Code für beide <code>loadClass()</code> und <code>autoload()</code>
                implementiert werden, und <code>autoload()</code> muß <code>self::loadClass()</code>
                aufrufen. Wenn die <code>autoload()</code> Methode den Aufruf zu <code>self::loadClass()</code>
                an die Elternklasse delegiert, ruft Sie die Methode des Namens in der Elternklasse und nicht
                in der Subklasse auf.
            </para>
            <programlisting role="php"><![CDATA[<?php
class My_Loader extends Zend_Loader
{
    public static function loadClass($class, $dirs = null)
    {
        parent::loadClass($class, $dirs);
    }

    public static function autoload($class)
    {
        try {
            self::loadClass($class);
            return $class;
        } catch (Exception $e) {
            return false;
        }
    }
}

Zend_Loader::registerAutoload('My_Loader');]]>
            </programlisting>
        </example>

        <para>
            Der Callback für den Autoloader kann entfernt werden. Die <code>registerAutoload()</code> Methode hat
            ein zweites optionales Argument welches standardmäßig <code>true</code> ist. Wenn dieses Argument
            <code>false</code> ist, wird die Registrierung des Callback des Autoloaders vom SPL Autoload Stack
            entfernt anstatt registriert.
        </para>

    </sect2>

</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
