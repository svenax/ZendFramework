<!-- EN-Revision: 9890 -->
<sect1 id="zend.soap.wsdl">
    <title>WSDL Zugriffsmethoden</title>

    <note>
        <para>
            Die <code>Zend_Soap_Wsdl</code> Klasse wird von der Zend_Soap_Server Komponente intern verwendet
            um mit WSDL Dokumenten zu arbeiten. Trotzdem könnte man die Funktionalität die von dieser
            Klasse angeboten wird auch für eigene Zwecke verwendet werden.
        </para>
        <para>
            Wenn man nicht plant das zu tun, kann dieses Kapitel der Dokumentation übersprungen werden.
        </para>
    </note>

    <sect2 id="zend.soap.wsdl.constructor">
        <title><code>Zend_Soap_Wsdl</code> Konstruktor.</title>
        <para>
            Der <code>Zend_Soap_Wsdl</code> Konstruktor nimmt drei Parameter:
            <orderedlist>
                <listitem>
                    <simpara><code>$name</code> - Name des Web Services der beschrieben wird.</simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <code>$uri</code> - URI wo das WSDL vorhanden sein wird (könnte auch eine Referenz
                        zu einer Datei auf dem Dateisystem sein.)
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <code>$extractComplexTypes</code> - Optionales Flag das verwendet wird um zu
                        identifizieren das komplexe Typen (Objekte) extrahiert werden sollten.
                    </simpara>
                </listitem>
            </orderedlist>
        </para>
    </sect2>

    <sect2 id="zend.soap.wsdl.addmessage">
        <title>Die <code>addMessage()</code> Methode.</title>
        <para>
            Die <code>addMessage($name, $parts)</code> Methode fügt eine neue Nachrichten Beschreibung
            zu einem WSDL Dokumetn hinzu (/definitions/message Element).
        </para>
        <para>
            Jede Nachricht korrespondiert zu einer Methode im Sinne von <code>Zend_Soap_Server</code>
            und <code>Zend_Soap_Client</code> Funktionalität.
        </para>
        <para>
           Der <code>$name</code> Parameter repräsentiert den Namen der Nachricht.
        </para>
        <para>
           Der <code>$parts</code> Parameter ist ein Array von Nachrichten Teilen welche SOAP Aufruf
           Parameter beschreiben. Es ist ein assoziatives Array:
           'part name' (SOAP Aufruf Parameter Name) =&gt; 'part type'.
        </para>
        <para>
            Das Typ Mapping Management wird durchgeführt indem die <code>addTypes()</code>,
            <code>addTypes()</code> und <code>addComplexType()</code> Methoden ausgeführt werden (siehe anbei). 
        </para>
        <note>
            <para>
                Nachrichten Teile können entweder 'element' oder 'type' Attribute für das typisieren
                verwenden (siehe <ulink url="http://www.w3.org/TR/wsdl#_messages"/>).
            </para>
            <para>
                'element' Attribute müssen zu einem entsprechenden Element von Daten Typ Definition referieren.
                'type' zu einem entsprechenden complexType Eintrag.
            </para>
            <para>
                Alle standardmäßigen XSD Typen haben beide 'element' und 'complexType' Definitionen
                (siehe <ulink url="http://schemas.xmlsoap.org/soap/encoding/"/>).
            </para>
            <para>
                Alle nicht-standardmäßigen Typen, welche hinzugefügt werden können durch verwenden der
                <code>Zend_Soap_Wsdl::addComplexType()</code> Methode, sind beschrieben durch Verwendung
                des 'complexType' Nodes des '/definitions/types/schema/' Abschnitts des WSDL Dokuments.
            </para>
            <para>
                <code>addMessage()</code> Methoden verwenden also immer das 'type' Attribut um Typen zu
                beschreiben.
            </para>
        </note>
    </sect2>
    
    <sect2 id="zend.soap.wsdl.add_port_type">
        <title>Die <code>addPortType()</code> Methode.</title>
        <para>
            Die <code>addPortType($name)</code> Methode fügt neue Port Typen zu einem WSDL Dokument
            (/definitions/portType) mit dem spezifizierten Port Typ Namen hinzu.
        </para>
        <para>
            Es verbindet ein Set von Web Service Methoden die im Sinne der Zend_Soap_Server Implementation
            definiert sind.
        </para>
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_porttypes"/> für Details.
        </para>
    </sect2>
    
    <sect2 id="zend.soap.wsdl.add_port_operation">
        <title>Die <code>addPortOperation()</code> Methode.</title>
        <para>
            Die <code>addPortOperation($portType, $name, $input = false, $output = false, $fault = false)</code>
            Methode fügt eine neue Port Operation zum spezifizierten Port Typ des WSDL Dokuments hinzu 
            (/definitions/portType/operation).
        </para>
        <para>
            Jede Port Operation korrespondiert zu einer Methode der Klasse (wenn der Web Service auf einer
            Klasse basiert) oder Funktion (wenn der Web Service auf einem Set von Methoden basiert) im Sinne der
            Zend_Soap_Server Implementation.
        </para>
        <para>
            Sie fügt auch eine korrespondierende Port Operations Nachricht hinzu anhängig von den spezifizierten
            <code>$input</code>, <code>$output</code> und <code>$fault</code> Parametern.
            
            <note>
                <para>
                    Die Zend_Soap_Server Komponente erzeugt zwei Nachrichten für jede Port Operation wärend das
                    Service das auf der <code>Zend_Soap_Server</code> Klasse basiert beschrieben wird:
                    <itemizedlist>
                        <listitem>
                            <para>
                                Eine Eingabe Nachricht mit dem Namen <code>$methodName . 'Request'</code>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Eine Ausgabe Nachricht mit dem Namen <code>$methodName . 'Response'</code>.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </note>
        </para>
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_request-response"/> für Details.
        </para>
    </sect2>

    <sect2 id="zend.soap.wsdl.add_binding">
        <title>Die <code>addBinding()</code> Methode.</title>
        <para>
            Die <code>addBinding($name, $portType)</code> Methode fügt neue Bindungen in das WSDL Dokument ein
            (/definitions/binding). 
        </para>
        <para>
            Der 'binding' WSDL Dokument Knoten definiert das Nachrichtenformat und Protokolldetails für
            Operationen und Nachrichten die von einem speziellen portType definiert sind
            (siehe <ulink url="http://www.w3.org/TR/wsdl#_bindings"/>).
        </para>
        <para>
            Die Methode erzeugt einen Bindungsknoten und gibt diesen zurück. Dieser kann dann verwendet werden
            um mit aktuellen Daten gefüllt zu werden. 
        </para>
        
        <para>
            Die Zend_Soap_Server Implementation verwendet den <code>$serviceName . 'Binding'</code> Namen
            für das 'binding' Element eines WSDL Dokuments.
        </para>
    </sect2>
    
    
    <sect2 id="zend.soap.wsdl.add_binding_operation">
        <title>Die <code>addBindingOperation()</code> Methode.</title>
        <para>
            Die <code>addBindingOperation($binding, $name, $input = false, $output = false, $fault = false)</code>
            Methode fügt eine Operation zu einem gebundenen Element mit dem spezifizierten Namen hinzu
            (/definitions/binding/operation).
        </para>
        <para>
            Sie nimmt das <code>XML_Tree_Node</code> Objekt das von <code>addBinding()</code> zurückgegeben
            wird als Eingabe (<code>$binding</code> Parameter) um ein 'operation' Element mit
            Eingabe/Ausgabe/Falsch Einträgen hinzuzufügen abhängig von den spezifizierten Parametern.
        </para>
        <para>
            Die Zend_Soap_Server Implementation fügt korrespondierende gebundene Einträge für jede
            Web Service Methode mit Eingabe und Ausgabe Einträgen hinzu die ein 'soap:body' Element als
            '&lt;soap:body use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/&gt; definieren.
        </para>
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_bindings"/> für Details.
        </para>
    </sect2>
    
    <sect2 id="zend.soap.wsdl.add_soap_binding">
        <title>Die <code>addSoapBinding()</code> Methode.</title>
        <para>
            Die <code>addSoapBinding($binding, $style = 'document', $transport = 'http://schemas.xmlsoap.org/soap/http')</code> 
            Methode fügt einen SOAP Bindung Eintrag ('soap:binding') zum Bindung Element (welches bereits
            zu einigen Port Typen verbunden ist) mit dem spezifizierten Stil und Transport hinzu
            (Die Zend_Soap_Server Implementation verwendet RPC Stil über HTTP).
        </para>
        <para>
            Das '/definitions/binding/soap:binding' Element wird verwendet um zu signieren das das Bindung zum
            SOAP Protokoll Format gebunden ist.
        </para>
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_bindings"/> für Details.
        </para>
    </sect2>

    <sect2 id="zend.soap.wsdl.add_soap_operation">
        <title>Die <code>addSoapOperation()</code> Methode.</title>
        <para>
            Die <code>addSoapOperation($binding, $soap_action)</code> Methode fügt einen SOAP Operations Eintrag
            ('soap:operation') zum Bindungs Element mit den spezifizierten Aktionen hinzu. Das 'style' Attribut
            des 'soap:operation' Elements wird nicht verwendet seit das Programmier Modell (RPC-orientiert
            oder Dokument-orientiert) die <code>addSoapBinding()</code> Methode verwenden kann.
        </para>
        <para>
            Das 'soapAction' Attribut des '/definitions/binding/soap:operation' Elements spezifiziert den Wert
            des SOAPAction Headers für diese Operation. Dieses Attribut wird für SOAP über HTTP benötigt und
            <emphasis>darf in keinem Fall</emphasis> für andere Transporte spezifiziert werden.
        </para>
        <para>
            Die Zend_Soap_Server Implementation verwendet <code>$serviceUri . '#' . $methodName</code> für
            den SOAP Operations Action Namen.
        </para>
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_soap:operation"/> für Details.
        </para>
    </sect2>
    
    <sect2 id="zend.soap.wsdl.add_service">
        <title>Die <code>addService()</code> Methode.</title>
        <para>
            Die <code>addService($name, $port_name, $binding, $location)</code> Methode fügt dem WSDL Dokument
            ein '/definitions/service' Element mit dem spezifizierten Web Service Namen, Port Namen, Bindung
            und Ort hinzu.
        </para>
        <para>
            WSDL 1.1 erlaubt es verschiedene Port Typen pro Service zu haben (Sets von Operationen). Diese
            Fähigkeit wird von der Zend_Soap_Server Implementation nicht verwendet und von der
            <code>Zend_Soap_Wsdl</code> Klasse nicht unterstützt.
        </para>
        <para>
            Die Zend_Soap_Server Implementation verwendet:
            <itemizedlist>
                <listitem>
                    <para>
                        <code>$name . 'Service'</code> als Web Service Name,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>$name . 'Port'</code> als Port Typ Name,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <code>'tns:' . $name . 'Binding'</code>
                            <footnote>
                                <para>
                                    <code>'tns:' namespace</code> wird als Skript URI definiert 
                                    (<code>'http://'  .$_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME']</code>).
                                </para>
                            </footnote> 
                            als Bindungs Name,
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Die Skript URI<footnote><para><code>'http://'  .$_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME']</code></para></footnote>
                        als eine Service URI für die Web Service Definition bei Verwendung von Klassen.
                    </para>
                </listitem>
            </itemizedlist>
            wobei <code>$name</code> der Klassenname für die Web Service Definition ist wenn Klassen verwendet
            werden und Skript Name für die Web Service Definition wenn ein Set von Funktionen verwendet wird.
        </para>
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_services"/> für Details.
        </para>
    </sect2>

    <sect2 id="zend.soap.wsdl.types">
        <title>Typ Entsprechung.</title>
        <para>
            Die Zend_Soap WSDL Implementation der Zugriffsmethoden verwendet die folgenden Typ Entsprechungen
            zwischen PHP und SOAP Typen:

            <itemizedlist>
                <listitem>
                    <para>PHP Strings &lt;-&gt; <code>xsd:string</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP Integer &lt;-&gt; <code>xsd:int</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP Float und Double &lt;-&gt; <code>xsd:float</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP Boolean &lt;-&gt; <code>xsd:boolean</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP Arrays &lt;-&gt; <code>soap-enc:Array</code>.</para>
                </listitem>
                <listitem>
                    <para>PHP Objekt &lt;-&gt; <code>xsd:struct</code>.</para>
                </listitem>
                <listitem>
                    <para>
                        PHP Klasse &lt;-&gt; <code>tns:$className</code>
                        <footnote>
                            <para>
                                Wenn ein <code>Zend_Soap_Wsdl</code> Objekt erstellt wird wenn der
                                <code>$extractComplexTypes</code> Parameter ausgeschaltet ist, dann werden
                                Klassen zu <code>xsd:anyType</code> übersetzt.
                            </para>
                            <para>
                                Andernfalls wird <code>tns:$className</code> verwendet und der Typ wird
                                detailiert im &lt;types&gt; WSDL Kapitel beschrieben.
                            </para>
                        </footnote>.
                    </para>
                </listitem>
                <listitem>
                    <para>PHP Void &lt;-&gt; Leerer Typ.</para>
                </listitem>
                <listitem>
                    <para>Wenn der Typ auf irgendeinem Grund zu keinem dieser Typen passt, dann wird
                    <code>xsd:anyType</code> verwendet.</para>
                </listitem>
            </itemizedlist>
            
            Wo <code>xsd:</code> ein "http://www.w3.org/2001/XMLSchema" Namespace ist, ist 
            <code>soap-enc:</code> ein "http://schemas.xmlsoap.org/soap/encoding/" Namespace,
            und <code>tns:</code> ist ein "Ziel Namespace" für das Service.
        </para>
        
        <sect3 id="zend.soap.wsdl.types.retrieve">
            <title>Empfangen von Typ Informationen.</title>
            <para>
                Die <code>getType($type)</code> Methode kann verwendet werden um ein Mapping für einen
                spezifizierten PHP Typ zu erhalten:

                <programlisting role="php"><![CDATA[<?php
...
$wsdl = new Zend_Soap_Wsdl('My_Web_Service', $myWebServiceUri);

...
$soapIntType = $wsdl->getType('int');

...
class MyClass {
    ...
}
...
$soapMyClassType = $wsdl->getType('MyClass');]]></programlisting>
            </para>
        </sect3>

        <sect3 id="zend.soap.wsdl.types.add_complex">
            <title>Empfangen von Typ Informationen.</title>
            <para>
                Die <code>addComplexType($type)</code> Methode wird verwendet um komplexe Typen
                (PHP Klassen) zu einem WSDL Dokument hinzuzufügen.
            </para>
            
            <para>
                Es wird automatisch von der <code>getType()</code> Methode verwendet und fügt einen
                korrespondierenden komplexen Typen hinzu wenn der <code>$extractComplexTypes</code>
                Parameter des Konstruktors auf <code>true</code> gesetzt wurde
                (andernfalls werden Klassen zum SOAP Typ 'xsd:anyType' gemapped).
            </para>

            <para>
                Die <code>addComplexType()</code> Methode erzeugt ein
                '/definitions/types/xsd:schema/xsd:complexType' Element für jeden beschriebenen komplexen
                Typen mit dem Namen der spezifizierten PHP Klasse.
            </para>

            <para>
                Alle öffentlichen Eigenschaften der Klasse werden als korrespondierendes Element von
                'xsd:all' Knoten dem 'xsd:complexType' hinzugefügt.
            </para>
            
            <para>
                Die Klassen Eigenschaften <emphasis>MÜSSEN</emphasis> ein Docblock Kapitel mit den
                beschriebenen PHP Typen haben damit die Eigenschaft in die WSDL Beschreibung hinzugefügt wird.
            </para>
            
            <para>
                <code>addComplexType()</code> prüft ob der Typ bereits im Typ Kapitel des WSDL Dokuments
                beschrieben wird.
            </para>
            
            <para>
                Es verhindert Duplikate wenn diese Methode zwei oder mehrmals aufgerufen wird und auch
                Rekursionen im Kapitel der Typ Definitionen.
            </para>
        </sect3>
        
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_types"/> für Details.
        </para>
    </sect2>

    <sect2 id="zend.soap.wsdl.add_documentation">
        <title>Die <code>addDocumentation()</code> Methode.</title>
        <para>
            Die <code>addDocumentation($input_node, $documentation)</code> Methode fügt menschlich lesbare
            Dokumentation hinzu indem das optionale 'wsdl:document' Element verwendet wird.
        </para>
        <para>
            Das '/definitions/binding/soap:binding' Element wird verwendet um zu signieren das die Bindung
            zum SOAP Protokoll Format gebunden wurde.
        </para>
        <para>
            Siehe <ulink url="http://www.w3.org/TR/wsdl#_documentation"/> für Details.
        </para>
    </sect2>
    
    <sect2 id="zend.soap.wsdl.retrieve">
        <title>Das endgültige WSDL Dokument erhalten.</title>
        <para>
            Die <code>toXML()</code>, <code>toDomDocument()</code> und <code>dump($filename = false)</code>
            Methoden können verwendet werden um das WSDL Dokument als XML, DOM Struktur oder Datei zu erhalten.
        </para>
    </sect2>

</sect1>
