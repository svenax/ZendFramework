<!-- EN-Revision: 11089 -->
<sect3 id="zend.controller.router.routes.standard">
    <title>Zend_Controller_Router_Route</title>

    <para>
        <code>Zend_Controller_Router_Route</code> ist die standardmäßige Framework Route. Sie kombiniert einfache
        Verwendung mit einer flexiblen Routendefinition. Jede Route besteht primär aus URL Übereinstimmungen
        (von statischen und dynamischen Teilen (Variablen)) und kann mit Standardwerten initialisiert werden
        wie auch mit variablen Notwendigkeiten.
    </para>

    <para>
        Angenommen unsere fiktive Anwendung benötigt eine informelle Seite über den Seitenauthor. Es soll möglich
        sein mit dem Browser auf <code>http://domain.com/author/martel</code> zu verweisen um die Informationen über
        diesen "martel" Typ zu sehen. Und die Route für so eine Funktionalität würde so aussehen:
    </para>

    <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'author/:username',
    array(
        'controller' => 'profile',
        'action'     => 'userinfo'
    )
);

$router->addRoute('user', $route);
]]>
    </programlisting>

    <para>
        Der ersten Parameter im Konstruktor von <code>http://domain.com/author/martel</code> ist eine
        Routendefinition die einer URL entspricht. Routendefinitionen bestehen aus statischen und dynamischen
        Teilen die durch einen Schrägstrich ('/') seperiert sind. Statische Teile sind nur einfacher Text:
        <code>author</code>. Dynamische Teile, Variablen genannt, werden durch einen vorangestellten
        Doppelpunkt, zum variablen Namen, markiert: <code>:username</code>.
    </para>

    <note>
        <title>Zeichen verwenden</title>
        <para>
            Die aktuelle Implementation erlaubt die Verwendung von allen Zeichen (außer einem Schrägstrich) als
            variablen Identifikator, aber es wird dringend empfohlen das nur Zeichen verwendet werden die auch für
            PHP Veriablen Identifikatoren gültig sind. Zukünftige Implementationen können dieses Verhlaten ändern,
            was zu versteckten Bugs im eigenen Code führen würde.
        </para>
    </note>

    <para>
        Diese Beispielroute wird verglichen wenn der Browser auf <code>http://domain.com/author/martel</code>
        zeigt. In diesem Fall werden alle seine Variablen dem <code>Zend_Controller_Request</code> Objekt
        injiziiert und es kann im <code>ProfileController</code> darauf zugegriffen werden. Variablen die von diesem
        Beispiel zurückgegeben werden können als Array mit den folgenden Schlüssel- und Wertepaaren repräsentiert
        werden:
    </para>

    <programlisting role="php"><![CDATA[
$values = array(
    'username'   => 'martel',
    'controller' => 'profile',
    'action'     => 'userinfo'
);
]]>
    </programlisting>

    <para>
        Später sollte <code>Zend_Controller_Dispatcher_Standard</code> die <code>userinfoAction()</code> Methode
        der eigenen <code>ProfileController</code> Klasse aufrufen (im Standardmodul) basierend auf diesen
        Werten. Dort ist es möglich alle Variablen durch die <code>Zend_Controller_Action::_getParam()</code>
        oder <code>Zend_Controller_Request::getParam()</code> Methoden zuzugreifen:
    </para>

    <programlisting role="php"><![CDATA[
public function userinfoAction()
{
    $request = $this->getRequest();
    $username = $request->getParam('username');

    $username = $this->_getParam('username');
}
]]>
    </programlisting>

    <para>
        Eine Routendefinition kann ein weiteres spezielles Zeichen enthalten - eine Wildcard - dargestellt durch ein
        '*' Symbol. Es wird verwendet um Parameter genauso wie im standard Modulrouter zu erhalten (var => Wertepaare
        definiert in der URI). Die folgende Route imitiert mehr oder weniger das Verhalten des Modulrouters:
    </para>

    <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    ':module/:controller/:action/*',
    array('module' => 'default')
);
$router->addRoute('default', $route);
]]>
    </programlisting>

    <sect4 id="zend.controller.router.routes.standard.variable-defaults">
        <title>Variable Standards</title>

        <para>
            Jede Variable im Router kann einen Standardwert haben und das ist für was der zweite Parameter des
            Konstruktors von <code>Zend_Controller_Router_Route</code> verwendet wird. Dieser Parameter ist ein
            Array mit Schlüsseln die Variablennamen repräsentieren und mit Werten als gewünschte Standards:
        </para>

        <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array('year' => 2006)
);
$router->addRoute('archive', $route);
]]>
        </programlisting>

        <para>
            Die obige Route entspricht URLs wie <code>http://domain.com/archive/2005</code> und
            <code>http://example.com/archive</code>. Im späteren Fall wird die Variable year einen initialen
            Standardwert von 2006 haben.
        </para>

        <para>
            Dieses Beispiel resultiert darin das eine year Variable in das Anfrage Objekt injiziiert wird. Da keine
            Routinginformation vorhanden ist (es sind keine Kontroller und Aktionsparameter definiert), wird die
            Anwendung zum Standardkontroller und der Aktionsmethode (welche beide in
            <code>Zend_Controller_Dispatcher_Abstract</code> definiert sind) weitergeleitet. Um es verwendbarer
            zu machen muß ein gültiger Kontroller und eine gültige aktion als Standard für die Route angegeben
            werden:
        </para>

        <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    )
);
$router->addRoute('archive', $route);
]]>
        </programlisting>

        <para>
            Diese Route führt dazu das an die Methode <code>showAction()</code> der Klasse
            <code>ArchiveController</code> weitergeleitet wird.
        </para>

    </sect4>

    <sect4 id="zend.controller.router.routes.standard.variable-requirements">
        <title>Variable Anforderungen</title>

        <para>
            Man kann einen dritten Parameter dem <code>Zend_Controller_Router_Route</code> Konstruktor hinzufügen
            wo variable Anforderungen gesetzt werden können. Diese werden als Teil eines regulären Ausdrucks
            definiert:
        </para>

        <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    ),
    array('year' => '\d+')
);
$router->addRoute('archive', $route);
]]>
        </programlisting>

        <para>
            Mit einer Route die wie oben definiert ist, wird der Router nur dann stattfinden wenn die year
            Variable nummerische Daten enthält, z.B. <code>http://domain.com/archive/2345</code>.
            Eine URL wie <code>http://example.com/archive/test</code> wird nicht zugeordnet und die Kontrolle wird
            stattdessen an die nächste Route in der Kette übertragen.
        </para>
    </sect4>

    <sect4 id="zend.controller.router.routes.standard.hostname-routing">
        <title>Routen von Hostnamen</title>

        <para>
            Man kann auch den Hostnamen für das Matchen von Routen verwenden. Für das einfache Matchen gibt es
            eine statische Hostname Option:
        </para>

        <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    array(
        'host' => 'blog.mysite.com',
        'path' => 'archive'
    ),
    array(
        'module'     => 'blog',
        'controller' => 'archive',
        'action'     => 'index'
    )
);
$router->addRoute('archive', $route);
]]>
        </programlisting>

        <para>
            Wenn Parameter im Hostnamen gematcht werden sollen gibt es eine Regex Option. Im folgenden
            Beispiel wird die Subdomain als Benutzername-Parameter für den Action Kontroller verwendet.
            Wenn die Route zusammengefügt wird, muß einfach der Benutzername als Parameter angegeben werden,
            die man es mit den anderen Pfad Parametern machen würde: 
        </para>
        
        <programlisting role="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    array(
        'host' => array(
            'regex'   => '([a-z]+).mysite.com',
            'reverse' => '%s.mysite.com'
            'params'  => array(
                1 => 'username'
            ) 
        ),
        'path' => ''
    ),
    array(
        'module'     => 'users',
        'controller' => 'profile',
        'action'     => 'index'
    )
);
$router->addRoute('profile', $route);
]]>
        </programlisting>
    </sect4>
</sect3>
<!--
vim:se ts=4 sw=4 et:
-->