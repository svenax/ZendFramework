<!-- EN-Revision: 9988 -->
<sect1 id="zend.form.decorators">
    <title>Erstellen von eigenem Form Markup durch Zend_Form_Decorator</title>

    <para>
        Die Darstellung eines Form Objektes ist komplett optional -- <code>Zend_Form</code>'s
        render() Methoden müssen nicht einmal verwendet werden. Wenn es trotzdem so gemacht wird,
        dann werden Dekoratoren verwendet um die verschiedenen Form Objekte darzustellen.
    </para>

    <para>
        Eine Vielzahl an Dekoratoren kann jedem Teil angefügt werden (Elemente, Display Gruppen,
        Sub Forms, oder das Form Objekt selbst); trotzdem kann nur ein Dekorator eines bestimmten
        Typs jedem Teil engefügt werden. Dekoratoren werden in der Reihenfolge aufgerufen in der
        Sie registriert werden. Abhängig vom Dekorator, kann dieser den Inhalt ersetzen der Ihm
        übergeben wurde, oder Inhalt anhängen oder voranstellen.
    </para>

    <para>
        Der Objektstatus wird durch Konfigurations Optionen gesetzt die dem Konstruktor oder der
        <code>setOptions()</code> Methode des Dekorators übergeben werden. Wenn Dekoratoren, über
        <code>addDecorator()</code> des Teils oder ähnliche Methoden, erstellt werden können der
        Methode Optionen als Argument übergeben werden. Diese können verwendet werden um eine
        Platzierung zu spezifizieren, einen Seperator der zwischen übergebenem Inhalt und neu
        erstelltem Inhalt verwendet wird, oder welche Option der Dekorator auch immer unterstützt. 
    </para>

    <para>
        Bevor jede <code>render()</code> Methode der Dekoratoren aufgerufen wird, wird das aktuelle
        Teil im Dekorator mit <code>setElement()</code> gesetzt, was dem Dekorator zeigt welches
        Teil dargestellt werden soll. Das erlaubt es Dekoratoren zu erstellen die nur spezielle
        Abschnitte des Teils darstellen -- wie das Label, den Wert, Fehlermeldungen, usw. Durch die
        Verbindung von verschiedenen Dekoratoren die ein spezielles Segment des Elements darstellen
        kann ein komplexes Markup gebaut werden das das komplette Teil repräsentiert.
    </para>

    <sect2 id="zend.form.decorators.operation">
        <title>Operationen</title>

        <para>
            Um einen Dekorator zu konfigurieren, kann ein Array von Optionen, oder ein
            <code>Zend_Config</code> Objekt an dessen Konstruktor übergeben werden, ein Array an
            <code>setOptions()</code>, oder ein <code>Zend_Config</code> Objekt an
            <code>setConfig()</code>.
        </para>

        <para>
            Die Standard Optionen beinhalten:
        </para>

        <itemizedlist>
            <listitem><para>
                    <code>placement</code>: Die Platzierung kann entweder 'append' oder 'prepend'
                    sein (unabhängig von der Schreibweise), und definiert ob der Inhalt der
                    <code>render()</code> übergeben wird, angehängt oder vorangestellt wird. Im
                    Fall das ein Dekorator den Inhalt ersetzt wird diese Einstellung ignoriert.
                    Der Standardwert ist anhängen.
            </para></listitem>

            <listitem><para>
                    <code>separator</code>: Der Separator wird zwischen dem Inhalt der an
                    <code>render()</code> übergeben wird und durch den Dekorator neu erstelltem
                    Inhalt verwendet, oder zwischen Teilen die durch den Dekorator dargestellt
                    werden (z.B. FormElements verwenden Seperatoren zwischen jedem dargestellten
                    Teil). Im Fall das ein Dekoratpr den Inhalt ersetzt, wird diese Einstellung
                    ignoriert. Der Standardwert ist <code>PHP_EOL</code>.
            </para></listitem>
        </itemizedlist>

        <para>
            Das Dekorator Interface spezifiziert Methoden für die Interaktion mit Optionen. Diese
            beinhalten:
        </para>

        <itemizedlist>
            <listitem><para>
                    <code>setOption($key, $value)</code>: setzt eine einzelne Option.
            </para></listitem>

            <listitem><para>
                    <code>getOption($key)</code>: eine einzelne Optionswert erhalten.
            </para></listitem>

            <listitem><para>
                    <code>getOptions()</code>: alle Optionen erhalten.
            </para></listitem>

            <listitem><para>
                    <code>removeOption($key)</code>: eine einzelne Option entfernen.
            </para></listitem>

            <listitem><para>
                    <code>clearOptions()</code>: alle Optionen entfernen.
            </para></listitem>
        </itemizedlist>

        <para>
            Dekoratore sollen mit den verschiedenen <code>Zend_Form</code> Klassentypen
            interagieren: <code>Zend_Form</code>, <code>Zend_Form_Element</code>,
            <code>Zend_Form_DisplayGroup</code>, und allen von Ihnen abgeleiteten Klassen. Die
            Methode <code>setElement()</code> erlaubt es das Objekt des Dekorators mit den aktuell
            gearbeitet wird, zu setzen und <code>getElement()</code> wird verwendet um es zu
            empfangen.
        </para>

        <para>
            Die <code>render()</code> Methode jeden Dekorators akzeptiert einen String
            <code>$content</code>. Wenn der erste Dekorator aufgerufen wird, ist dieser String
            typischerweise leer, wärend er bei nachfolgenden Aufrufen bekannt sein wird. Basierend
            auf dem Typ des Dekorators und den Ihm übergebenen Optionen, wird der Dekorator
            entweder diesen String ersetzen, den String voranstellen oder den String anfügen; ein
            optionaler Separator wird in den späteren zwei Siturationen verwendet.
        </para>
    </sect2>

    <sect2 id="zend.form.decorators.standard">
        <title>Standard Dekoratore</title>

        <para>
            <code>Zend_Form</code> wird mit vielen Standard Dekoratoren ausgeliefert; siehe
            <link linkend="zend.form.standardDecorators">das Kapitel über Standard Dekorator</link>
            für Details.
        </para>
    </sect2>

    <sect2 id="zend.form.decorators.custom">
        <title>Eigene Dekoratore</title>

        <para>
            Wenn man der Meinung ist das die Notwendigkeiten der Darstellung sehr komplex sind oder
            starke Anpassungen benötigt, sollte man an die Erstellung eines eigenen Dekorators
            überlegen. 
        </para>

        <para>
            Dekoratore implementieren nur <code>Zend_Decorator_Interface</code>. Das Interface
            spezifiziert folgendes:
        </para>

        <programlisting role="php"><![CDATA[<?php
interface Zend_Decorator_Interface
{
    public function __construct($options = null);
    public function setElement($element);
    public function getElement();
    public function setOptions(array $options);
    public function setConfig(Zend_Config $config);
    public function setOption($key, $value);
    public function getOption($key);
    public function getOptions();
    public function removeOption($key);
    public function clearOptions();
    public function render($content);
}
?>]]></programlisting>

        <para>
            Um das einfacher zu machen, kann man einfach <code>Zend_Decorator_Abstract</code>
            erweitern, welches alle Methoden außer <code>render()</code> implementiert.
        </para>

        <para>
            Als Beispiel nehmen wir an das wir die Anzahl an verwendeten Dekoratoren verringern
            will, und einen "gemeinsamen" Dekorator erstellt der die Darstellung von Label,
            Element, jegliche Fehlermeldung, und Beschreibung in einem HTML <code>div</code>
            übernimmt. So ein 'Gemeinsamer' Dekorator kann wie folgt erstellt werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
class My_Decorator_Composite extends Zend_Form_Decorator_Abstract
{
    public function buildLabel()
    {
        $element = $this->getElement();
        $label = $element->getLabel();
        if ($translator = $element->getTranslator()) {
            $label = $translator->translate($label);
        }
        if ($element->isRequired()) {
            $label .= '*';
        }
        $label .= ':';
        return $element->getView()->formLabel($element->getName(), $label);
    }

    public function buildInput()
    {
        $element = $this->getElement();
        $helper  = $element->helper;
        return $element->getView()->$helper(
            $element->getName(),
            $element->getValue(),
            $element->getAttribs(),
            $element->options
        );
    }

    public function buildErrors()
    {
        $element  = $this->getElement();
        $messages = $element->getMessages();
        if (empty($messages)) {
            return '';
        }
        return '<div class="errors">' . $element->getView()->formErrors($messages) . '</div>';
    }

    public function buildDescription()
    {
        $element = $this->getElement();
        $desc    = $element->getDescription();
        if (empty($desc)) {
            return '';
        }
        return '<div class="description">' . $desc . '</div>';
    }

    public function render($content)
    {
        $element = $this->getElement();
        if (!$element instanceof Zend_Form_Element) {
            return $content;
        }
        if (null === $element->getView()) {
            return $content;
        }

        $separator = $this->getSeparator();
        $placement = $this->getPlacement();
        $label     = $this->buildLabel();
        $input     = $this->buildInput();
        $errors    = $this->buildErrors();
        $desc      = $this->buildDescription();

        $output = '<div class="form element">'
                . $label
                . $input
                . $errors
                . $desc
                . '</div>'

        switch ($placement) {
            case (self::PREPEND):
                return $output . $separator . $content;
            case (self::APPEND):
            default:
                return $content . $separator . $output;
        }
    }
}
?>]]></programlisting>

        <para>
            Das kann das in den Dekorator Pfad platziert werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
// für ein Element:
$element->addPrefixPath('My_Decorator', 'My/Decorator/', 'decorator');

// für alle Elemente:
$form->addElementPrefixPath('My_Decorator', 'My/Decorator/', 'decorator');
?>]]></programlisting>

        <para>
            Man kann dann diesen Dekorator als 'Gemeinsam' spezifizieren und diesen an ein Element
            anfügen:
        </para>

        <programlisting role="php"><![CDATA[<?php
// Überschreibe existierende Dekoratoren mit diesem einzelnen:
$element->setDecorators(array('Composite'));
?>]]></programlisting>

        <para>
            Wärend dieses Beispiel zeigt wie ein Dekorator erstellt werden kann der komplexe
            Ausgaben von verschiedenen Element-Eigenschaften darstellt können auch Dekoratore
            erstellt werden die einzelne Aspekte eines Elements handhaben; die 'Decorator' und
            'Label' Dekoratore sind exzellente Beispiele dieser Praxis. Das erlaubt es Dekotatore
            zu mischen und zu anzupassen um komplexe Ausgaben zu erhalten -- und auch die
            Überladung von einzelnen Aspekten der Dekoration für die Anpassung an eigene
            Bedürfnisse. 
        </para>

        <para>
            Wenn man ,zum Beispiel, eine einfache Anzeige benötigt, das ein Fehler aufgetreten ist
            wären ein Element überprüft wurde, aber nicht jede der individuellen Validator
            Fehlermeldungen angezeigt werden soll, kann ein eigener 'Errors' Dekorator erstellt
            werden:
        </para>

        <programlisting role="php"><![CDATA[<?php
class My_Decorator_Errors
{
    public function render($content = '')
    {
        $output = '<div class="errors">Der angegebene Wert war ungültig;
            bitte nochmals versuchen</div>';

        $placement = $this->getPlacement();
        $separator = $this->getSeparator();

        switch ($placement) {
            case 'PREPEND':
                return $output . $separator . $content;
            case 'APPEND':
            default:
                return $content . $separator . $output;
        }
    }
}
?>]]></programlisting>
    
        <para>
            In diesem speziellen Beispiel, weil das letzte Segment, 'Errors', des Dekorators auf
            <code>Zend_Form_Decorator_Errors</code> passt wird er <emphasis>statt</emphasis> diesem
            Dekorator dargestellt -- was bedeutet das kein Dekorator verändert werden muß um die
            Ausgabe anzupassen. Durch die Benennung des Dekorators nach dem bestehenden Standard
            Dekorator, kann die Dekoration verändert werden ohne das der Dekorator des Elements
            verändert werden muß.
        </para>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
