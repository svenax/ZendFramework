<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 15617 -->
<!-- Reviewed: no -->
<sect1 id="zend.tool.framework.clitool">
    <title>Verwenden des CLI Tools</title>

    <para>
        Das CLI, oder Kommandozeilen Tool (Intern als Consolen Tool bekannt), ist aktuell das
        primäre Interface für die  Bearbeitung von <code>Zend_Tool</code> Anfragen. Mit dem CLI
        Tool können Entwickler werkmäßige Anfragen in einem "Kommandozeilen Fenster", allgemein
        bekannt als "Terminal", erstellen. Diese Umgebung ist in einer *nix Umgebung vorherrschend,
        hat aber auch eine bekannte Implementation in Windows, mit <code>cmd.exe</code>, Console2
        und auch dem Cygwin Projekt.
    </para>

    <sect2 id="zend.tool.framework.clitool.setup-general">
        <title>Vorbereiten des CLI Tools</title>

        <para>
            Um werkmäßige Anfragen über den Kommandozeilen Client zu erstellen, muß man zuerst den
            Client einrichten, damit das System das "zf" Kommando behandeln kann. Der Kommandozeilen
            Client für alle Wünsche und Zwecke, ust die <code>.sh</code> oder <code>.bat</code>
            Datei die mit der Distribution von Zend Framework ausgeliefert wurde. Im Trunk kann sie
            hier gefunden werden:
            <ulink url="http://framework.zend.com/svn/framework/standard/trunk/bin/">http://framework.zend.com/svn/framework/standard/trunk/bin/</ulink>
        </para>

        <para>
            Wie man siehr gibt es im <code>bin/</code> Verzeichnis 3 Dateien: <code>zf.php</code>,
            <code>zf.sh</code> und <code>zf.bat</code>. <code>zf.sh</code> und <code>zf.bat</code>
            sind spezielle Client-Wrapper für das Betriebssystem: <code>zf.sh</code> für *nix
            Umgebungen, und zf.bat für Win32 Umgebungen. Diese Client-Wrapper sind dafür zuständig
            die richtige <code>php.exe</code> und <code>zf.php</code> zu finden, sowie die Anfrage
            des Clients weiterzugeben. <code>zf.php</code> ist dafür zuständig die Umgebung zu
            verstehen, den richtigen include_path zu erstellen, und das an die richtigen
            Komponenten der Bibliothek für die Verarbeitung zu übergeben was über die Kommandozeile
            übergeben wurde.
        </para>

        <para>
            Ultimativ muß man zwei Dinge sicherstellen das alles funktioniert, unabhängig davon
            auf welchem Betriebssystem man ist:
        </para>

        <orderedlist>
            <listitem>
                <para>
                    <code>zf.sh/zf.bat</code> ist vom Systempfad aus erreichbar. Das ist die
                    Möglichkeit <code>zf</code> überall von der Kommandozeile aus aufzurufen,
                    unabhängig davon welches das aktuelle Arbeitsverzeichnis ist.
                </para>
            </listitem>
            <listitem>
                <para>
                    ZendFramework/library ist im eigenen <code>include_path</code>.
                </para>
            </listitem>
        </orderedlist>

        <para>
            <emphasis>Beachte:</emphasis> wärend das oben stehende die idealsten Voraussetzungen
            sind, kann man einfach Zend Framework herunterladen und erwarten das es mit
            <code>./path/to/zf.php</code> funktioniert.
        </para>

    </sect2>

    <sect2 id="zend.tool.framework.clitool.setup-starnix">
        <title>Das CLI Tool in Unix-artigen Systemen vorbereiten</title>

        <para>
            Das übliche Setup in einer *nix Umgebung, besteht darin <code>zf.sh</code> und
            <code>zf.php</code> in das gleiche Verzeichnis wie die PHP Binaries zu kopieren. Diese
            können normalerweise an einem der folgenden Plätze gefunden werden:
        </para>

        <programlisting language="text"><![CDATA[
/usr/bin
/usr/local/bin
/usr/local/ZendServer/bin/
/Applications/ZendServer/bin/
]]></programlisting>

        <para>
            Um den Ort der PHP Binaries herauszufinden, kann man 'which php' auf der Kommandozeile
            ausführen. Das gibt den Ort der PHP Binaries zurück, die verwendet werden wenn php
            Skripte in der eigenen Umgebung ausgeführt werden.
        </para>

        <para>
            Der nächste Arbeitsschritt besteht darin, sicherzustellen das die Zend Framework
            Bibliothek richtig im <code>include_path</code> vom PHP System steht. Um herauszufinden
            wo der <code>include_path</code> ist, kann man 'php -i' ausführen und nach der
            <code>include_path</code> Variable sehen, oder kompakter einfach
            'php -i | grep include_path' ausführen. Sobald man herausgefunden hat wo die
            <code>include_path</code> Variable steht (das ist normalerweise etwas wie
            /usr/lib/php, /usr/share/php, /usr/local/lib/php, oder ähnliches), muß man
            sicherstellen das der Inhalt des library/ Verzeichnisses im spezifizierten Verzeichnis
            des <code>include_path</code>'s abgelegt sind.
        </para>

        <para>
            Sobald man diese zwei Dinge getan hat, sollte man in der Lage sein ein Kommando
            auszuführen und die richtige Antwort, ähnlich der folgenden, zurückzugekommen:
        </para>

        <para>
            <inlinegraphic scale="100" align="center" valign="middle"
                fileref="figures/zend.tool.framework.cliversionunix.png" format="PNG" />
        </para>

        <para>
            Wenn man diese Art der Ausgabe nicht sieht, muß man zurückgehen und das Setup prüfen
            um sicherzustellen das alle notwendigen Teile am richtigen Platz stehen.
        </para>

        <para>
            Es gibt eine Anzahl von alternativen Setup die man eventuell verwenden will, abhängig
            von der Server Konfiguration, dem Zugriffslevel, oder aus anderen Gründen.
        </para>

        <para>
            <emphasis>ALTERNATIVE SETUP</emphasis> bedeutet das der Zend Framework Download so wie
            er ist zusammenbleibt, und ein Link von einem PATH Ort zur Datei <code>zf.sh</code>
            erstellt wird. Das bedeutet das man den Inhalt des ZendFramework Downloads an einem
            Ort wie <code>/usr/local/share/ZendFramework</code>, oder noch lokaler wie
            <code>/home/username/lib/ZendFramework</code> platzieren kann, und einen Symbolischen
            Link zu <code>zf.sh</code> erstellt.
        </para>

        <para>
            Angenommen man will den Link nach <code>/usr/local/bin</code> geben (das könnte auch
            funktionieren wenn der Link in <code>/home/username/bin/</code> platziert werden soll),
            dann könnte man ein Kommando ähnlich dem folgenden ausführen:
        </para>

        <programlisting language="sh"><![CDATA[
ln -s /usr/local/share/ZendFramework/bin/zf.sh /usr/local/bin/zf

# ODER (zum Beispiel)
ln -s /home/username/lib/ZendFramework/bin/zf.sh /home/username/bin/zf
]]></programlisting>

        <para>
            Das erstellt einen Link den man global von der Kommandozeile aus aufrufen können
            sollte.
        </para>

    </sect2>

    <sect2 id="zend.tool.framework.clitool.setup-windows">
        <title>Das CLI Tool in Windows vorbereiten</title>

        <para>
            Das üblichste Setup in einer Windows Win32 Umgebung besteht darin, <code>zf.sh</code>
            und <code>zf.php</code> in das gleiche Verzeichnis wie die PHP Binaries zu kopieren.
            Diese können generell an einem der folgenden Plätze gefunden werden:
        </para>

        <programlisting language="text"><![CDATA[
C:\PHP
C:\Program Files\ZendServer\bin\
C:\WAMP\PHP\bin
]]></programlisting>

        <para>
            Man sollte in der Lage sein <code>php.exe</code> auf der Kommandozeile auszuführen.
            Wenn man das nicht kann, muß man zuerst die Dokumentation prüfen die mit der PHP
            Distribution gekommen ist, oder sicherstellen das der Pfad zu php.exe in der
            Windows Umgebungsvariable PATH vorhanden ist.
        </para>

        <para>
            Der nächste Arbeitsschritt besteht darin, sicherzustellen das die Zend Framework
            Bibliothek richtig im <code>include_path</code> vom PHP System steht. Um herauszufinden
            wo der <code>include_path</code> ist, kann man 'php -i' ausführen und nach der
            <code>include_path</code> Variable sehen, oder kompakter einfach
            'php -i | grep include_path' ausführen wenn Cygwin mit grep zur Verfügung steht.
            Sobald man herausgefunden hat wo die <code>include_path</code> Variable steht (das ist
            normalerweise etwas wie <code>C:\PHP\pear</code>, <code>C:\PHP\share</code>,
            <code>C:\Program Files\ZendServer\share</code> oder ähnliches), muß man
            sicherstellen das der Inhalt des library/ Verzeichnisses im spezifizierten Verzeichnis
            des <code>include_path</code>'s abgelegt sind.
        </para>

        <para>
            Sobald man diese zwei Dinge getan hat, sollte man in der Lage sein ein Kommando
            auszuführen und die richtige Antwort, ähnlich der folgenden, zurückzugekommen:
        </para>

        <para>
            <inlinegraphic scale="100" align="center" valign="middle"
                fileref="figures/zend.tool.framework.cliversionwin32.png" format="PNG" />
        </para>

        <para>
            Wenn man diese Art der Ausgabe nicht sieht, muß man zurückgehen und das Setup prüfen
            um sicherzustellen das alle notwendigen Teile am richtigen Platz stehen.
        </para>

        <para>
            Es gibt eine Anzahl von alternativen Setup die man eventuell verwenden will, abhängig
            von der Server Konfiguration, dem Zugriffslevel, oder aus anderen Gründen.
        </para>

        <para>
            <emphasis>ALTERNATIVE SETUP</emphasis> bedeutet das der Zend Framework Download so wie
            er ist zusammenbleibt, und sowohl die Systemvariable PATH als auch die
            <code>php.ini</code> Datei geändert werden muss. In der Umgebung des Benutzers muss man
            sicherstellen das <code>C:\Path\To\ZendFramework\bin</code> hinzugefügt ist, damit die
            Datei <code>zf.bat</code> ausgeführt werden kann. Auch die Datei <code>php.ini</code>
            ist zu änder um sicherzustellen das <code>C:\Path\To\ZendFramework\library</code> im
            <code>include_path</code> ist.
        </para>

    </sect2>

    <sect2 id="zend.tool.framework.clitool.setup-othernotes">
        <title>Andere Überlegungen für ein Setup</title>

        <para>
            Wenn man aus bestimmten Gründen die Zend Framework  Bibliothek nicht im
            <code>include_path</code> haben will, gibt es auch eine andere Option. Es gibt auch
            zwei spezielle Umgebungsvariablen die <code>zf.php</code> verwendet um den Ort der
            Installation vom Zend Framework zu erkennen.
        </para>

        <para>
            Der erste ist <code>ZEND_TOOL_INCLUDE_PATH_PREPEND</code>, welcher den Wert dieser
            Umgebungsvariablen dem <code>include_path</code> des Systems (<code>php.ini</code>)
            voranstellt, bevor der Client geladen wird.
        </para>

        <para>
            Alternativ kann es gewünscht sein <code>ZEND_TOOL_INCLUDE_PATH</code> zu verwenden,
            um den <code>include_path</code> des System komplett zu <emphasis>ersetzen</emphasis>,
            wenn das speziell für das <code>zf</code> Kommandozeilen Tool Sinn macht.
        </para>
    </sect2>

    <sect2 id="zend.tool.framework.clitool.continuing">
        <title>Wohin als nächstes?</title>

        <para>
            An diesem Punkt sollte man dafür gerüstet sein einige "interessantere" Kommandos
            zu initialisieren. Um weiterzumachen kann man das Kommando <code>zf --help</code>
            ausführen um zu sehen was vorhanden ist.
        </para>

        <para>
            <inlinegraphic scale="100" align="center" valign="middle"
                fileref="figures/zend.tool.framework.clihelp.png" format="PNG" />
        </para>

        <para>
            Lesen Sie bei <code>Zend_Tool_Project</code> im Kapitel "Create Project" weiter um
            zu verstehen wie das <code>zf</code> Skript für die Projekterstellung verwendet werden
            kann.
        </para>
    </sect2>
</sect1>
