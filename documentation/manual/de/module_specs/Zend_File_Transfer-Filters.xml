<!-- EN-Revision: 11289 -->
<sect1 id="zend.file.transfer.filters">

    <title>Filter für Zend_File_Transfer</title>

    <para>
        <code>Zend_File_Transfer</code> wird mit verschiedenen Datei bezogenen Filtern ausgeliefert die
        verwendet werden können um verschiedene Arbeiten die oft auf Dateien angewendet werden zu automatisieren.
        Es ist zu beachten das Dateifilter nach der Validierung angewendet werden. Dateifilter verhlaten sich
        auch etwas anders als andere Filter. Sie geben immer den Dateinamen zurück, und nicht den
        geänderten Inhalt (was eine schlechte Idee wäre wenn auf 1GB Dateien gearbeitet wird). Alle Dateifilter
        welche mit <code>Zend_File_Transfer</code> angeboten werden können in der <code>Zend_Filter</code>
        Komponente gefunden werden und heißen <code>Zend_Filter_File_*</code>. Die folgenden Filter sind
        aktuell vorhanden:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <code>Rename</code>: Dieser Filter kann Dateien umbenenntn, den Ort ändern und sogar das
                Überschreiben von existierenden Dateien erzwingen.
            </para>
        </listitem>
    </itemizedlist>

    <sect2 id="zend.file.transfer.filters.usage">
        <title>Verwenden von Filtern mit <code>Zend_File_Transfer</code></title>

        <para>
            Die Verwendung von Filtern ist sehr einfach. Es gibt verschiedene Methoden für das
            Hinzufügen und Manipulieren von Filtern.
        </para>        

        <itemizedlist>
            <listitem>
                <para>
                    <code>addFilter($filter, $options = null, $files = null)</code>: Fügt den
                    angegebenen Filter zu den Filterstapel hinzu (optional nur zu den Datei(en) die
                    spezifiziert wurden). <code>$filter</code> kann entweder eine aktuelle
                    Filterinstanz sein, oder ein Kurzname der den Filtertyp spezifiziert (z.B. 'Rename').
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>addFilters(array $filters, $files = null)</code>: Fügt die angegebenen
                    Filter zum Filterstapel hinzu. Jeder Eintrag kann entweder ein Filtertyp/-options
                    Paar sein, oder ein Array mit dem Schlüssel 'filter' das den Filter spezifiziert
                    (alle anderen Optionen werden als Optionen für die Instanzierung der Filter angenommen).
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>setFilters(array $filters, $files = null)</code>: Überschreibt alle bestehenden
                    Filter mit den spezifizierten Filtern. Die Filter sollten der Syntax folgen die
                    für <code>addFilters()</code> definiert ist.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>hasFilter($name)</code>: Zeigt ob ein Filter registriert wurde.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilter($name)</code>: Gibt einen vorher registrierten Filter zurück.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>getFilters($files = null)</code>: Gibt registrierte Filter zurück; wenn
                    <code>$files</code> übergeben wurde, werden die Filter für die betreffende Datei
                    oder das Set an Dateien zurückgegeben.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>removeFilter($name)</code>: Entfernt einen vorher registrierten Filter.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>clearFilters()</code>: Löscht alle registrierten Filter.
                </para>
            </listitem>
        </itemizedlist>

        <example id="zend.file.transfer.filters.usage.example">
            <title>Filter zu einem Dateitransfer hinzufügen</title>

            <programlisting role="php"><![CDATA[
$upload = new Zend_File_Transfer();

// Setzt einen neuen Zielpfad
$upload->addFilter('Rename', 'C:\picture\uploads');

// Setzt einen neuen Zielpfad und überschreibt bestehende Dateien
$upload->addFilter('Size', array('C:\picture\uploads', true));
]]>
            </programlisting>
        </example>

        <example id="zend.file.transfer.filters.usage.exampletwo">
            <title>Filter auf eine einzelne Datei begrenzen</title>

            <para>
                <code>addFilter()</code>, <code>addFilters()</code>, und <code>setFilters()</code>
                akzeptieren ein endenes <code>$files</code> Argument. Dieses Argument kann verwendet werden
                um eine Datei oder ein Array von Dateien zu spezifizieren auf dem der angegebene Filter
                gesetzt werden soll.
            </para>

            <programlisting role="php"><![CDATA[
$upload = new Zend_File_Transfer();

// Setzt einen neuen Zielpfad und begrenzt Ihn auf 'file2'
$upload->addFilter('Rename', 'C:\picture\uploads', 'file2');
]]>
            </programlisting>
        </example>

        <para>
            Generell sollte einfach die <code>addFilters()</code> Methode verwendet werden, welche mehrmals
            aufgerufen werden kann.
        </para>

        <example id="zend.file.transfer.filters.usage.examplemultiple">
            <title>Mehrere Filter hinzufügen</title>

            <para>
                Oft ist es einfacher <code>addFilter()</code> mehrere Male aufzurufen. Ein Aufruf für
                jeden Filter. Das erhöht auch die Lesbarkeit und macht den Code wartbarer. Da alle
                Methoden das Fluent-Interface implementieren können Aufrufe einfach wie anbei gezeigt
                gekoppelt werden:
            </para>

            <programlisting role="php"><![CDATA[
$upload = new Zend_File_Transfer();

// Setzt mehrere Rename Filter
$upload->addFilter('Rename', 'C:\picture\newjpg', 'file1')
       ->addFilter('Rename', 'C:\picture\newgif', 'file2');
]]>
            </programlisting>

        </example>
        <note>
            <para>
                Es ist zu beachten das, auch wenn das mehrfache Setzen des gleichen Filters erlaubt
                ist, das zu Problemen führen kann wenn verschiedene Optionen für den gleichen
                Filter verwendet werden.
            </para>
        </note>
    </sect2>

    <sect2 id="zend.file.transfer.filters.rename">
        <title><emphasis role="strong">Rename</emphasis> Filter</title>

        <para>
            Der <code>Rename</code> Filter erlaubt es das Ziel des Uploads zu Ändern, den Dateinamen sowie
            bereits bestehende Dateien zu überschreiben. Er unterstützt die folgenden Optionen:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <code>oldfile</code>: Der Name und das Ziel der alten Datei welche umbenannt werden soll.
                </para>

                <para>
                    Diese Option kann ein String oder ein Array sein. Abhängig von den angegebenen Optionen
                    ändert sich das Verhalten dieser Option.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>newfile</code>: Das neue Verzeichnis, oder der Dateiname der Datei.
                </para>

                <para>
                    Diese Option ist optional und kann ein String, ein Array oder ein Boolean sein. Abhängig von
                    den angegebenen Optionen ändert sich das Verhalten dieser Option.
                </para>
            </listitem>

            <listitem>
                <para>
                    <code>overwrite</code>: Definiert ob die alte Datei von der neuen überschrieben wird wenn
                    diese bereits existiert.
                </para>

                <para>
                    Diese Option ist optional und muß ein Boolean sein. Der Standardwert ist false.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Zusätzlich kann die <code>setFile()</code> Methode verwendet werden um Dateien zu setzen, sie
            überschreibt alle vorher gesetzten Dateien, <code>addFile()</code> um eine neue Datei zu bereits
            bestehenden zu setzen, und <code>getFile()</code> um alle aktuell gesetzten Dateien zu erhalten.
            Um die Dinge zu vereinfachen, versteht dieser Filter verschiedene Schreibweisen und seine
            Methoden und der Contructor verstehen die gleichen Schreibweisen.
        </para>

        <example id="zend.file.transfer.filters.rename.example">
            <title>Verwenden des Rename Filters</title>

            <programlisting role="php"><![CDATA[
$upload = new Zend_File_Transfer_Adapter_Http();

// Setzt einen neuen Zielpfad fpr alle Dateien
$upload->addFilter('Rename', 'C:\mypics\new');

// Setzt einen neuen Zielpfad nur für uploadfile1
$upload->addFilter('Rename', 'uploadfile1', 'C:\mypics\newgifs');
]]>
            </programlisting>

        </example>

        <para>
            Man kann verschiedene Schreibweisen verwenden. Anbei ist eine Tabelle in der eine Beschreibung
            und der Hintergrund für die verschiedenen unterstützten Schreibweisen zu finden ist. Es ist zu
            beachten das, wenn man den Adapter oder das Form Element verwendet, man nicht alle beschriebenen
            Schreibweisen verwenden kann.
        </para>

        <table id="zend.file.transfer.filters.rename.notations">

            <title>Verschiedene Schreibweisen des Rename Filters und deren Bedeutung</title>

            <tgroup cols="2" align="left">
                <thead>
                    <row>
                        <entry>
                            Schreibweise
                        </entry>
                        <entry>
                            Beschreibung
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            addFile('C:\uploads')
                        </entry>
                        <entry>
                            Spezifiziert einen neuen Pfad für alle Dateien wenn der angegebene String ein
                            Verzeichnis ist. Es ist zu beachten das man eine Exception erhält wenn die Datei
                            bereits existiert, siehe den overwriting Parameter.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            addFile('C:\uploads\file.ext')
                        </entry>
                        <entry>
                            Spezifiziert einen neuen Pfad und Dateinamen für alle Dateien wenn der angegebene
                            String nicht als Verzeichnis erkannt wird. Es ist zu beachten das man eine
                            Exception erhält wenn die angegebene Datei bereits existiert, siehe den
                            overwriting Parameter.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            addFile('C:\uploads\file.ext', true)
                        </entry>
                        <entry>
                            Spezifiziert einen neuen Pfad und Dateinamen für alle Dateien wenn der angegebene
                            String nicht als Verzeichnis erkannt wird, und überschreibt alle existierenden
                            Dateien mit dem gleichen Zielnamen. Es ist zu beachten das man keine
                            Verständigung erhält das eine Datei überschrieben wurde.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            addFile('C:\temp\uploads', 'C:\uploads')
                        </entry>
                        <entry>
                            Spezifiziert einen neuen Pfad für alle Dateien im alten Pfad wenn die angegebenen
                            Strings als Verzeichnis erkannt werden. Es ist zu beachten das man eine
                            Exception erhält wenn die Datei bereits exstiert, siehe den overwriting Parameter.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            addFile('C:\temp\uploads', 'C:\uploads', true)
                        </entry>
                        <entry>
                            Spezifiziert einen neuen Pfad für alle Dateien im alten Pfad wenn die angegebenen
                            Strings als Verzeichnis erkant werden und überschreibt alle existierenden Dateien
                            mit dem gleichen Zielnamen. Es ist zu beachten das man keine Benachrichtigung
                            erhält das eine Datei überschrieben wurde.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            addFile(array('C:\temp\uploads\file1.gif' => 'C:\uploads\file.gif'))
                        </entry>
                        <entry>
                            Spezifiziert neue Ziele für angegebene Dateien. Man muß immer Schlüssel-Wert
                            Paare von Quell- und Zieldateien angeben. Es ist zu beachten das man eine
                            Exception erhält wenn die Datei bereits existiert, siehe den overwriting Parameter.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            addFile(array('C:\temp\uploads\file1.gif' => 'C:\uploads\file.gif'), true)
                        </entry>
                        <entry>
                            Spezifiziert neue Ziele für angegebene Dateien. Man muß immer Schlüssel-Wert
                            Paare von Quell- und Zieldateien angeben und er überschreibt alle existierenden
                            Dateien mit dem gleichen Zielnamen. Es ist zu beachten das man keine
                            Benachrichtigung erhält wenn eine Datei überschrieben wurde. Optional kann ein
                            Verzeichnis mit dem Schlüssel 0 angegeben werden welches dann für alle Dateien
                            verwendet wird, für die keine Quelle definiert wurde.
                        </entry>
                    </row>
                </tbody>
            </tgroup>

        </table>

    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 tw=80 et:
-->
